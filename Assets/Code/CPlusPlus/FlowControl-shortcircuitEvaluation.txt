---FILES---
main.cpp
result

---main.cpp---
#include <iostream>

bool car() {
    std::cout << "car function running" << std::endl;
    return false;
}

bool house() {
    std::cout << "house function running" << std::endl;
    return true;
}
bool job() {
    std::cout << "job function running" << std::endl;
    return false;
}
bool spouse() {
    std::cout << "spouse function running" << std::endl;
    return false;
}



int main(){

    /*
    bool a{ true };
    bool b{ true };
    bool c{ true };
    bool d{ false };

    bool p{ false };
    bool q{ false };
    bool r{ false };
    bool m{ true };


    //AND : If one of the operands is 0, the result is 0
    std::cout << std::endl;
    std::cout << "AND short circuit" << std::endl;
    bool result = a && b && c && d;
    std::cout << "result : " << std::boolalpha << result << std::endl;

    //OR : If one of the operands is 1, the result is 1.
    std::cout << std::endl;
    std::cout << "OR short circuit" << std::endl;
    result = p || q || r || m;
    std::cout << "result : " << std::boolalpha << result << std::endl;
    */



    if (car() && house() && job() && spouse()) {
        std::cout << "I am happy" << std::endl;
    }
    else {
        std::cout << "I am sad" << std::endl;
    }


    if (car() || house() ||job() || spouse()) {
        std::cout << "I am happy" << std::endl;
    }
    else {
        std::cout << "I am sad" << std::endl;
    }

    return 0;
}


---result---
car function running
I am sad
car function running
house function running
I am happy

---EXPLANATION---
### Definición de Funciones

```cpp
bool car() {
    std::cout << "car function running" << std::endl;
    return false;
}

bool house() {
    std::cout << "house function running" << std::endl;
    return true;
}

bool job() {
    std::cout << "job function running" << std::endl;
    return false;
}

bool spouse() {
    std::cout << "spouse function running" << std::endl;
    return false;
}
```
- Estas funciones simulan condiciones que podrían ser evaluadas en una expresión lógica. Cada función imprime un mensaje indicando que está en ejecución y devuelve un valor booleano (`true` o `false`).

### `main` Function

1. **Evaluación de `AND` y `OR` con Comentarios:**
   ```cpp
   /*
   bool a{ true };
   bool b{ true };
   bool c{ true };
   bool d{ false };

   bool p{ false };
   bool q{ false };
   bool r{ false };
   bool m{ true };

   // AND : Si uno de los operandos es 0, el resultado es 0
   std::cout << std::endl;
   std::cout << "AND short circuit" << std::endl;
   bool result = a && b && c && d;
   std::cout << "result : " << std::boolalpha << result << std::endl;

   // OR : Si uno de los operandos es 1, el resultado es 1.
   std::cout << std::endl;
   std::cout << "OR short circuit" << std::endl;
   result = p || q || r || m;
   std::cout << "result : " << std::boolalpha << result << std::endl;
   */
   ```
   - Este bloque de código comentado muestra ejemplos de evaluación lógica `AND` y `OR`.
   - Para `AND` (`&&`), si uno de los operandos es `false`, la evaluación se detiene y el resultado es `false`.
   - Para `OR` (`||`), si uno de los operandos es `true`, la evaluación se detiene y el resultado es `true`.

2. **Evaluación de `AND` con `if` (Comentado):**
   ```cpp
   /*
   if (car() && house() && job() && spouse()) {
       std::cout << "I am happy" << std::endl;
   }
   else {
       std::cout << "I am sad" << std::endl;
   }
   */
   ```
   - Este bloque de código comentado evalúa las funciones usando `AND` (`&&`).
   - Debido a que `car()` devuelve `false`, la evaluación se detendrá inmediatamente y no llamará a las demás funciones (`house()`, `job()`, `spouse()`).
   - Esto ilustra el "short-circuit evaluation" donde el resultado de la expresión puede determinarse sin evaluar todos los operandos.

3. **Evaluación de `OR` con `if`:**
   ```cpp
   if (car() || house() || job() || spouse()) {
       std::cout << "I am happy" << std::endl;
   }
   else {
       std::cout << "I am sad" << std::endl;
   }
   ```
   - En este caso, se usa `OR` (`||`).
   - Debido a que `car()` devuelve `false`, la evaluación continúa con `house()`, que devuelve `true`. La evaluación se detiene en este punto y no se llaman a las demás funciones (`job()`, `spouse()`).
   - Esto también ilustra el "short-circuit evaluation" pero con `OR`.

### Salida Esperada del Programa

La salida esperada del programa, dado que se utiliza `OR` (`||`), es:
```plaintext
car function running
house function running
I am happy
```

### Conclusión

El código demuestra cómo los operadores lógicos `AND` (`&&`) y `OR` (`||`) utilizan "short-circuit evaluation" en C++. Esto significa que la evaluación de una expresión lógica se detiene tan pronto como se determina el resultado, optimizando el rendimiento al evitar evaluaciones innecesarias. Esta característica es útil para evitar errores o efectos secundarios no deseados de funciones que no necesitan ser evaluadas.
