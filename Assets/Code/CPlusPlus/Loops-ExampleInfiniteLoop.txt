---FILES---
main.cpp
result

---main.cpp---
#include <iostream>

int main(){

	char operation; // +,-,*,/
    double operand1;
    double operand2;
    bool end {false};
    
    std::cout << "Welcome to Awesome Calculator"<< std::endl;
    
    while((end == false)){
		//Do some processing
        std::cout << "--------------------------------------------" << std::endl;
        std::cout << "What operation do you want help with? " << std::endl;
        std::cout << "+,-,* and / are supported. Please choose one and type below"<< std::endl;
        std::cout << "Your operation : ";
        std::cin >> operation;
        
        std::cout << std::endl;
        std::cout << "Please type in your two operands separated by a space and hit enter: ";
        std::cin >> operand1 >> operand2;
        std::cout <<std::endl;
        
		switch(operation){
        case '+' : 
            std::cout << operand1 << " + " << operand2 << " = " << (operand1 + operand2) << std::endl;
            break;
        case '-' : 
            std::cout << operand1 << " - " << operand2 << " = " << (operand1 - operand2) << std::endl;
            break;
        case '*' : 
            std::cout << operand1 << " * " << operand2 << " = " << (operand1 * operand2) << std::endl;
            break;
        case '/' : 
            std::cout << operand1 << " / " << operand2 << " = " << (operand1 / operand2) << std::endl;
            break;
        default :
            std::cout << operation << " operation not supported" << std::endl;
            break;
		}
	
		
        std::cout << "Continue ? ( Y | N) : ";
        
        char go_on;
        std::cin >> go_on;
        
        //end = ((go_on == 'Y') || (go_on == 'y')) ? false : true;
        
        //You could also write the previous statement using if else
        if((go_on == 'Y') || (go_on == 'y')){
            end = false;
        }else{
            end = true;
        }
    }
    
    std::cout << "Done helping out. BYE!" << std::endl;

    return 0;
}

---result---
Depende de lo que el usuario eliga. 

---EXPLANATION---
### Declaración de Variables

```cpp
char operation; // +, -, *, /
double operand1;
double operand2;
bool end {false};
```
- `operation` almacena la operación matemática elegida por el usuario.
- `operand1` y `operand2` almacenan los operandos para la operación.
- `end` es una bandera que determina cuándo debe terminar el bucle.

### Mensaje de Bienvenida

```cpp
std::cout << "Welcome to Awesome Calculator" << std::endl;
```
- Imprime un mensaje de bienvenida al usuario.

### Bucle `while`

El bucle `while` sigue ejecutándose mientras `end` es `false`.

```cpp
while((end == false)){
```

### Entrada del Usuario

1. **Elegir la Operación:**
   ```cpp
   std::cout << "--------------------------------------------" << std::endl;
   std::cout << "What operation do you want help with? " << std::endl;
   std::cout << "+,-,* and / are supported. Please choose one and type below" << std::endl;
   std::cout << "Your operation : ";
   std::cin >> operation;
   ```

2. **Ingresar los Operandos:**
   ```cpp
   std::cout << std::endl;
   std::cout << "Please type in your two operands separated by a space and hit enter: ";
   std::cin >> operand1 >> operand2;
   std::cout << std::endl;
   ```

### Procesar la Operación

Se utiliza una estructura `switch` para realizar la operación elegida.

```cpp
switch(operation){
    case '+' : 
        std::cout << operand1 << " + " << operand2 << " = " << (operand1 + operand2) << std::endl;
        break;
    case '-' : 
        std::cout << operand1 << " - " << operand2 << " = " << (operand1 - operand2) << std::endl;
        break;
    case '*' : 
        std::cout << operand1 << " * " << operand2 << " = " << (operand1 * operand2) << std::endl;
        break;
    case '/' : 
        std::cout << operand1 << " / " << operand2 << " = " << (operand1 / operand2) << std::endl;
        break;
    default :
        std::cout << operation << " operation not supported" << std::endl;
        break;
}
```
- Cada `case` maneja una operación matemática específica.
- `default` maneja operaciones no soportadas.

### Continuar o Terminar

```cpp
std::cout << "Continue ? ( Y | N) : ";
char go_on;
std::cin >> go_on;

if((go_on == 'Y') || (go_on == 'y')){
    end = false;
}else{
    end = true;
}
```
- Se le pregunta al usuario si quiere continuar (`Y` o `y`) o terminar cualquier otra respuesta).

### Mensaje de Despedida

```cpp
std::cout << "Done helping out. BYE!" << std::endl;
```
- Imprime un mensaje de despedida cuando el usuario decide terminar.

### Código Completo

Aquí tienes el código completo para referencia:

```cpp
#include <iostream>

int main(){

    char operation; // +,-,*,/
    double operand1;
    double operand2;
    bool end {false};
    
    std::cout << "Welcome to Awesome Calculator"<< std::endl;
    
    while((end == false)){
        //Do some processing
        std::cout << "--------------------------------------------" << std::endl;
        std::cout << "What operation do you want help with? " << std::endl;
        std::cout << "+,-,* and / are supported. Please choose one and type below"<< std::endl;
        std::cout << "Your operation : ";
        std::cin >> operation;
        
        std::cout << std::endl;
        std::cout << "Please type in your two operands separated by a space and hit enter: ";
        std::cin >> operand1 >> operand2;
        std::cout <<std::endl;
        
        switch(operation){
        case '+' : 
            std::cout << operand1 << " + " << operand2 << " = " << (operand1 + operand2) << std::endl;
            break;
        case '-' : 
            std::cout << operand1 << " - " << operand2 << " = " << (operand1 - operand2) << std::endl;
            break;
        case '*' : 
            std::cout << operand1 << " * " << operand2 << " = " << (operand1 * operand2) << std::endl;
            break;
        case '/' : 
            std::cout << operand1 << " / " << operand2 << " = " << (operand1 / operand2) << std::endl;
            break;
        default :
            std::cout << operation << " operation not supported" << std::endl;
            break;
        }
        
        std::cout << "Continue ? ( Y | N) : ";
        
        char go_on;
        std::cin >> go_on;
        
        if((go_on == 'Y') || (go_on == 'y')){
            end = false;
        }else{
            end = true;
        }
    }
    
    std::cout << "Done helping out. BYE!" << std::endl;

    return 0;
}
```

### Conclusión

Este programa de calculadora demuestra cómo usar estructuras de control como bucles `while`, estructuras `switch` y cómo manejar la entrada del usuario para realizar operaciones básicas. El programa es interactivo y sigue ejecutándose hasta que el usuario decide terminar.
