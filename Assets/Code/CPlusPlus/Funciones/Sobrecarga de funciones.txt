<---EXPLANATION--->
### Sobrecarga de Funciones en C++

La sobrecarga de funciones es una característica de C++ que permite definir múltiples funciones con el mismo nombre pero con diferentes listas de parámetros. La función específica que se llama se determina en tiempo de compilación según los argumentos pasados a la función. Esto permite crear funciones que pueden manejar diferentes tipos de datos o diferentes cantidades de datos de una manera limpia y coherente.

#### Conceptos Clave en Sobrecarga de Funciones

1. **Nombre de Función Común:** Todas las funciones sobrecargadas deben compartir el mismo nombre.
2. **Listas de Parámetros Diferentes:** Las funciones deben diferir en el tipo y/o el número de parámetros.
3. **Resolución en Tiempo de Compilación:** El compilador selecciona la función adecuada basándose en los argumentos proporcionados durante la llamada a la función.

##### Reglas para la Sobrecarga de Funciones

- Las funciones sobrecargadas deben tener diferentes listas de parámetros. Esto significa que deben diferir en el número de parámetros, en el tipo de parámetros, o en el orden de los tipos de parámetros.
- No se puede sobrecargar una función solo cambiando el tipo de retorno.
- Los nombres de las funciones deben ser idénticos.

#### Ejemplo de Sobrecarga de Funciones

```cpp
#include <iostream>
using namespace std;

// Sobrecarga de la función sumar
int sumar(int a, int b) {
    return a + b;
}

double sumar(double a, double b) {
    return a + b;
}

string sumar(string a, string b) {
    return a + b;
}

int main() {
    // Llamadas a funciones sobrecargadas
    cout << "Suma de enteros: " << sumar(3, 4) << endl;       // Llama a sumar(int, int)
    cout << "Suma de dobles: " << sumar(3.5, 2.5) << endl;    // Llama a sumar(double, double)
    cout << "Suma de strings: " << sumar("Hola, ", "Mundo!") << endl;  // Llama a sumar(string, string)
    return 0;
}
```

En este ejemplo, la función `sumar` está sobrecargada para manejar enteros, dobles y cadenas de texto.

#### Sobrecarga con Diferente Número de Parámetros

Las funciones también pueden ser sobrecargadas cambiando el número de parámetros.

##### Ejemplo de Sobrecarga con Diferente Número de Parámetros

```cpp
#include <iostream>
using namespace std;

// Sobrecarga de la función imprimir
void imprimir(int a) {
    cout << "Valor entero: " << a << endl;
}

void imprimir(int a, int b) {
    cout << "Valores enteros: " << a << " y " << b << endl;
}

void imprimir(int a, int b, int c) {
    cout << "Valores enteros: " << a << ", " << b << " y " << c << endl;
}

int main() {
    // Llamadas a funciones sobrecargadas
    imprimir(5);          // Llama a imprimir(int)
    imprimir(5, 10);      // Llama a imprimir(int, int)
    imprimir(5, 10, 15);  // Llama a imprimir(int, int, int)
    return 0;
}
```

En este ejemplo, la función `imprimir` está sobrecargada para manejar diferentes cantidades de parámetros.

#### Sobrecarga y Constantes

Las constantes pueden afectar la sobrecarga de funciones, permitiendo definir diferentes versiones de la función para argumentos constantes y no constantes.

##### Ejemplo de Sobrecarga con Constantes

```cpp
#include <iostream>
using namespace std;

// Sobrecarga de la función mostrar
void mostrar(int& a) {
    cout << "Llamada no constante: " << a << endl;
}

void mostrar(const int& a) {
    cout << "Llamada constante: " << a << endl;
}

int main() {
    int x = 10;
    const int y = 20;

    mostrar(x);  // Llama a mostrar(int&)
    mostrar(y);  // Llama a mostrar(const int&)
    return 0;
}
```

En este ejemplo, la función `mostrar` está sobrecargada para manejar tanto referencias constantes como no constantes.

### Beneficios de la Sobrecarga de Funciones

- **Claridad y Simplicidad:** Permite usar el mismo nombre de función para operaciones similares en diferentes tipos de datos.
- **Flexibilidad:** Facilita la implementación de funciones que pueden manejar múltiples tipos de datos y diferentes cantidades de parámetros.
- **Mantenimiento:** Facilita el mantenimiento del código, ya que se puede agregar o modificar una sobrecarga sin afectar a otras.

### Ejemplo Completo

A continuación, un ejemplo más completo que muestra diversas formas de sobrecargar funciones:

```cpp
#include <iostream>
#include <string>
using namespace std;

// Sobrecarga de la función procesar
void procesar(int a) {
    cout << "Procesando entero: " << a << endl;
}

void procesar(double a) {
    cout << "Procesando doble: " << a << endl;
}

void procesar(string a) {
    cout << "Procesando string: " << a << endl;
}

void procesar(int a, double b) {
    cout << "Procesando entero y doble: " << a << " y " << b << endl;
}

void procesar(double a, int b) {
    cout << "Procesando doble y entero: " << a << " y " << b << endl;
}

int main() {
    // Llamadas a funciones sobrecargadas
    procesar(5);           // Llama a procesar(int)
    procesar(3.14);        // Llama a procesar(double)
    procesar("Hola");      // Llama a procesar(string)
    procesar(5, 3.14);     // Llama a procesar(int, double)
    procesar(3.14, 5);     // Llama a procesar(double, int)
    return 0;
}
```

En este ejemplo, la función `procesar` está sobrecargada para manejar diferentes tipos y combinaciones de parámetros.

### Conclusión

La sobrecarga de funciones es una característica poderosa de C++ que permite definir múltiples funciones con el mismo nombre pero con diferentes listas de parámetros. Esto mejora la claridad, flexibilidad y mantenibilidad del código. Comprender cómo y cuándo usar la sobrecarga de funciones es esencial para escribir código C++ limpio y eficiente, permitiendo a los desarrolladores crear interfaces más intuitivas y versátiles para sus programas.
<---FILES--->
Reglas para la Sobrecarga de Funciones
Reglas para la Sobrecarga de Funciones Result
Ejemplo de Sobrecarga con Diferente Número de Parámetros
Ejemplo de Sobrecarga con Diferente Número de Parámetros Result
Ejemplo de Sobrecarga con Constantes
Ejemplo de Sobrecarga con Constantes Result
<---Reglas para la Sobrecarga de Funciones--->
```cpp
#include <iostream>
using namespace std;

// Sobrecarga de la función sumar
int sumar(int a, int b) {
    return a + b;
}

double sumar(double a, double b) {
    return a + b;
}

string sumar(string a, string b) {
    return a + b;
}

int main() {
    // Llamadas a funciones sobrecargadas
    cout << "Suma de enteros: " << sumar(3, 4) << endl;       // Llama a sumar(int, int)
    cout << "Suma de dobles: " << sumar(3.5, 2.5) << endl;    // Llama a sumar(double, double)
    cout << "Suma de strings: " << sumar("Hola, ", "Mundo!") << endl;  // Llama a sumar(string, string)
    return 0;
}
<---Reglas para la Sobrecarga de Funciones Result--->
<---Ejemplo de Sobrecarga con Diferente Número de Parámetros--->
```cpp
#include <iostream>
using namespace std;

// Sobrecarga de la función imprimir
void imprimir(int a) {
    cout << "Valor entero: " << a << endl;
}

void imprimir(int a, int b) {
    cout << "Valores enteros: " << a << " y " << b << endl;
}

void imprimir(int a, int b, int c) {
    cout << "Valores enteros: " << a << ", " << b << " y " << c << endl;
}

int main() {
    // Llamadas a funciones sobrecargadas
    imprimir(5);          // Llama a imprimir(int)
    imprimir(5, 10);      // Llama a imprimir(int, int)
    imprimir(5, 10, 15);  // Llama a imprimir(int, int, int)
    return 0;
}
<---Ejemplo de Sobrecarga con Diferente Número de Parámetros Result--->
<---Ejemplo de Sobrecarga con Constantes--->
```cpp
#include <iostream>
using namespace std;

// Sobrecarga de la función mostrar
void mostrar(int& a) {
    cout << "Llamada no constante: " << a << endl;
}

void mostrar(const int& a) {
    cout << "Llamada constante: " << a << endl;
}

int main() {
    int x = 10;
    const int y = 20;

    mostrar(x);  // Llama a mostrar(int&)
    mostrar(y);  // Llama a mostrar(const int&)
    return 0;
}
```cpp
#include <iostream>
#include <string>
using namespace std;

// Sobrecarga de la función procesar
void procesar(int a) {
    cout << "Procesando entero: " << a << endl;
}

void procesar(double a) {
    cout << "Procesando doble: " << a << endl;
}

void procesar(string a) {
    cout << "Procesando string: " << a << endl;
}

void procesar(int a, double b) {
    cout << "Procesando entero y doble: " << a << " y " << b << endl;
}

void procesar(double a, int b) {
    cout << "Procesando doble y entero: " << a << " y " << b << endl;
}

int main() {
    // Llamadas a funciones sobrecargadas
    procesar(5);           // Llama a procesar(int)
    procesar(3.14);        // Llama a procesar(double)
    procesar("Hola");      // Llama a procesar(string)
    procesar(5, 3.14);     // Llama a procesar(int, double)
    procesar(3.14, 5);     // Llama a procesar(double, int)
    return 0;
}
<---Ejemplo de Sobrecarga con Constantes Result--->
