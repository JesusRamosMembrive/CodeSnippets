---FILES---
main.cpp
result

---main.cpp---
#include <iostream>

int main(){

    bool a {true};
    bool b {false};
    bool c {true};
	
    std::cout << std::boolalpha; // true / false
    std::cout << "a : " << a << std::endl;
    std::cout << "b : " << b << std::endl;
    std::cout << "c : " << c << std::endl;
	
	//AND : Evaluates to true when all operands are true.
	//      A single false operand will drag 
    //      the entire expression to evaluating false.
	
	std::cout << std::endl;
	std::cout << "Basic AND operations" << std::endl;

    std::cout << " a && b : " << (a && b) << std::endl; // false
    std::cout << " a && c : " << (a && c ) << std::endl; // true
    std::cout << " a && b && c :" << (a && b && c) << std::endl; // false


	//OR : Evaluates to true when at least one operand true.
	//      A single true operand will push 
    //      the entire expression to evaluating true.
	std::cout << std::endl;
	std::cout << "Basic OR operations" << std::endl;
    std::cout << " a || b : " << (a || b) << std::endl;
    std::cout << " a || c : " << (a || c ) << std::endl;
    std::cout << " a ||b || c :" << (a || b || c) << std::endl;


	//NOT : Negates whateve operand you put it with
	std::cout << std::endl;
	std::cout << "Basic NOT operations" << std::endl;	
	
	std::cout << "!a : " << !a << std::endl;
	std::cout << "!b : " << !b << std::endl;
	std::cout << "!c : " << !c << std::endl;

	//Combinations of all these operators
	std::cout << std::endl;
	std::cout << "Combining logical operators" << std::endl;
	// !(a &&b) || c
	std::cout << "!(a &&b) || c : " << (!(a &&b) || c) << std::endl; // true

    //Combining logical operators with relational operators
	int d{45};
	int e{20};
	int f{11};
	
	std::cout << std::endl;
	std::cout << "Relational and logic operations on integers" << std::endl;
	std::cout << "d : " << d << std::endl;
	std::cout << "e : " << e << std::endl;
	std::cout << "f : " << f << std::endl;
	
	std::cout << std::endl;
	
	std::cout << "(d > e) && (d > f) : " << ((d > e) && (d > f)) << std::endl; // true
	std::cout << "(d==e) || (e <= f ) : " << ((d==e) || (e <= f ) ) << std::endl;
	std::cout << "(d < e) || (d > f) : " << ((d < e) || (d > f)) << std::endl;
	std::cout << "(f > e) || (d < f) : " << ((f > e) || (d < f)) << std::endl;
	std::cout << "(d > f) && (f <= d) : " << ((d > f) && (f <= d)) << std::endl;
	std::cout << "(d > e) && (d <= f) : " << ((d > e) && (d <= f)) << std::endl;
	std::cout << "(! a) && (d == e) : " << ((! a) && (d == e)) << std::endl;
	std::cout << "(! a) && (d == e) : " << ((! a) && (d == e)) << std::endl;
   
    return 0;
}

---result---
a : true
b : false
c : true

Basic AND operations
 a && b : false
 a && c : true
 a && b && c :false

Basic OR operations
 a || b : true
 a || c : true
 a ||b || c :true

Basic NOT operations
!a : false
!b : true
!c : false

Combining logical operators    
!(a &&b) || c : true

Relational and logic operations on integers
d : 45
e : 20
f : 11

(d > e) && (d > f) : true      
(d==e) || (e <= f ) : false    
(d < e) || (d > f) : true      
(f > e) || (d < f) : false     
(d > f) && (f <= d) : true     
(d > e) && (d <= f) : false    
(! a) && (d == e) : false      
(! a) && (d == e) : false   


---EXPLANATION---

```cpp
#include <iostream>
```
- Esta línea incluye la biblioteca estándar de entrada/salida de C++ que permite el uso de `std::cout` para imprimir en la consola.

```cpp
int main(){
```
- Esta línea define la función principal `main` desde donde se inicia la ejecución del programa.

```cpp
    bool a {true};
    bool b {false};
    bool c {true};
```
- Estas líneas declaran e inicializan tres variables booleanas: `a` con `true`, `b` con `false`, y `c` con `true`.

```cpp
    std::cout << std::boolalpha; // true / false
    std::cout << "a : " << a << std::endl;
    std::cout << "b : " << b << std::endl;
    std::cout << "c : " << c << std::endl;
```
- Estas líneas configuran `std::cout` para imprimir valores booleanos como `true` o `false` en lugar de `1` o `0`. Luego imprimen los valores de `a`, `b`, y `c` en la consola.

```cpp
    std::cout << std::endl;
    std::cout << "Basic AND operations" << std::endl;
```
- Estas líneas imprimen una línea en blanco y un mensaje indicando que se van a realizar operaciones básicas de AND.

```cpp
    std::cout << " a && b : " << (a && b) << std::endl; // false
    std::cout << " a && c : " << (a && c ) << std::endl; // true
    std::cout << " a && b && c :" << (a && b && c) << std::endl; // false
```
- Estas líneas realizan operaciones AND entre las variables booleanas. La operación AND (`&&`) evalúa a `true` solo si todos los operandos son `true`. Se imprimen los resultados de las operaciones `a && b`, `a && c`, y `a && b && c`.

```cpp
    std::cout << std::endl;
    std::cout << "Basic OR operations" << std::endl;
```
- Estas líneas imprimen una línea en blanco y un mensaje indicando que se van a realizar operaciones básicas de OR.

```cpp
    std::cout << " a || b : " << (a || b) << std::endl;
    std::cout << " a || c : " << (a || c ) << std::endl;
    std::cout << " a || b || c :" << (a || b || c) << std::endl;
```
- Estas líneas realizan operaciones OR entre las variables booleanas. La operación OR (`||`) evalúa a `true` si al menos uno de los operandos es `true`. Se imprimen los resultados de las operaciones `a || b`, `a || c`, y `a || b || c`.

```cpp
    std::cout << std::endl;
    std::cout << "Basic NOT operations" << std::endl;
```
- Estas líneas imprimen una línea en blanco y un mensaje indicando que se van a realizar operaciones básicas de NOT.

```cpp
    std::cout << "!a : " << !a << std::endl;
    std::cout << "!b : " << !b << std::endl;
    std::cout << "!c : " << !c << std::endl;
```
- Estas líneas realizan operaciones NOT en las variables booleanas. La operación NOT (`!`) niega el valor del operando, convirtiendo `true` en `false` y viceversa. Se imprimen los resultados de las operaciones `!a`, `!b`, y `!c`.

```cpp
    std::cout << std::endl;
    std::cout << "Combining logical operators" << std::endl;
    std::cout << "!(a && b) || c : " << (!(a && b) || c) << std::endl; // true
```
- Estas líneas imprimen una línea en blanco y un mensaje indicando que se van a combinar operadores lógicos. Luego, realizan una combinación de operadores lógicos `!(a && b) || c` y se imprime el resultado.

```cpp
    int d {45};
    int e {20};
    int f {11};
```
- Estas líneas declaran e inicializan tres variables enteras: `d` con `45`, `e` con `20`, y `f` con `11`.

```cpp
    std::cout << std::endl;
    std::cout << "Relational and logic operations on integers" << std::endl;
    std::cout << "d : " << d << std::endl;
    std::cout << "e : " << e << std::endl;
    std::cout << "f : " << f << std::endl;
```
- Estas líneas imprimen una línea en blanco y un mensaje indicando que se van a realizar operaciones relacionales y lógicas con enteros. Luego, se imprimen los valores de `d`, `e`, y `f`.

```cpp
    std::cout << std::endl;
    std::cout << "(d > e) && (d > f) : " << ((d > e) && (d > f)) << std::endl; // true
    std::cout << "(d==e) || (e <= f ) : " << ((d==e) || (e <= f )) << std::endl;
    std::cout << "(d < e) || (d > f) : " << ((d < e) || (d > f)) << std::endl;
    std::cout << "(f > e) || (d < f) : " << ((f > e) || (d < f)) << std::endl;
    std::cout << "(d > f) && (f <= d) : " << ((d > f) && (f <= d)) << std::endl;
    std::cout << "(d > e) && (d <= f) : " << ((d > e) && (d <= f)) << std::endl;
    std::cout << "(! a) && (d == e) : " << ((! a) && (d == e)) << std::endl;
    std::cout << "(! a) && (d == e) : " << ((! a) && (d == e)) << std::endl;
```
- Estas líneas realizan combinaciones de operaciones relacionales y lógicas con las variables enteras. Se utilizan operadores relacionales (`>`, `==`, `<=`, `<`) y lógicos (`&&`, `||`, `!`). Se imprimen los resultados de cada operación combinada.

```cpp
    return 0;
}
```
- Esta línea finaliza la función `main` y devuelve `0`, indicando que el programa ha terminado con éxito.

Este programa demuestra cómo realizar y combinar operaciones lógicas y relacionales con variables booleanas y enteras, mostrando los resultados de estas operaciones en la consola.