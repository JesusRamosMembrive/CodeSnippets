---FILES---
main.cpp
result

---main.cpp---
#include <iostream>

const int Pen{ 10 };
const int Marker{ 20 };
const int Eraser{ 30 };
const int Rectangle{ 40 };
const int Circle{ 50 };
const int Ellipse{ 60 };

int main(){
    
    // Generate a switch case example
    int choice{};
    std::cout << "Enter a choice: ";
    std::cin >> choice;
    
    switch(choice){
    case Pen:
        std::cout << "You chose Pen\n";
        break;
    case Marker:
        std::cout << "You chose Marker\n";
        break;
    case Eraser:
        std::cout << "You chose Eraser\n";
        break;
    case Rectangle:
        std::cout << "You chose Rectangle\n";
        break;
    case Circle:
        std::cout << "You chose Circle\n";
        break;
    case Ellipse:
        std::cout << "You chose Ellipse\n";
        break;
    default:
        std::cout << "Invalid choice\n";
    }
    

    //With initializer inside of the switch
    int tool {Ellipse};
    
    switch (double strength{3.56}; tool)
    {
    case Pen : {
        std::cout << "Active tool is Pen. strength : " <<  strength << std::endl;
    }
    break;
        
    case Marker : {
        std::cout << "Active tool is Marker. strength : " <<  strength << std::endl;
    }
    break;
        
    case Eraser :
        break;
        
    case Rectangle :
        break;
        
    case Circle : {
        std::cout << "Drawing Shapes. strength : " <<  strength << std::endl;
    }
    break;
        
    case Ellipse : {
        std::cout << "Active tool is Ellipse. strength : " <<  strength << std::endl;
    }
    break;
        
    default: {
        std::cout << "No match found. strength : " <<  strength << std::endl;
    }
    break;
    }
    
}



---result---
Depending the number enter by user. 0 is Pen, 1 is Marker, and go on...

In the second case:
Active tool is Ellipse. strength : 3.56


---EXPLANATION---
### Declaración de Constantes

```cpp
const int Pen{ 10 };
const int Marker{ 20 };
const int Eraser{ 30 };
const int Rectangle{ 40 };
const int Circle{ 50 };
const int Ellipse{ 60 };
```
- Estas constantes representan diferentes opciones con valores únicos. Se utilizan más adelante en el código para comparar con la entrada del usuario.

### Estructura `switch`

1. **Declaración de la variable de elección:**
   ```cpp
   int choice{};
   std::cout << "Enter a choice: ";
   std::cin >> choice;
   ```
   - `choice` es una variable de tipo `int` que almacena la opción ingresada por el usuario.
   - `std::cin` se usa para leer la entrada del usuario desde la consola.

2. **Uso de `switch` para evaluar la elección:**
   ```cpp
   switch(choice){
       case Pen:
           std::cout << "You chose Pen\n";
           break;
       case Marker:
           std::cout << "You chose Marker\n";
           break;
       case Eraser:
           std::cout << "You chose Eraser\n";
           break;
       case Rectangle:
           std::cout << "You chose Rectangle\n";
           break;
       case Circle:
           std::cout << "You chose Circle\n";
           break;
       case Ellipse:
           std::cout << "You chose Ellipse\n";
           break;
       default:
           std::cout << "Invalid choice\n";
   }
   ```
   - La estructura `switch` evalúa el valor de `choice` y compara con cada `case` definido.
   - Cada `case` representa una opción válida. Si el valor de `choice` coincide con alguna de estas opciones, se ejecuta el bloque de código correspondiente.
   - La instrucción `break` es crucial para evitar la ejecución "caída" (fall-through) de los casos subsecuentes. Si se omite `break`, el programa continuará ejecutando los casos siguientes hasta encontrar un `break` o llegar al final del `switch`.
   - `default` se ejecuta si ninguna de las opciones anteriores coincide, proporcionando un mensaje para una opción inválida.

### Ejemplo de Salida

Dependiendo de la entrada del usuario, la salida del programa variará. Por ejemplo:
- Si el usuario ingresa `10`, la salida será:
  ```plaintext
  Enter a choice: 10
  You chose Pen
  ```
- Si el usuario ingresa `25`, la salida será:
  ```plaintext
  Enter a choice: 25
  Invalid choice
  ```

### Conclusión

El uso de `switch` en C++ es una forma eficiente y clara de manejar múltiples condiciones basadas en el valor de una sola variable. Es especialmente útil cuando se tienen múltiples opciones discretas, como en este caso con diferentes herramientas representadas por constantes. La estructura `switch` mejora la legibilidad del código y facilita la gestión de múltiples condiciones comparado con el uso de múltiples `if-else if` secuenciales.
