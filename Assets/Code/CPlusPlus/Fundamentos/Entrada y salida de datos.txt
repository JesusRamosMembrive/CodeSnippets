<---FILES--->
main.cpp
result

<---main.cpp--->
#include <vector>
#include <iostream>
#include <memory>
using namespace std;

int main() {

    cout << "Hola, mundo!" << endl;
    
    int edad = 25;
    float altura = 1.75;
    char inicial = 'A';
    bool esEstudiante = true;

    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << endl;
    cout << "Inicial: " << inicial << endl;
    cout << "Es estudiante: " << (esEstudiante ? "Sí" : "No") << endl;

    int numero;
    cout << "Introduce un número: ";
    cin >> numero;
    cout << "El número que introdujiste es: " << numero << endl;

    cout << "Introduce tu edad: ";
    cin >> edad;
    cout << "Introduce tu altura: ";
    cin >> altura;
    cout << "Introduce la inicial de tu nombre: ";
    cin >> inicial;
    cout << "¿Eres estudiante? (1 para sí, 0 para no): ";
    cin >> esEstudiante;

    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << endl;
    cout << "Inicial: " << inicial << endl;
    cout << "Es estudiante: " << (esEstudiante ? "Sí" : "No") << endl;

    int a, b;
    cout << "Introduce dos números separados por un espacio: ";
    cin >> a >> b;
    cout << "Los números que introdujiste son: " << a << " y " << b << endl;

    int resultado = 42;
    cout << "El resultado es " << resultado << ".\n" << "Fin del programa." << endl;

    int numero2;
    cout << "Introduce un número: ";
    if (!(cin >> numero2)) {
        cerr << "Error: Entrada no válida." << endl;
        return 1;
    }
    cout << "El número que introdujiste es: " << numero2 << endl;

    clog << "Este es un mensaje de registro." << endl;
    cerr << "Este es un mensaje de error." << endl;

    return 0;
}

<---result--->
Hola, mundo!
Edad: 25
Altura: 1.75
Inicial: A
Es estudiante: Sí
Introduce un número: 5
El número que introdujiste es: 5
Introduce tu edad: 25
Introduce tu altura: 21
Introduce la inicial de tu nombre: a   
¿Eres estudiante? (1 para sí, 0 para no): 1
Edad: 25
Altura: 21
Inicial: a
Es estudiante: Sí
Introduce dos números separados por un espacio: 1 2
Los números que introdujiste son: 1 y 2
El resultado es 42.
Fin del programa.
Introduce un número: 23
El número que introdujiste es: 23
Este es un mensaje de registro.
Este es un mensaje de error.

<---EXPLANATION--->
### Entrada y Salida de Datos en C++

La entrada y salida de datos (E/S) en C++ se maneja principalmente a través de la biblioteca de E/S estándar, que incluye `cin`, `cout`, y `cerr` para la entrada y salida en la consola. A continuación, se explica cómo utilizar estos componentes.

#### 1. **Salida de Datos con `cout`**

`cout` (Console Output) se utiliza para enviar datos a la consola. Pertenece al espacio de nombres `std`, por lo que se puede acceder a él como `std::cout` o mediante `using namespace std;`.

##### Sintaxis Básica

```cpp
#include <iostream>
using namespace std;

int main() {
    cout << "Hola, mundo!" << endl;
    return 0;
}
```

- `<<` es el operador de inserción utilizado para enviar datos al flujo de salida.
- `endl` inserta un carácter de nueva línea y vacía el búfer de salida.

##### Ejemplo con Varios Tipos de Datos

```cpp
#include <iostream>
using namespace std;

int main() {
    int edad = 25;
    float altura = 1.75;
    char inicial = 'A';
    bool esEstudiante = true;

    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << endl;
    cout << "Inicial: " << inicial << endl;
    cout << "Es estudiante: " << (esEstudiante ? "Sí" : "No") << endl;

    return 0;
}
```

#### 2. **Entrada de Datos con `cin`**

`cin` (Console Input) se utiliza para leer datos de la consola. También pertenece al espacio de nombres `std`.

##### Sintaxis Básica

```cpp
#include <iostream>
using namespace std;

int main() {
    int numero;
    cout << "Introduce un número: ";
    cin >> numero;
    cout << "El número que introdujiste es: " << numero << endl;
    return 0;
}
```

- `>>` es el operador de extracción utilizado para leer datos del flujo de entrada.

##### Ejemplo con Varios Tipos de Datos

```cpp
#include <iostream>
using namespace std;

int main() {
    int edad;
    float altura;
    char inicial;
    bool esEstudiante;

    cout << "Introduce tu edad: ";
    cin >> edad;
    cout << "Introduce tu altura: ";
    cin >> altura;
    cout << "Introduce la inicial de tu nombre: ";
    cin >> inicial;
    cout << "¿Eres estudiante? (1 para sí, 0 para no): ";
    cin >> esEstudiante;

    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << endl;
    cout << "Inicial: " << inicial << endl;
    cout << "Es estudiante: " << (esEstudiante ? "Sí" : "No") << endl;

    return 0;
}
```

#### 3. **Salida de Datos con `cerr` y `clog`**

- **`cerr`**: Se utiliza para mostrar mensajes de error. No está almacenado en búfer, lo que significa que los mensajes se muestran inmediatamente.

```cpp
#include <iostream>
using namespace std;

int main() {
    cerr << "Este es un mensaje de error." << endl;
    return 0;
}
```

- **`clog`**: Similar a `cerr`, pero está almacenado en búfer. Esto significa que el mensaje se almacena en un búfer antes de mostrarse.

```cpp
#include <iostream>
using namespace std;

int main() {
    clog << "Este es un mensaje de registro." << endl;
    return 0;
}
```

### Manejo de Múltiples Entradas y Salidas

Para manejar múltiples entradas y salidas de una manera más compleja, es posible encadenar los operadores de inserción y extracción.

##### Ejemplo de Múltiples Entradas

```cpp
#include <iostream>
using namespace std;

int main() {
    int a, b;
    cout << "Introduce dos números separados por un espacio: ";
    cin >> a >> b;
    cout << "Los números que introdujiste son: " << a << " y " << b << endl;
    return 0;
}
```

##### Ejemplo de Múltiples Salidas

```cpp
#include <iostream>
using namespace std;

int main() {
    int resultado = 42;
    cout << "El resultado es " << resultado << ".\n" << "Fin del programa." << endl;
    return 0;
}
```

### Buenas Prácticas

- **Validación de Entrada**: Siempre valida la entrada del usuario para manejar datos no esperados y evitar errores en el programa.

```cpp
#include <iostream>
using namespace std;

int main() {
    int numero;
    cout << "Introduce un número: ";
    if (!(cin >> numero)) {
        cerr << "Error: Entrada no válida." << endl;
        return 1;
    }
    cout << "El número que introdujiste es: " << numero << endl;
    return 0;
}
```

- **Comentarios y Mensajes Claros**: Usa mensajes claros y comentados para guiar al usuario durante la entrada de datos y para mejorar la legibilidad del código.

La correcta utilización de los mecanismos de entrada y salida de datos es crucial para interactuar con los usuarios y para el funcionamiento adecuado de un programa. Los ejemplos proporcionados cubren las situaciones más comunes y deben servir como una base sólida para construir aplicaciones más complejas en C++.