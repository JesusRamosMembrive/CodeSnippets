<---FILES--->
main.cpp
result

<---main.cpp--->
#include <iostream>
using namespace std;

int main() {
    int entero = 100;                   // Entero
    char caracter = 'C';                // Carácter
    bool esCierto = true;               // Booleano
    float flotante = 3.14f;             // Flotante
    double doble = 2.718281828459;      // Doble precisión
    short corto = 32767;                // Entero corto
    long largo = 2147483647;            // Entero largo
    long long muyLargo = 9223372036854775807LL; // Entero muy largo
    unsigned int sinSigno = 4294967295; // Entero sin signo

    // Salida de los valores
    cout << "Entero: " << entero << endl;
    cout << "Carácter: " << caracter << endl;
    cout << "Booleano: " << esCierto << endl;
    cout << "Flotante: " << flotante << endl;
    cout << "Doble: " << doble << endl;
    cout << "Corto: " << corto << endl;
    cout << "Largo: " << largo << endl;
    cout << "Muy Largo: " << muyLargo << endl;
    cout << "Sin Signo: " << sinSigno << endl;

    return 0;
}

<---result--->
Entero: 100
Carácter: C
Booleano: 1
Flotante: 3.14
Doble: 2.71828
Corto: 32767
Largo: 2147483647
Muy Largo: 9223372036854775807
Sin Signo: 4294967295

<---EXPLANATION--->
### Tipos de Datos Básicos (Datos Primitivos) en C++

Los tipos de datos básicos, también conocidos como datos primitivos, son los bloques fundamentales que se utilizan para almacenar datos en un programa. C++ proporciona varios tipos de datos básicos para manejar diferentes tipos de información.

#### 1. **Enteros (`int`)**
El tipo de dato `int` se utiliza para almacenar números enteros. Su tamaño suele ser de 4 bytes, lo que permite almacenar valores en el rango de aproximadamente -2,147,483,648 a 2,147,483,647.

```cpp
int numero = 42;
```

#### 2. **Caracteres (`char`)**
El tipo `char` se utiliza para almacenar un solo carácter. Su tamaño es de 1 byte, permitiendo representar caracteres individuales como letras, números y símbolos.

```cpp
char letra = 'A';
```

#### 3. **Booleanos (`bool`)**
El tipo `bool` almacena valores booleanos, que pueden ser `true` o `false`. Se utiliza para representar condiciones y resultados lógicos.

```cpp
bool esVerdadero = true;
```

#### 4. **Flotantes (`float` y `double`)**
Los tipos `float` y `double` se utilizan para almacenar números en punto flotante (números con decimales). `float` ocupa 4 bytes y `double` ocupa 8 bytes, ofreciendo mayor precisión.

```cpp
float numeroDecimal = 3.14f;
double numeroGrande = 2.718281828459;
```

#### 5. **Enteros Modificados (`short`, `long`, `long long`)**
C++ permite modificar los enteros para manejar diferentes rangos y tamaños. `short` es un entero corto, `long` es un entero largo, y `long long` es un entero aún más largo.

```cpp
short corto = 32767;         // Generalmente 2 bytes
long largo = 2147483647;     // Generalmente 4 bytes
long long muyLargo = 9223372036854775807LL; // Generalmente 8 bytes
```

#### 6. **Tipos Sin Signo (`unsigned`)**
Los tipos sin signo (`unsigned`) se utilizan para almacenar solo números positivos, duplicando el rango positivo de los tipos de datos enteros.

```cpp
unsigned int positivo = 42;
unsigned char caracter = 255;
```

### Ejemplos y Uso de Tipos de Datos Básicos

A continuación se presenta un ejemplo completo que demuestra el uso de los tipos de datos básicos en un programa C++:

```cpp
#include <iostream>
using namespace std;

int main() {
    int entero = 100;                   // Entero
    char caracter = 'C';                // Carácter
    bool esCierto = true;               // Booleano
    float flotante = 3.14f;             // Flotante
    double doble = 2.718281828459;      // Doble precisión
    short corto = 32767;                // Entero corto
    long largo = 2147483647;            // Entero largo
    long long muyLargo = 9223372036854775807LL; // Entero muy largo
    unsigned int sinSigno = 4294967295; // Entero sin signo

    // Salida de los valores
    cout << "Entero: " << entero << endl;
    cout << "Carácter: " << caracter << endl;
    cout << "Booleano: " << esCierto << endl;
    cout << "Flotante: " << flotante << endl;
    cout << "Doble: " << doble << endl;
    cout << "Corto: " << corto << endl;
    cout << "Largo: " << largo << endl;
    cout << "Muy Largo: " << muyLargo << endl;
    cout << "Sin Signo: " << sinSigno << endl;

    return 0;
}
```

### Explicación del Ejemplo

1. **Entero (`int`):** Se declara y se inicializa con un valor entero.
2. **Carácter (`char`):** Se declara y se inicializa con un carácter.
3. **Booleano (`bool`):** Se declara y se inicializa con un valor booleano.
4. **Flotante (`float`):** Se declara y se inicializa con un número decimal.
5. **Doble (`double`):** Se declara y se inicializa con un número decimal de doble precisión.
6. **Corto (`short`):** Se declara y se inicializa con un valor entero corto.
7. **Largo (`long`):** Se declara y se inicializa con un valor entero largo.
8. **Muy Largo (`long long`):** Se declara y se inicializa con un valor entero muy largo.
9. **Sin Signo (`unsigned`):** Se declara y se inicializa con un valor entero sin signo.

Este ejemplo muestra cómo declarar, inicializar y utilizar diferentes tipos de datos básicos en C++. Cada tipo de dato se adapta a necesidades específicas dependiendo del rango y precisión que se requiera para las operaciones en un programa.