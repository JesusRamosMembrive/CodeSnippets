<---FILES--->
main.cpp
result

<---main.cpp--->
#include <iostream>
#include <thread>
#include <atomic>

using namespace std;

constexpr int cuadrado(int x) {
    return x * x;
}

constinit int valorGlobal = 42; // Garantiza inicialización en tiempo de compilación

// Función constexpr
constexpr int suma(int a, int b) {
    return a + b;
}

// Variable constexpr
constexpr int valorConstante = 10;

// Variable constinit
constinit int contadorGlobal = 0;

constexpr int factorial(int n) {
    int resultado = 1;
    for (int i = 1; i <= n; ++i) {
        resultado *= i;
    }
    return resultado;
}
constinit std::atomic<int> contadorGlobal2{0};

void incrementarContador() {
    contadorGlobal++;
}

int main() {

    constexpr int valor = cuadrado(5); // Evaluada en tiempo de compilación
    int resultado = cuadrado(5);       // Evaluada en tiempo de ejecución

    constinit static int valorEstatico = 100; // Garantiza inicialización en tiempo de compilación

    // Uso de constexpr para evaluar en tiempo de compilación
    constexpr int resultado2 = suma(3, 4);
    cout << "Resultado constexpr: " << resultado2 << endl;

    // Uso de constinit para asegurar inicialización estática
    constinit static int contadorLocal = 100;
    contadorLocal++;
    cout << "Contador local: " << contadorLocal << endl;

    contadorGlobal++;
    cout << "Contador global: " << contadorGlobal << endl;

    constexpr int valorFactorial = factorial(5); // Evaluado en tiempo de compilación
    cout << "Factorial constexpr: " << valorFactorial << endl;
    return 0;

    std::thread t1(incrementarContador);
    std::thread t2(incrementarContador);

    t1.join();
    t2.join();

    std::cout << "Contador global: " << contadorGlobal << std::endl;

    return 0;
}


<---result--->
Resultado constexpr: 7
Contador local: 101
Contador global: 1
Factorial constexpr: 120

<---EXPLANATION--->
### Constexpr y Constinit en C++

C++ introduce `constexpr` y `constinit` como mecanismos para definir y asegurar constantes en tiempo de compilación. Estas dos palabras clave ayudan a mejorar la eficiencia y la seguridad del código al garantizar que ciertas expresiones sean evaluadas y ciertas variables sean inicializadas en tiempo de compilación.

#### 1. **`constexpr`**

`constexpr` se utiliza para definir variables y funciones que son evaluadas en tiempo de compilación. Esto garantiza que las expresiones `constexpr` sean constantes y permite optimizaciones más agresivas por parte del compilador.

##### Variables `constexpr`

Una variable `constexpr` debe ser inicializada con una expresión constante en tiempo de compilación.

```cpp
constexpr int tamañoArray = 10;
constexpr double pi = 3.14159;
```

##### Funciones `constexpr`

Una función `constexpr` puede ser evaluada en tiempo de compilación si sus argumentos son constantes. Si se llama a la función con valores que no son constantes, la función se evalúa en tiempo de ejecución.

```cpp
constexpr int cuadrado(int x) {
    return x * x;
}

int main() {
    constexpr int valor = cuadrado(5); // Evaluada en tiempo de compilación
    int resultado = cuadrado(5);       // Evaluada en tiempo de ejecución
    return 0;
}
```

#### 2. **`constinit`**

`constinit` se utiliza para garantizar que una variable de almacenamiento estático sea inicializada en tiempo de compilación. Esto es útil para evitar inicializaciones múltiples en el contexto de variables estáticas y garantiza que la inicialización ocurra antes de cualquier uso de la variable.

##### Ejemplo de `constinit`

```cpp
constinit int valorGlobal = 42; // Garantiza inicialización en tiempo de compilación

int main() {
    constinit static int valorEstatico = 100; // Garantiza inicialización en tiempo de compilación
    return 0;
}
```

### Comparación y Usos

- **`constexpr`** se utiliza tanto para variables como para funciones y asegura que las expresiones sean evaluadas en tiempo de compilación siempre que sea posible.
- **`constinit`** se utiliza para asegurar que una variable de almacenamiento estático se inicialice solo una vez en tiempo de compilación, evitando problemas de inicialización múltiple.

### Ejemplo Completo

A continuación, se muestra un ejemplo que utiliza tanto `constexpr` como `constinit` para declarar variables y funciones:

```cpp
#include <iostream>
using namespace std;

// Función constexpr
constexpr int suma(int a, int b) {
    return a + b;
}

// Variable constexpr
constexpr int valorConstante = 10;

// Variable constinit
constinit int contadorGlobal = 0;

int main() {
    // Uso de constexpr para evaluar en tiempo de compilación
    constexpr int resultado = suma(3, 4);
    cout << "Resultado constexpr: " << resultado << endl;

    // Uso de constinit para asegurar inicialización estática
    constinit static int contadorLocal = 100;
    contadorLocal++;
    cout << "Contador local: " << contadorLocal << endl;

    contadorGlobal++;
    cout << "Contador global: " << contadorGlobal << endl;

    return 0;
}
```

### Detalles Adicionales

#### Funciones `constexpr` y Limitaciones

- Las funciones `constexpr` pueden contener una sola sentencia `return` si están definidas en C++11, pero desde C++14, pueden contener más lógica, incluyendo bucles y condiciones.
- Las funciones `constexpr` no pueden tener efectos secundarios, como modificar variables globales o estáticas.

##### Ejemplo de Función `constexpr` Compleja (C++14 y Posterior)

```cpp
constexpr int factorial(int n) {
    int resultado = 1;
    for (int i = 1; i <= n; ++i) {
        resultado *= i;
    }
    return resultado;
}

int main() {
    constexpr int valorFactorial = factorial(5); // Evaluado en tiempo de compilación
    cout << "Factorial constexpr: " << valorFactorial << endl;
    return 0;
}
```

#### Uso de `constinit` en Contextos de Multithreading

El uso de `constinit` puede ser particularmente beneficioso en entornos de multithreading, donde asegurar que una variable estática se inicializa correctamente antes de su uso concurrente es crucial para evitar condiciones de carrera.

##### Ejemplo de `constinit` en Multithreading

```cpp
#include <iostream>
#include <thread>
#include <atomic>

constinit std::atomic<int> contadorGlobal{0};

void incrementarContador() {
    contadorGlobal++;
}

int main() {
    std::thread t1(incrementarContador);
    std::thread t2(incrementarContador);

    t1.join();
    t2.join();

    std::cout << "Contador global: " << contadorGlobal << std::endl;

    return 0;
}
```

### Conclusión

Tanto `constexpr` como `constinit` son herramientas poderosas en C++ que mejoran la seguridad y la eficiencia del código al garantizar la evaluación y la inicialización en tiempo de compilación. Utilizar estas palabras clave adecuadamente puede ayudar a prevenir errores y optimizar el rendimiento de los programas.