---FILES---
main.cpp
result

---main.cpp---
#include <iostream>
#include <iomanip>
#include <bitset>

// Tools
const int Pen{ 10 };
const int Marker{ 20 };
const int Eraser{ 30 };
const int Rectangle{ 40 };
const int Circle{ 50 };
const int Ellipse{ 60 };

int main(){

    int number1 {75};
    int number2 {60};
    bool result = (number1 < number2);//Expression yielding the condition

    std::cout << std::boolalpha << "result : " << result << std::endl;

    std::cout << std::endl;
    std::cout << "free standing if statement" << std::endl;

    //if(result){
    if(result == true){
        std::cout << number1 << " is less than " << number2 << std::endl;
    }

    //if(!result){
    if(!(result == true)){
        std::cout << number1 << " is NOT less than " << number2 << std::endl;
    }

    if(result == true){
        std::cout << number1 << " is less than " << number2 << std::endl;
    }else{
        std::cout << number1 << " is NOT less than " << number2 << std::endl;
    }

    int tool {Eraser};

    if (tool == Pen) {
        std::cout << "Active tool is pen" << std::endl;
        //Do the actual painting
    }
    else if (tool == Marker) {
        std::cout << "Active tool is Marker" << std::endl;
    }
    else if (tool == Eraser) {
        std::cout << "Active tool is Eraser" << std::endl;
    }
    else if (tool == Rectangle) {
        std::cout << "Active tool is Rectangle" << std::endl;
    }
    else if (tool == Circle) {
        std::cout << "Active tool is Circle" << std::endl;
    }
    else if (tool == Ellipse) {
        std::cout << "Active tool is Ellipse" << std::endl;
    }

    std::cout << "Moving on" << std::endl;
	

   // Using constexpr
   constexpr bool condition {false};

   if constexpr (condition){
       std::cout << "Condition is true" << std::endl;
   }else{
       std::cout << "Condition is false" << std::endl;
   }
    return 0;
}


---result---
result : false

free standing if statement
75 is NOT less than 60
75 is NOT less than 60
Active tool is Eraser
Moving on

---EXPLANATION---
### Declaración de Constantes

```cpp
const int Pen{ 10 };
const int Marker{ 20 };
const int Eraser{ 30 };
const int Rectangle{ 40 };
const int Circle{ 50 };
const int Ellipse{ 60 };
```
- Estas constantes representan diferentes herramientas con valores únicos. Se utilizan más adelante en el código para determinar qué herramienta está activa.

### Evaluación de Condiciones con `if-else`

1. **Comparación de Números:**
   ```cpp
   int number1 {75};
   int number2 {60};
   bool result = (number1 < number2); // Evaluar si number1 es menor que number2

   std::cout << std::boolalpha << "result : " << result << std::endl;
   ```
   - `result` almacena el resultado de la comparación `number1 < number2`.
   - `std::boolalpha` configura `std::cout` para imprimir valores booleanos como `true` o `false`.

2. **Uso de `if` para Decisiones:**
   ```cpp
   std::cout << "free standing if statement" << std::endl;

   if(result == true){
       std::cout << number1 << " is less than " << number2 << std::endl;
   }

   if(!(result == true)){
       std::cout << number1 << " is NOT less than " << number2 << std::endl;
   }
   ```
   - Se usa una instrucción `if` para imprimir si `number1` es menor que `number2`.
   - La segunda instrucción `if` usa `!` para invertir el resultado y verificar si `number1` no es menor que `number2`.

3. **Uso de `if-else`:**
   ```cpp
   if(result == true){
       std::cout << number1 << " is less than " << number2 << std::endl;
   } else {
       std::cout << number1 << " is NOT less than " << number2 << std::endl;
   }
   ```
   - `if-else` proporciona una alternativa para ejecutar una de dos posibles ramas de código dependiendo del resultado de `result`.

### Selección de Herramienta Activa

4. **Uso de `if-else if-else` para Selección:**
   ```cpp
   int tool {Eraser};

   if (tool == Pen) {
       std::cout << "Active tool is pen" << std::endl;
       // Realizar la acción correspondiente al lápiz
   }
   else if (tool == Marker) {
       std::cout << "Active tool is Marker" << std::endl;
   }
   else if (tool == Eraser) {
       std::cout << "Active tool is Eraser" << std::endl;
   }
   else if (tool == Rectangle) {
       std::cout << "Active tool is Rectangle" << std::endl;
   }
   else if (tool == Circle) {
       std::cout << "Active tool is Circle" << std::endl;
   }
   else if (tool == Ellipse) {
       std::cout << "Active tool is Ellipse" << std::endl;
   }
   ```
   - `tool` se inicializa con `Eraser`.
   - Se utilizan múltiples `else if` para determinar cuál herramienta está activa y realizar la acción correspondiente.

### Salida del Programa

5. **Mensaje Final:**
   ```cpp
   std::cout << "Moving on" << std::endl;
   ```
   - Imprime un mensaje indicando que el programa continúa después de la selección de la herramienta.

### Conclusión

El código demuestra el uso de la estructura de control `if-else` para evaluar condiciones y seleccionar acciones basadas en esas evaluaciones. Esto es fundamental en programación para tomar decisiones dinámicas durante la ejecución del programa. En este caso, se usan tanto comparaciones numéricas como selección de opciones mediante constantes definidas, lo que es útil para entender cómo manejar múltiples condiciones en C++.
