<---EXPLANATION--->
### Características de C++20: Expresiones de Rango y `std::ranges`

C++20 introdujo el soporte para rangos, una característica poderosa que facilita la manipulación de secuencias de datos de manera más expresiva y concisa. Los rangos permiten componer operaciones sobre secuencias de forma legible y eficiente, y `std::ranges` proporciona una biblioteca estándar para trabajar con estos rangos.

#### Conceptos Clave de `std::ranges`

- **Rangos:** Un rango es una vista sobre una secuencia de datos, definida por un par de iteradores o por otro rango.
- **Adaptadores de rango:** Transforman o filtran los elementos de un rango.
- **Acciones de rango:** Modifican los elementos de un rango in situ.
- **Conceptos de rango:** Definen las propiedades que deben cumplir los rangos y sus adaptadores.

#### Principales Componentes de `std::ranges`

1. **`std::views` Namespace**
2. **`std::ranges::begin` y `std::ranges::end`**
3. **`std::ranges::range` Concept**
4. **Adaptadores Comunes**
5. **Acciones de Rango**

### Ejemplo Básico de Uso de Rangos

##### Ejemplo con `std::views`

```cpp
#include <iostream>
#include <vector>
#include <ranges>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Usar std::views para crear una vista filtrada
    auto even_numbers = vec | std::views::filter([](int n) { return n % 2 == 0; });

    // Mostrar los números pares
    std::cout << "Números pares: ";
    for (int n : even_numbers) {
        std::cout << n << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::views::filter` crea una vista sobre `vec` que solo contiene los números pares.
- El operador `|` se usa para aplicar el adaptador de vista.

### Adaptadores de Rango Comunes

1. **`std::views::filter`**: Filtra los elementos de un rango basado en un predicado.
2. **`std::views::transform`**: Transforma los elementos de un rango aplicando una función.
3. **`std::views::take`**: Toma los primeros `n` elementos de un rango.
4. **`std::views::drop`**: Omite los primeros `n` elementos de un rango.
5. **`std::views::reverse`**: Invierte el orden de los elementos de un rango.

#### Ejemplo con `std::views::transform`

```cpp
#include <iostream>
#include <vector>
#include <ranges>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    // Usar std::views para crear una vista transformada
    auto squares = vec | std::views::transform([](int n) { return n * n; });

    // Mostrar los cuadrados de los números
    std::cout << "Cuadrados: ";
    for (int n : squares) {
        std::cout << n << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::views::transform` crea una vista sobre `vec` que contiene los cuadrados de los números originales.

### Acciones de Rango

Las acciones de rango, definidas en el namespace `std::ranges::actions`, permiten modificar los rangos directamente.

#### Ejemplo con `std::ranges::actions::sort`

```cpp
#include <iostream>
#include <vector>
#include <ranges>
#include <algorithm>

int main() {
    std::vector<int> vec = {5, 3, 1, 4, 2};

    // Usar std::ranges::actions para ordenar los elementos
    std::ranges::sort(vec);

    // Mostrar los elementos ordenados
    std::cout << "Elementos ordenados: ";
    for (int n : vec) {
        std::cout << n << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::ranges::sort` se utiliza para ordenar los elementos de `vec`.

### Conceptos de Rango

Los conceptos de rango definen propiedades que deben cumplir los rangos y sus adaptadores. Algunos conceptos importantes son:
- **`std::ranges::range`**: Indica que un tipo es un rango.
- **`std::ranges::view`**: Indica que un tipo es una vista.

#### Ejemplo de Comprobación de Concepto

```cpp
#include <iostream>
#include <vector>
#include <ranges>

int main() {
    static_assert(std::ranges::range<std::vector<int>>, "std::vector<int> es un rango");
    static_assert(std::ranges::view<std::ranges::iota_view<int>>, "std::ranges::iota_view<int> es una vista");

    std::cout << "Todos los conceptos se verificaron correctamente." << std::endl;

    return 0;
}
```

En este ejemplo:
- `static_assert` se utiliza para comprobar que `std::vector<int>` cumple con el concepto `std::ranges::range`.
- `static_assert` se utiliza para comprobar que `std::ranges::iota_view<int>` cumple con el concepto `std::ranges::view`.

### Conclusión

Las expresiones de rango y `std::ranges` en C++20 proporcionan una forma poderosa y expresiva de trabajar con secuencias de datos. Los rangos permiten componer operaciones de manera legible y eficiente, mientras que `std::views` y `std::ranges::actions` ofrecen una amplia gama de herramientas para transformar y modificar estos datos. La introducción de conceptos de rango también mejora la capacidad de comprobación y documentación del código. Utilizar estas características puede simplificar significativamente la manipulación de secuencias en C++.
<---FILES--->
Ejemplo con `std::views`
Ejemplo con `std::views` Result
<---Ejemplo con `std::views`--->
```cpp
#include <iostream>
#include <vector>
#include <ranges>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Usar std::views para crear una vista filtrada
    auto even_numbers = vec | std::views::filter([](int n) { return n % 2 == 0; });

    // Mostrar los números pares
    std::cout << "Números pares: ";
    for (int n : even_numbers) {
        std::cout << n << " ";
    }
    std::cout << std::endl;

    return 0;
}
```cpp
#include <iostream>
#include <vector>
#include <ranges>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    // Usar std::views para crear una vista transformada
    auto squares = vec | std::views::transform([](int n) { return n * n; });

    // Mostrar los cuadrados de los números
    std::cout << "Cuadrados: ";
    for (int n : squares) {
        std::cout << n << " ";
    }
    std::cout << std::endl;

    return 0;
}
```cpp
#include <iostream>
#include <vector>
#include <ranges>
#include <algorithm>

int main() {
    std::vector<int> vec = {5, 3, 1, 4, 2};

    // Usar std::ranges::actions para ordenar los elementos
    std::ranges::sort(vec);

    // Mostrar los elementos ordenados
    std::cout << "Elementos ordenados: ";
    for (int n : vec) {
        std::cout << n << " ";
    }
    std::cout << std::endl;

    return 0;
}
```cpp
#include <iostream>
#include <vector>
#include <ranges>

int main() {
    static_assert(std::ranges::range<std::vector<int>>, "std::vector<int> es un rango");
    static_assert(std::ranges::view<std::ranges::iota_view<int>>, "std::ranges::iota_view<int> es una vista");

    std::cout << "Todos los conceptos se verificaron correctamente." << std::endl;

    return 0;
}
<---Ejemplo con `std::views` Result--->
