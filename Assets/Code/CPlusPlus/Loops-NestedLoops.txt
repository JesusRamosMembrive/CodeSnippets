---FILES---
main.cpp
result

---main.cpp---
#include <iostream>
#include <iomanip>

int main(){

    //Setw on numbers before you print them
    const size_t ROWS {12};
    const size_t COLS {3};

    std::cout << "Tabular data visualization with nested for loops : " << std::endl;
    for (size_t row{0} ; row < ROWS ; ++ row){

        for (size_t col{0} ; col < COLS ; ++col){

            std::cout  << "( row "  <<  std::setw(2) << row << ",col " << std::setw(2) <<  col << ")  ";
        }
        std::cout << std::endl;
    }


    //While loop
    std::cout << std::endl;
    std::cout << "Tabular data visualization with nested while loops : " << std::endl;

    //Remember to reset col to 0 after the inner loop is done for the next row
    // to use the right columns.
    size_t row {0};
    size_t col {0};

    while(row < ROWS){

        while(col < COLS){
            std::cout  << "( row " << std::setw(2) <<  row << ",col "<< std::setw(2) <<  col << ") ";
            ++col;
        }
        std::cout << std::endl;
        col = 0 ;   // Reset col to 0 to allow printing from col 0 . col is in main
            // function local scope now.
        ++row;
    }


    std::cout << std::endl;
    std::cout << "Tabular data visualization with nested do while loops : " << std::endl;

    row = 0;
    col = 0;

    do { // row

        do {
            std::cout  << "( row " << std::setw(2) <<  row << ",col "<< std::setw(2) <<  col << ")   ";
            ++col;
        }while(col < COLS);

        std::cout << std::endl;
        col = 0 ; 	// Reset col to 0 to allow printing from col 0 . col is in main
            // function local scope now.
        ++row;
    }while(row < ROWS);


    return 0;
}


---result---
Tabular data visualization with nested for loops : 
( row  0,col  0)  ( row  0,col  1)  ( row  0,col  2)  
( row  1,col  0)  ( row  1,col  1)  ( row  1,col  2)  
( row  2,col  0)  ( row  2,col  1)  ( row  2,col  2)  
( row  3,col  0)  ( row  3,col  1)  ( row  3,col  2)  
( row  4,col  0)  ( row  4,col  1)  ( row  4,col  2)  
( row  5,col  0)  ( row  5,col  1)  ( row  5,col  2)  
( row  6,col  0)  ( row  6,col  1)  ( row  6,col  2)  
( row  7,col  0)  ( row  7,col  1)  ( row  7,col  2)  
( row  8,col  0)  ( row  8,col  1)  ( row  8,col  2)  
( row  9,col  0)  ( row  9,col  1)  ( row  9,col  2)  
( row 10,col  0)  ( row 10,col  1)  ( row 10,col  2)  
( row 11,col  0)  ( row 11,col  1)  ( row 11,col  2)  

Tabular data visualization with nested while loops : 
( row  0,col  0) ( row  0,col  1) ( row  0,col  2) 
( row  1,col  0) ( row  1,col  1) ( row  1,col  2) 
( row  2,col  0) ( row  2,col  1) ( row  2,col  2) 
( row  3,col  0) ( row  3,col  1) ( row  3,col  2) 
( row  4,col  0) ( row  4,col  1) ( row  4,col  2) 
( row  5,col  0) ( row  5,col  1) ( row  5,col  2) 
( row  6,col  0) ( row  6,col  1) ( row  6,col  2) 
( row  7,col  0) ( row  7,col  1) ( row  7,col  2) 
( row  8,col  0) ( row  8,col  1) ( row  8,col  2) 
( row  9,col  0) ( row  9,col  1) ( row  9,col  2) 
( row 10,col  0) ( row 10,col  1) ( row 10,col  2) 
( row 11,col  0) ( row 11,col  1) ( row 11,col  2) 

Tabular data visualization with nested do while loops : 
( row  0,col  0)   ( row  0,col  1)   ( row  0,col  2)   
( row  1,col  0)   ( row  1,col  1)   ( row  1,col  2)   
( row  2,col  0)   ( row  2,col  1)   ( row  2,col  2)   
( row  3,col  0)   ( row  3,col  1)   ( row  3,col  2)   
( row  4,col  0)   ( row  4,col  1)   ( row  4,col  2)   
( row  5,col  0)   ( row  5,col  1)   ( row  5,col  2)   
( row  6,col  0)   ( row  6,col  1)   ( row  6,col  2)   
( row  7,col  0)   ( row  7,col  1)   ( row  7,col  2)   
( row  8,col  0)   ( row  8,col  1)   ( row  8,col  2)   
( row  9,col  0)   ( row  9,col  1)   ( row  9,col  2)   
( row 10,col  0)   ( row 10,col  1)   ( row 10,col  2)   
( row 11,col  0)   ( row 11,col  1)   ( row 11,col  2)   

---EXPLANATION---
### Visualización de Datos Tabulares con Bucles Anidados

1. **Uso de bucles `for`:**
   ```cpp
   const size_t ROWS {12}; 
   const size_t COLS {3};

   std::cout << "Tabular data visualization with nested for loops : " << std::endl;
   for (size_t row{0} ; row < ROWS ; ++ row){
       for (size_t col{0} ; col < COLS ; ++col){
           std::cout  << "( row "  <<  std::setw(2) << row << ",col " << std::setw(2) <<  col << ")  ";
       }
       std::cout << std::endl;
   }
   ```
   - Se define una tabla con 12 filas y 3 columnas.
   - Los bucles `for` anidados recorren todas las combinaciones de filas y columnas.
   - `std::setw(2)` asegura que los números ocupen al menos 2 espacios, alineando la salida.

2. **Uso de bucles `while`:**
   ```cpp
   std::cout << std::endl;
   std::cout << "Tabular data visualization with nested while loops : " << std::endl;
   
   size_t row {0};
   size_t col {0};
   
   while(row < ROWS){
       while(col < COLS){
           std::cout  << "( row " << std::setw(2) <<  row << ",col "<< std::setw(2) <<  col << ") ";
           ++col;
       }
       std::cout << std::endl;
       col = 0; // Reiniciar col a 0 para la siguiente fila
       ++row;
   }
   ```
   - El bucle exterior `while` controla las filas, y el bucle interior `while` controla las columnas.
   - Después de imprimir todas las columnas de una fila, `col` se reinicia a 0 para la siguiente iteración de `row`.

3. **Uso de bucles `do-while`:**
   ```cpp
   std::cout << std::endl;
   std::cout << "Tabular data visualization with nested do while loops : " << std::endl;
   
   row = 0;
   col = 0;
   
   do { // Bucle para las filas
       do { // Bucle para las columnas
           std::cout  << "( row " << std::setw(2) <<  row << ",col "<< std::setw(2) <<  col << ")   ";
           ++col;
       } while(col < COLS);
       
       std::cout << std::endl;
       col = 0; // Reiniciar col a 0 para la siguiente fila
       ++row;
   } while(row < ROWS);
   ```
   - Similar al bucle `while`, pero con `do-while` que garantiza al menos una iteración.
   - Primero se ejecuta el bloque de código y luego se verifica la condición.

### Conclusión

Este código demuestra cómo usar diferentes tipos de bucles en C++ para visualizar datos tabulares. Cada enfoque (bucles `for`, `while` y `do-while`) tiene su propia sintaxis y comportamiento:

- Los bucles `for` son útiles cuando se conoce de antemano el número de iteraciones.
- Los bucles `while` son más flexibles cuando la condición de terminación se basa en algo que puede cambiar dentro del bucle.
- Los bucles `do-while` garantizan que el bloque de código se ejecute al menos una vez antes de verificar la condición.

El uso de `std::setw` mejora la presentación de los datos al asegurar que cada número tenga el mismo ancho, lo que facilita la lectura de la tabla generada.
