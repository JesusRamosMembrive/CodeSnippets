<---EXPLANATION--->
### Funtores con Lambdas en C++

Las expresiones lambda en C++ son una forma concisa y poderosa de crear funtores. Introducidas en C++11, las lambdas permiten definir funciones anónimas en línea que pueden capturar variables del ámbito circundante. Son especialmente útiles en algoritmos de la biblioteca estándar y en casos donde se necesitan funciones ligeras y rápidas.

#### Definición y Uso de Lambdas

Una lambda en C++ se define utilizando la siguiente sintaxis básica:

```cpp
[captures](parameters) -> return_type { body }
```

- **captures:** Especifica qué variables del ámbito circundante se capturan y cómo (por valor `[=]` o por referencia `[&]`).
- **parameters:** Lista de parámetros de la lambda (puede ser omitida si no hay parámetros).
- **return_type:** Tipo de retorno de la lambda (puede deducirse automáticamente y, por tanto, omitirse en la mayoría de los casos).
- **body:** El cuerpo de la lambda.

##### Ejemplo Básico de Lambda

```cpp
#include <iostream>

int main() {
    auto sumar = [](int a, int b) {
        return a + b;
    };

    std::cout << "Resultado: " << sumar(3, 4) << std::endl;  // Muestra: Resultado: 7

    return 0;
}
```

En este ejemplo:
- `sumar` es una lambda que toma dos enteros y devuelve su suma.

#### Captura de Variables en Lambdas

Las lambdas pueden capturar variables del ámbito circundante, lo que las hace muy flexibles.

##### Ejemplo de Captura por Valor y por Referencia

```cpp
#include <iostream>

int main() {
    int x = 10;
    int y = 20;

    auto capturarPorValor = [=]() {
        return x + y;
    };

    auto capturarPorReferencia = [&]() {
        x *= 2;
        y *= 2;
    };

    std::cout << "Suma por valor: " << capturarPorValor() << std::endl;  // Muestra: Suma por valor: 30
    capturarPorReferencia();
    std::cout << "x: " << x << ", y: " << y << std::endl;  // Muestra: x: 20, y: 40

    return 0;
}
```

En este ejemplo:
- `capturarPorValor` captura `x` y `y` por valor.
- `capturarPorReferencia` captura `x` y `y` por referencia, permitiendo modificarlos.

#### Uso de Lambdas en Algoritmos de la Biblioteca Estándar

Las lambdas son especialmente útiles en combinación con algoritmos de la biblioteca estándar como `std::sort`, `std::for_each`, `std::transform`, etc.

##### Ejemplo con `std::sort`

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {5, 2, 8, 1, 3};

    std::sort(vec.begin(), vec.end(), [](int a, int b) {
        return a < b;
    });

    for (int x : vec) {
        std::cout << x << " ";  // Muestra: 1 2 3 5 8
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- Se utiliza una lambda como comparador en `std::sort` para ordenar el vector en orden ascendente.

##### Ejemplo con `std::for_each`

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    std::for_each(vec.begin(), vec.end(), [](int& n) {
        n *= 2;
    });

    for (int x : vec) {
        std::cout << x << " ";  // Muestra: 2 4 6 8 10
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- Se utiliza una lambda para multiplicar cada elemento del vector por 2 en `std::for_each`.

#### Lambdas con Parámetros de Plantilla

Las lambdas pueden ser genéricas, utilizando la sintaxis de plantillas.

##### Ejemplo de Lambda Genérica

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    auto multiplicar = [](auto a, auto b) {
        return a * b;
    };

    std::cout << "Multiplicar enteros: " << multiplicar(3, 4) << std::endl;  // Muestra: Multiplicar enteros: 12
    std::cout << "Multiplicar doubles: " << multiplicar(3.5, 2.0) << std::endl;  // Muestra: Multiplicar doubles: 7.0

    return 0;
}
```

En este ejemplo:
- `multiplicar` es una lambda genérica que puede multiplicar valores de cualquier tipo compatible.

### Conclusión

Las lambdas en C++ son una herramienta poderosa para crear funtores ligeros y flexibles. Permiten definir funciones anónimas en línea, capturar variables del ámbito circundante y utilizarlas en algoritmos de la biblioteca estándar. Además, las lambdas pueden ser genéricas, lo que aumenta su versatilidad. Comprender y utilizar lambdas adecuadamente es esencial para aprovechar al máximo las capacidades de C++ moderno, facilitando la escritura de código más limpio y eficiente.
<---FILES--->
Ejemplo Básico de Lambda
Ejemplo Básico de Lambda Result
Ejemplo de Captura por Valor y por Referencia
Ejemplo de Captura por Valor y por Referencia Result
Ejemplo con `std::sort`
Ejemplo con `std::sort` Result
Ejemplo con `std::for_each`
Ejemplo con `std::for_each` Result
Ejemplo de Lambda Genérica
Ejemplo de Lambda Genérica Result
<---Ejemplo Básico de Lambda--->
```cpp
#include <iostream>

int main() {
    auto sumar = [](int a, int b) {
        return a + b;
    };

    std::cout << "Resultado: " << sumar(3, 4) << std::endl;  // Muestra: Resultado: 7

    return 0;
}
<---Ejemplo Básico de Lambda Result--->
<---Ejemplo de Captura por Valor y por Referencia--->
```cpp
#include <iostream>

int main() {
    int x = 10;
    int y = 20;

    auto capturarPorValor = [=]() {
        return x + y;
    };

    auto capturarPorReferencia = [&]() {
        x *= 2;
        y *= 2;
    };

    std::cout << "Suma por valor: " << capturarPorValor() << std::endl;  // Muestra: Suma por valor: 30
    capturarPorReferencia();
    std::cout << "x: " << x << ", y: " << y << std::endl;  // Muestra: x: 20, y: 40

    return 0;
}
<---Ejemplo de Captura por Valor y por Referencia Result--->
<---Ejemplo con `std::sort`--->
```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {5, 2, 8, 1, 3};

    std::sort(vec.begin(), vec.end(), [](int a, int b) {
        return a < b;
    });

    for (int x : vec) {
        std::cout << x << " ";  // Muestra: 1 2 3 5 8
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo con `std::sort` Result--->
<---Ejemplo con `std::for_each`--->
```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    std::for_each(vec.begin(), vec.end(), [](int& n) {
        n *= 2;
    });

    for (int x : vec) {
        std::cout << x << " ";  // Muestra: 2 4 6 8 10
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo con `std::for_each` Result--->
<---Ejemplo de Lambda Genérica--->
```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    auto multiplicar = [](auto a, auto b) {
        return a * b;
    };

    std::cout << "Multiplicar enteros: " << multiplicar(3, 4) << std::endl;  // Muestra: Multiplicar enteros: 12
    std::cout << "Multiplicar doubles: " << multiplicar(3.5, 2.0) << std::endl;  // Muestra: Multiplicar doubles: 7.0

    return 0;
}
<---Ejemplo de Lambda Genérica Result--->
