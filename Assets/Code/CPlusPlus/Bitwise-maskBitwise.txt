---FILES---
main.cpp
result

---main.cpp---
#include <iostream>
#include <iomanip>
#include <bitset>
const unsigned char mask_bit_0 {0b00000001} ;//Bit0
const unsigned char mask_bit_1 {0b00000010} ;//Bit1
const unsigned char mask_bit_2 {0b00000100} ;//Bit2
const unsigned char mask_bit_3 {0b00001000} ;//Bit3
const unsigned char mask_bit_4 {0b00010000} ;//Bit4
const unsigned char mask_bit_5 {0b00100000} ;//Bit5
const unsigned char mask_bit_6 {0b01000000} ;//Bit6
const unsigned char mask_bit_7 {0b10000000} ;//Bit7


void use_options_v0 (bool flag0, bool flag1, bool flag2, bool flag3,
                    bool flag4, bool flag5, bool flag6, bool flag7){

    std::cout << "Flag0 is : " << flag0 << ", do something with it." <<  std::endl;
    std::cout << "Flag1 is : " << flag1 << ", do something with it."<<  std::endl;
    std::cout << "Flag2 is : " << flag2 << ", do something with it." <<  std::endl;
    std::cout << "Flag3 is : " << flag3 << ", do something with it."<<  std::endl;
    std::cout << "Flag4 is : " << flag4 << ", do something with it."<<  std::endl;
    std::cout << "Flag5 is : " << flag5 << ", do something with it."<<  std::endl;
    std::cout << "Flag6 is : " << flag6 << ", do something with it."<<  std::endl;
    std::cout << "Flag7 is : " << flag7 << ", do something with it."<<  std::endl;
}


void use_options_v1(unsigned char flags){

    std::cout << "bit0 is " << ((flags & mask_bit_0) >> 0 ) << ", do something with it!"<< std::endl;
    std::cout << "bit1 is " << ((flags & mask_bit_1) >> 1 ) <<", do something with it!"<< std::endl;
    std::cout << "bit2 is " << ((flags & mask_bit_2) >> 2 ) <<", do something with it!"<< std::endl;
    std::cout << "bit3 is " << ((flags & mask_bit_3) >> 3 ) <<", do something with it!"<< std::endl;
    std::cout << "bit4 is " << ((flags & mask_bit_4) >> 4 ) <<", do something with it!"<< std::endl;
    std::cout << "bit5 is " << ((flags & mask_bit_5) >> 5 ) <<", do something with it!"<< std::endl;
    std::cout << "bit6 is " << ((flags & mask_bit_6) >> 6 ) <<", do something with it!"<< std::endl;
    std::cout << "bit7 is " << ((flags & mask_bit_7) >> 7 ) <<", do something with it!"<< std::endl;
}

int main(){

    const int COLUMN_WIDTH {20};

    //Highlight position for bit of interest with a 1
    //Mask other positions with 0

    const unsigned char mask_bit_0 {0b00000001} ;//Bit0
    const unsigned char mask_bit_1 {0b00000010} ;//Bit1
    const unsigned char mask_bit_2 {0b00000100} ;//Bit2
    const unsigned char mask_bit_3 {0b00001000} ;//Bit3
    const unsigned char mask_bit_4 {0b00010000} ;//Bit4
    const unsigned char mask_bit_5 {0b00100000} ;//Bit5
    const unsigned char mask_bit_6 {0b01000000} ;//Bit6
    const unsigned char mask_bit_7 {0b10000000} ;//Bit7

    //Sandbox variable
    unsigned char var {0b00000000};// Starts off all bits off

    std::cout << std::setw(COLUMN_WIDTH) <<  "var : "
              << std::setw(COLUMN_WIDTH) << std::bitset<8>(var) << std::endl;



    //Set a few bits : make them 1's regardless of what's in there

    //SETTING BITS
    //Setting : |= with mask of the bit

    //Set bit 1
    std::cout << "Setting bit in position 1" << std::endl;
    var |= mask_bit_1;
    std::cout << std::setw(COLUMN_WIDTH) <<  "var : "
              << std::setw(COLUMN_WIDTH) << std::bitset<8>(var) << std::endl;

    //Set bit 5
    std::cout << "Setting bit in position 5" << std::endl;
    var |= mask_bit_5;
    std::cout << std::setw(COLUMN_WIDTH) <<  "var : "
              << std::setw(COLUMN_WIDTH) << std::bitset<8>(var) << std::endl;


    //RESETTING BITS : set to 0
    //Resetting : &= (~mask)

    //Reset bit 1
    std::cout << "Resetting bit in position 1" << std::endl;
    var &= (~mask_bit_1);
    std::cout << std::setw(COLUMN_WIDTH) <<  "var : "
              << std::setw(COLUMN_WIDTH) << std::bitset<8>(var) << std::endl;

    //Reset bit 5
    std::cout << "Resetting bit in position 1" << std::endl;
    var &= (~mask_bit_5);
    std::cout << std::setw(COLUMN_WIDTH) <<  "var : "
              << std::setw(COLUMN_WIDTH) << std::bitset<8>(var) << std::endl;


    //Set all bits
    std::cout << "Setting all bits" << std::endl;
    var |= ( mask_bit_0 | mask_bit_1 | mask_bit_2 | mask_bit_3 |
            mask_bit_4 | mask_bit_5 | mask_bit_6 | mask_bit_7);
    std::cout << std::setw(COLUMN_WIDTH) <<  "var : "
              << std::setw(COLUMN_WIDTH) << std::bitset<8>(var) << std::endl;


    //Reset bits at pos 0,2,4,6
    std::cout << "Reset bits at pos 0,2,4,6" << std::endl;
    var &= ~(mask_bit_0 | mask_bit_2 | mask_bit_4 | mask_bit_6);
    std::cout << std::setw(COLUMN_WIDTH) <<  "var : "
              << std::setw(COLUMN_WIDTH) << std::bitset<8>(var) << std::endl;



    //Check state of a bit
    std::cout << std::endl;
    std::cout << "Checking the state of each bit position (on/off)" << std::endl;
    std::cout << "bit0 is " << ((var & mask_bit_0) >> 0 )<< std::endl;
    std::cout << "bit1 is " << ((var & mask_bit_1) >> 1 ) << std::endl;
    std::cout << "bit2 is " << ((var & mask_bit_2) >> 2 ) << std::endl;
    std::cout << "bit3 is " << ((var & mask_bit_3) >> 3 ) << std::endl;
    std::cout << "bit4 is " << ((var & mask_bit_4) >> 4 ) << std::endl;
    std::cout << "bit5 is " << ((var & mask_bit_5) >> 5 ) << std::endl;
    std::cout << std::boolalpha;
    std::cout << "bit6 is " << ((var & mask_bit_6) >> 6 ) << std::endl;
    std::cout << "bit6 is " << static_cast<bool>(var & mask_bit_6) << std::endl;

    std::cout << "bit7 is " << ((var & mask_bit_7) >> 7 ) << std::endl;
    std::cout << "bit7 is " << static_cast<bool>(var & mask_bit_7) << std::endl;


    //Toggle bits
    //Toggle : var ^ mask

    //Toggle bit 0
    std::cout << std::endl;
    std::cout << "Toggle bit 0" << std::endl;
    var ^= mask_bit_0;
    std::cout << std::setw(COLUMN_WIDTH) <<  "var : "
              << std::setw(COLUMN_WIDTH) << std::bitset<8>(var) << std::endl;

    //Toggle bit7
    std::cout << "Toggle bit 7" << std::endl;
    var ^= mask_bit_7;
    std::cout << std::setw(COLUMN_WIDTH) <<  "var : "
              << std::setw(COLUMN_WIDTH) << std::bitset<8>(var) << std::endl;

    //Toggle multiple bits in one go : the 4 higher bits
    std::cout << "Toggle multiple bits in one go : the 4 higher bits" << std::endl;
    var ^= (mask_bit_7 | mask_bit_6 | mask_bit_5 | mask_bit_4);
    std::cout << std::setw(COLUMN_WIDTH) <<  "var : "
              << std::setw(COLUMN_WIDTH) << std::bitset<8>(var) << std::endl;

    //Mask example
    use_options_v0(0,0,1,1,1,0,1,0);

    std::cout << "----------------------" << std::endl;
    use_options_v1(mask_bit_2 | mask_bit_3 | mask_bit_4 | mask_bit_6);
    return 0;
}


---result---
              var :             00000000
Setting bit in position 1
              var :             00000010
Setting bit in position 5
              var :             00100010
Resetting bit in position 1
              var :             00100000
Resetting bit in position 1
              var :             00000000
Setting all bits
              var :             11111111
Reset bits at pos 0,2,4,6
              var :             10101010

Checking the state of each bit position (on/off)
bit0 is 0
bit1 is 1
bit2 is 0
bit3 is 1
bit4 is 0
bit5 is 1
bit6 is 0
bit6 is false
bit7 is 1
bit7 is true

Toggle bit 0
              var :             10101011
Toggle bit 7
              var :             00101011
Toggle multiple bits in one go : the 4 higher bits
              var :             11011011
Flag0 is : false, do something with it.
Flag1 is : false, do something with it.
Flag2 is : true, do something with it.
Flag3 is : true, do something with it.
Flag4 is : true, do something with it.
Flag5 is : false, do something with it.
Flag6 is : true, do something with it.
Flag7 is : false, do something with it.
----------------------
bit0 is 0, do something with it!
bit1 is 0, do something with it!
bit2 is 1, do something with it!
bit3 is 1, do something with it!
bit4 is 1, do something with it!
bit5 is 0, do something with it!
bit6 is 1, do something with it!
bit7 is 0, do something with it!

---EXPLANATION---
### Máscaras de Bits

1. **Definición de máscaras de bits:**
   ```cpp
   const unsigned char mask_bit_0 {0b00000001}; // Bit0
   const unsigned char mask_bit_1 {0b00000010}; // Bit1
   const unsigned char mask_bit_2 {0b00000100}; // Bit2
   const unsigned char mask_bit_3 {0b00001000}; // Bit3
   const unsigned char mask_bit_4 {0b00010000}; // Bit4
   const unsigned char mask_bit_5 {0b00100000}; // Bit5
   const unsigned char mask_bit_6 {0b01000000}; // Bit6
   const unsigned char mask_bit_7 {0b10000000}; // Bit7
   ```
   - Estas máscaras se utilizan para seleccionar bits específicos dentro de un byte. Cada máscara tiene un solo bit establecido en 1, correspondiendo a una posición específica.

### Uso de Opciones con Bits

2. **Funciones que utilizan bits como banderas:**
   ```cpp
   void use_options_v0(bool flag0, bool flag1, bool flag2, bool flag3, bool flag4, bool flag5, bool flag6, bool flag7){
       // ... imprimir valores de los flags ...
   }

   void use_options_v1(unsigned char flags){
       // ... imprimir estados de bits específicos usando máscaras ...
   }
   ```
   - `use_options_v0` acepta múltiples parámetros booleanos para cada bit.
   - `use_options_v1` utiliza un solo byte (`flags`) y máscaras para determinar el estado de cada bit.

### Operaciones de Bits en `main()`

3. **Inicialización y configuración de bits:**
   ```cpp
   unsigned char var {0b00000000}; // Inicia con todos los bits apagados

   var |= mask_bit_1; // Establecer el bit 1
   var |= mask_bit_5; // Establecer el bit 5
   ```
   - Se utilizan operaciones OR (`|=`) para establecer bits específicos en 1.

4. **Restablecimiento de bits:**
   ```cpp
   var &= (~mask_bit_1); // Restablecer el bit 1
   var &= (~mask_bit_5); // Restablecer el bit 5
   ```
   - Se utilizan operaciones AND con el complemento (`&= ~`) para restablecer bits específicos a 0.

5. **Establecimiento y restablecimiento de múltiples bits:**
   ```cpp
   var |= (mask_bit_0 | mask_bit_1 | mask_bit_2 | mask_bit_3 | mask_bit_4 | mask_bit_5 | mask_bit_6 | mask_bit_7); // Establecer todos los bits
   var &= ~(mask_bit_0 | mask_bit_2 | mask_bit_4 | mask_bit_6); // Restablecer bits en posiciones 0, 2, 4, 6
   ```
   - Se pueden manipular múltiples bits a la vez combinando máscaras con OR (`|`) o AND (`&`).

6. **Comprobación del estado de los bits:**
   ```cpp
   std::cout << "bit0 is " << ((var & mask_bit_0) >> 0 ) << std::endl;
   std::cout << "bit1 is " << ((var & mask_bit_1) >> 1 ) << std::endl;
   // ... y así sucesivamente para cada bit ...
   ```
   - Se utilizan operaciones AND (`&`) y desplazamiento de bits (`>>`) para verificar el estado de bits específicos.

7. **Conmutación de bits:**
   ```cpp
   var ^= mask_bit_0; // Conmutar bit 0
   var ^= mask_bit_7; // Conmutar bit 7
   var ^= (mask_bit_7 | mask_bit_6 | mask_bit_5 | mask_bit_4); // Conmutar múltiples bits
   ```
   - Se utiliza la operación XOR (`^=`) para conmutar bits, es decir, cambiar el estado del bit de 0 a 1 o de 1 a 0.

### Ejemplo de Uso

8. **Uso de funciones con banderas de bits:**
   ```cpp
   use_options_v0(0, 0, 1, 1, 1, 0, 1, 0);

   use_options_v1(mask_bit_2 | mask_bit_3 | mask_bit_4 | mask_bit_6);
   ```
   - `use_options_v0` se llama con valores booleanos directos para cada bit.
   - `use_options_v1` se llama con un valor compuesto por la combinación de varias máscaras, lo que representa una combinación específica de bits establecidos.

### Conclusión

El código demuestra cómo usar operaciones bit a bit para manipular y verificar el estado de bits individuales dentro de un byte. Este enfoque es eficiente y comúnmente utilizado en programación de bajo nivel, control de hardware, y sistemas embebidos donde se requiere un control preciso sobre los bits. Las máscaras de bits y las operaciones AND, OR, XOR, y de desplazamiento son herramientas poderosas para estas tareas.
