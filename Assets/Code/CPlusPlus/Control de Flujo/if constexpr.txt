<---EXPLANATION--->
### `if constexpr` en C++

Introducido en C++17, `if constexpr` es una característica que permite la evaluación condicional en tiempo de compilación. Es especialmente útil en el contexto de la metaprogramación, donde se desea que ciertas partes del código se ejecuten solo si ciertas condiciones son verdaderas durante la compilación, mejorando así la eficiencia y eliminando código innecesario en tiempo de ejecución.

#### ¿Qué es `if constexpr`?

`if constexpr` se utiliza para escribir expresiones condicionales que se evalúan en tiempo de compilación. Si la condición es `true`, el compilador incluye el bloque de código correspondiente; si es `false`, el bloque de código se ignora por completo. Esto permite eliminar ramas de código que nunca se ejecutarán, reduciendo el tamaño del binario y evitando errores de compilación en ramas no utilizadas.

#### Sintaxis Básica

```cpp
if constexpr (condicion_constexpr) {
    // Código a ejecutar si la condición es verdadera en tiempo de compilación
} else {
    // Código a ejecutar si la condición es falsa en tiempo de compilación
}
```

#### Ejemplo Básico

```cpp
#include <iostream>
#include <type_traits>

template<typename T>
void imprimirTipo(T valor) {
    if constexpr (std::is_integral_v<T>) {
        std::cout << "El valor es un entero: " << valor << std::endl;
    } else {
        std::cout << "El valor no es un entero: " << valor << std::endl;
    }
}

int main() {
    imprimirTipo(10);     // El valor es un entero
    imprimirTipo(3.14);   // El valor no es un entero
    return 0;
}
```

En este ejemplo, `std::is_integral_v<T>` es una constante en tiempo de compilación que indica si `T` es un tipo integral. `if constexpr` utiliza esta información para decidir qué bloque de código compilar.

#### Ventajas de `if constexpr`

1. **Eficiencia en Tiempo de Compilación:** Elimina ramas de código no necesarias, mejorando la eficiencia.
2. **Seguridad en el Tipo:** Evita errores de compilación en ramas de código que no son relevantes para ciertos tipos.
3. **Metaprogramación:** Facilita la escritura de código genérico y optimizado para diferentes tipos.

#### Ejemplo con Plantillas

`if constexpr` es especialmente útil cuando se trabaja con plantillas y se necesita realizar diferentes acciones basadas en el tipo de plantilla.

```cpp
#include <iostream>
#include <vector>
#include <type_traits>

template<typename T>
void procesar(T valor) {
    if constexpr (std::is_integral_v<T>) {
        std::cout << "Procesando un entero: " << valor << std::endl;
    } else if constexpr (std::is_floating_point_v<T>) {
        std::cout << "Procesando un número de punto flotante: " << valor << std::endl;
    } else {
        std::cout << "Procesando otro tipo: " << valor << std::endl;
    }
}

int main() {
    procesar(42);           // Procesando un entero
    procesar(3.14159);      // Procesando un número de punto flotante
    procesar("Hola");       // Procesando otro tipo
    return 0;
}
```

#### Comparación con `if` Tradicional

A diferencia de un `if` tradicional, que se evalúa en tiempo de ejecución, `if constexpr` se evalúa en tiempo de compilación. Esto significa que el código dentro de las ramas no utilizadas no solo no se ejecuta, sino que ni siquiera se compila.

```cpp
#include <iostream>
#include <type_traits>

template<typename T>
void ejemplo(T valor) {
    if constexpr (sizeof(T) > 4) {
        std::cout << "Tipo grande\n";
    } else {
        std::cout << "Tipo pequeño\n";
    }
}

int main() {
    ejemplo(123);           // Tipo pequeño (int)
    ejemplo(1234567890123LL); // Tipo grande (long long)
    return 0;
}
```

En este ejemplo, `sizeof(T)` se evalúa en tiempo de compilación, permitiendo que el compilador incluya solo la rama de código relevante.

### Ejemplo Completo y Más Complejo

A continuación, un ejemplo más complejo que muestra cómo `if constexpr` puede ser utilizado en una plantilla genérica para manejar diferentes tipos de contenedores.

```cpp
#include <iostream>
#include <vector>
#include <list>
#include <type_traits>

template<typename Container>
void imprimirContenedor(const Container& contenedor) {
    if constexpr (std::is_same_v<Container, std::vector<typename Container::value_type>>) {
        std::cout << "Es un vector con tamaño: " << contenedor.size() << std::endl;
    } else if constexpr (std::is_same_v<Container, std::list<typename Container::value_type>>) {
        std::cout << "Es una lista con tamaño: " << contenedor.size() << std::endl;
    } else {
        std::cout << "Es otro tipo de contenedor con tamaño: " << contenedor.size() << std::endl;
    }

    for (const auto& elemento : contenedor) {
        std::cout << elemento << " ";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> miVector = {1, 2, 3, 4, 5};
    std::list<int> miLista = {6, 7, 8, 9, 10};

    imprimirContenedor(miVector); // Es un vector con tamaño: 5
    imprimirContenedor(miLista);  // Es una lista con tamaño: 5

    return 0;
}
```

### Conclusión

`if constexpr` es una poderosa característica de C++ que permite la evaluación condicional en tiempo de compilación. Esto es especialmente útil en la metaprogramación y la escritura de código genérico, proporcionando eficiencia y seguridad adicional en el código. Su uso adecuado puede simplificar el manejo de diferentes tipos y mejorar el rendimiento al eliminar ramas de código innecesarias.
<---FILES--->
NA.
