<---EXPLANATION--->
### `std::advance` y `std::distance` en C++

Las funciones `std::advance` y `std::distance` son utilidades de la biblioteca estándar de C++ que proporcionan operaciones convenientes sobre iteradores. Estas funciones son parte del encabezado `<iterator>` y se utilizan para manipular y calcular distancias entre iteradores de manera eficiente.

#### `std::advance`

`std::advance` es una función que incrementa o decrementa un iterador por un número especificado de pasos. Es útil cuando se necesita mover un iterador una cantidad específica de posiciones sin escribir bucles explícitos.

##### Sintaxis

```cpp
#include <iterator>

template <class InputIterator, class Distance>
void advance(InputIterator& it, Distance n);
```

##### Ejemplo de Uso de `std::advance`

```cpp
#include <iostream>
#include <vector>
#include <iterator>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    // Iterador al primer elemento
    std::vector<int>::iterator it = vec.begin();

    // Avanzar el iterador 3 posiciones
    std::advance(it, 3);

    // Mostrar el valor del elemento apuntado por el iterador
    std::cout << "Elemento en la posición 3: " << *it << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::advance(it, 3)` mueve el iterador `it` tres posiciones hacia adelante en el vector.

#### `std::distance`

`std::distance` es una función que calcula la distancia (el número de pasos) entre dos iteradores. Es útil cuando se necesita conocer cuántos elementos hay entre dos iteradores.

##### Sintaxis

```cpp
#include <iterator>

template <class InputIterator>
typename std::iterator_traits<InputIterator>::difference_type
distance(InputIterator first, InputIterator last);
```

##### Ejemplo de Uso de `std::distance`

```cpp
#include <iostream>
#include <vector>
#include <iterator>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    // Iteradores al primer y al cuarto elemento
    std::vector<int>::iterator it1 = vec.begin();
    std::vector<int>::iterator it2 = vec.begin();
    std::advance(it2, 3);

    // Calcular la distancia entre it1 y it2
    std::cout << "Distancia entre it1 e it2: " << std::distance(it1, it2) << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::distance(it1, it2)` calcula el número de elementos entre los iteradores `it1` e `it2`.

### Uso Combinado de `std::advance` y `std::distance`

A menudo, `std::advance` y `std::distance` se pueden usar juntos para realizar operaciones más complejas con iteradores.

##### Ejemplo Combinado

```cpp
#include <iostream>
#include <list>
#include <iterator>

int main() {
    std::list<int> lst = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};

    // Iterador al inicio de la lista
    std::list<int>::iterator it1 = lst.begin();

    // Avanzar el iterador 5 posiciones
    std::advance(it1, 5);

    // Iterador al final de la lista
    std::list<int>::iterator it2 = lst.end();

    // Calcular la distancia entre it1 y it2
    std::cout << "Distancia entre it1 e it2: " << std::distance(it1, it2) << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::advance(it1, 5)` mueve el iterador `it1` cinco posiciones hacia adelante en la lista.
- `std::distance(it1, it2)` calcula la distancia entre `it1` e `it2`, que es el número de elementos desde la sexta posición hasta el final de la lista.

### Consideraciones de Eficiencia

- **`std::advance`:** Para iteradores de acceso aleatorio (como los de `std::vector`), `std::advance` es muy eficiente porque simplemente agrega el desplazamiento al iterador. Para iteradores de otros tipos (como los de `std::list`), puede ser menos eficiente porque debe recorrer la secuencia paso a paso.
- **`std::distance`:** Similar a `std::advance`, es muy eficiente para iteradores de acceso aleatorio porque puede calcular la distancia en tiempo constante. Para otros tipos de iteradores, la eficiencia depende de tener que recorrer la secuencia para contar los elementos.

### Conclusión

`std::advance` y `std::distance` son funciones muy útiles para manipular y calcular posiciones de iteradores de manera eficiente en C++. Permiten escribir código más limpio y legible, evitando la necesidad de bucles explícitos para mover iteradores o calcular distancias entre ellos. Comprender cómo y cuándo usar estas funciones es esencial para trabajar de manera efectiva con iteradores en C++.
<---FILES--->
Sintaxis
Sintaxis Result
Ejemplo de Uso de `std::advance`
Ejemplo de Uso de `std::advance` Result
Ejemplo de Uso de `std::distance`
Ejemplo de Uso de `std::distance` Result
Ejemplo Combinado
Ejemplo Combinado Result
<---Sintaxis--->
```cpp
#include <iterator>

template <class InputIterator>
typename std::iterator_traits<InputIterator>::difference_type
distance(InputIterator first, InputIterator last);
<---Sintaxis Result--->
<---Ejemplo de Uso de `std::advance`--->
```cpp
#include <iostream>
#include <vector>
#include <iterator>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    // Iterador al primer elemento
    std::vector<int>::iterator it = vec.begin();

    // Avanzar el iterador 3 posiciones
    std::advance(it, 3);

    // Mostrar el valor del elemento apuntado por el iterador
    std::cout << "Elemento en la posición 3: " << *it << std::endl;

    return 0;
}
<---Ejemplo de Uso de `std::advance` Result--->
<---Ejemplo de Uso de `std::distance`--->
```cpp
#include <iostream>
#include <vector>
#include <iterator>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    // Iteradores al primer y al cuarto elemento
    std::vector<int>::iterator it1 = vec.begin();
    std::vector<int>::iterator it2 = vec.begin();
    std::advance(it2, 3);

    // Calcular la distancia entre it1 y it2
    std::cout << "Distancia entre it1 e it2: " << std::distance(it1, it2) << std::endl;

    return 0;
}
<---Ejemplo de Uso de `std::distance` Result--->
<---Ejemplo Combinado--->
```cpp
#include <iostream>
#include <list>
#include <iterator>

int main() {
    std::list<int> lst = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};

    // Iterador al inicio de la lista
    std::list<int>::iterator it1 = lst.begin();

    // Avanzar el iterador 5 posiciones
    std::advance(it1, 5);

    // Iterador al final de la lista
    std::list<int>::iterator it2 = lst.end();

    // Calcular la distancia entre it1 y it2
    std::cout << "Distancia entre it1 e it2: " << std::distance(it1, it2) << std::endl;

    return 0;
}
<---Ejemplo Combinado Result--->
