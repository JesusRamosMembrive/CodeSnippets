<---EXPLANATION--->
### Clases Abstractas en C++

Las clases abstractas son un concepto fundamental en la programación orientada a objetos en C++. Proporcionan una manera de definir interfaces comunes para sus clases derivadas y permiten diseñar sistemas más flexibles y extensibles. Una clase abstracta es una clase que no puede ser instanciada directamente y se utiliza principalmente como una base para otras clases.

#### Definición de Clase Abstracta

Una clase abstracta en C++ es una clase que contiene al menos una función miembro pura virtual. Una función miembro pura virtual se declara añadiendo `= 0` al final de su declaración. Las clases derivadas deben proporcionar implementaciones para todas las funciones miembro puras virtuales de la clase abstracta para ser instanciadas.

##### Sintaxis

```cpp
class NombreClaseAbstracta {
public:
    virtual void funcionPuraVirtual() = 0; // Función pura virtual
};
```

#### Ejemplo de Clase Abstracta

Consideremos un ejemplo donde queremos definir una jerarquía de clases para diferentes tipos de animales. La clase base `Animal` será una clase abstracta porque tiene una función pura virtual `hacerSonido`.

##### Ejemplo de Implementación

```cpp
#include <iostream>
using namespace std;

class Animal {
public:
    virtual void hacerSonido() const = 0; // Función pura virtual

    virtual ~Animal() {
        // Destructor virtual
    }
};

class Perro : public Animal {
public:
    void hacerSonido() const override {
        cout << "El perro ladra" << endl;
    }
};

class Gato : public Animal {
public:
    void hacerSonido() const override {
        cout << "El gato maúlla" << endl;
    }
};

int main() {
    // Animal a; // Error: no se puede instanciar una clase abstracta

    Animal* p = new Perro();
    Animal* g = new Gato();

    p->hacerSonido(); // Llama a Perro::hacerSonido()
    g->hacerSonido(); // Llama a Gato::hacerSonido()

    delete p;
    delete g;

    return 0;
}
```

En este ejemplo:
- `Animal` es una clase abstracta porque tiene una función pura virtual `hacerSonido`.
- `Perro` y `Gato` son clases derivadas que proporcionan implementaciones específicas de `hacerSonido`.

#### Uso de Clases Abstractas

Las clases abstractas son útiles cuando se desea definir una interfaz común para un conjunto de clases derivadas. Permiten que las clases derivadas compartan una estructura común y obligan a estas clases a proporcionar implementaciones específicas para las funciones puras virtuales.

##### Ventajas de Usar Clases Abstractas

1. **Interfaz Común:** Proveen una interfaz común para todas las clases derivadas, asegurando que todas implementen ciertas funciones.
2. **Extensibilidad:** Facilitan la extensibilidad del código. Nuevas clases derivadas pueden añadirse sin cambiar la interfaz de la clase base.
3. **Flexibilidad:** Permiten escribir código más flexible y reusable, ya que el código puede operar sobre punteros o referencias a la clase abstracta sin conocer los detalles de las clases derivadas específicas.

##### Ejemplo de Uso en una Colección

```cpp
#include <iostream>
#include <vector>
using namespace std;

class Figura {
public:
    virtual void dibujar() const = 0; // Función pura virtual
    virtual ~Figura() {}
};

class Circulo : public Figura {
public:
    void dibujar() const override {
        cout << "Dibujando un círculo" << endl;
    }
};

class Cuadrado : public Figura {
public:
    void dibujar() const override {
        cout << "Dibujando un cuadrado" << endl;
    }
};

int main() {
    vector<Figura*> figuras;
    figuras.push_back(new Circulo());
    figuras.push_back(new Cuadrado());

    for (const auto& figura : figuras) {
        figura->dibujar();
    }

    // Liberar memoria
    for (const auto& figura : figuras) {
        delete figura;
    }

    return 0;
}
```

En este ejemplo:
- `Figura` es una clase abstracta con una función pura virtual `dibujar`.
- `Circulo` y `Cuadrado` son clases derivadas que proporcionan implementaciones específicas de `dibujar`.
- Un vector de punteros a `Figura` permite almacenar y operar sobre diferentes tipos de figuras de manera polimórfica.

#### Consideraciones al Usar Clases Abstractas

1. **Destructores Virtuales:** Siempre declarar destructores virtuales en clases abstractas para asegurar una correcta liberación de recursos en las clases derivadas.
2. **Implementaciones Comunes:** Si una función pura virtual tiene una implementación común que puede ser compartida por algunas clases derivadas, puede ser implementada en la clase base como una función virtual no pura.
3. **Combinación con Otras Características:** Las clases abstractas pueden combinarse con otras características de la POO, como la herencia múltiple y los templates, para diseñar sistemas más complejos y flexibles.

### Conclusión

Las clases abstractas en C++ son una herramienta poderosa para definir interfaces comunes y asegurar que todas las clases derivadas implementen ciertas funciones. Facilitan la extensibilidad y la reutilización del código, permitiendo escribir aplicaciones más flexibles y mantenibles. Comprender cómo y cuándo usar clases abstractas es esencial para aprovechar al máximo las capacidades de la programación orientada a objetos en C++.
<---FILES--->
Sintaxis
Sintaxis Result
Ejemplo de Implementación
Ejemplo de Implementación Result
Ventajas de Usar Clases Abstractas
Ventajas de Usar Clases Abstractas Result
Ejemplo de Uso en una Colección
Ejemplo de Uso en una Colección Result
<---Sintaxis--->
```cpp
class NombreClaseAbstracta {
public:
    virtual void funcionPuraVirtual() = 0; // Función pura virtual
};
<---Sintaxis Result--->
<---Ejemplo de Implementación--->
```cpp
#include <iostream>
using namespace std;

class Animal {
public:
    virtual void hacerSonido() const = 0; // Función pura virtual

    virtual ~Animal() {
        // Destructor virtual
    }
};

class Perro : public Animal {
public:
    void hacerSonido() const override {
        cout << "El perro ladra" << endl;
    }
};

class Gato : public Animal {
public:
    void hacerSonido() const override {
        cout << "El gato maúlla" << endl;
    }
};

int main() {
    // Animal a; // Error: no se puede instanciar una clase abstracta

    Animal* p = new Perro();
    Animal* g = new Gato();

    p->hacerSonido(); // Llama a Perro::hacerSonido()
    g->hacerSonido(); // Llama a Gato::hacerSonido()

    delete p;
    delete g;

    return 0;
}
<---Ejemplo de Implementación Result--->
<---Ventajas de Usar Clases Abstractas--->
<---Ventajas de Usar Clases Abstractas Result--->
<---Ejemplo de Uso en una Colección--->
```cpp
#include <iostream>
#include <vector>
using namespace std;

class Figura {
public:
    virtual void dibujar() const = 0; // Función pura virtual
    virtual ~Figura() {}
};

class Circulo : public Figura {
public:
    void dibujar() const override {
        cout << "Dibujando un círculo" << endl;
    }
};

class Cuadrado : public Figura {
public:
    void dibujar() const override {
        cout << "Dibujando un cuadrado" << endl;
    }
};

int main() {
    vector<Figura*> figuras;
    figuras.push_back(new Circulo());
    figuras.push_back(new Cuadrado());

    for (const auto& figura : figuras) {
        figura->dibujar();
    }

    // Liberar memoria
    for (const auto& figura : figuras) {
        delete figura;
    }

    return 0;
}
<---Ejemplo de Uso en una Colección Result--->
