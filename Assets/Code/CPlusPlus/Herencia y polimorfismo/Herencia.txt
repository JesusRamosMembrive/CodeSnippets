<---EXPLANATION--->
### Herencia en C++

La herencia es uno de los pilares fundamentales de la programación orientada a objetos (POO). En C++, la herencia permite crear nuevas clases a partir de clases existentes, lo que facilita la reutilización del código y la creación de jerarquías de clases.

#### Definición de Herencia

La herencia es un mecanismo mediante el cual una clase (llamada clase derivada o subclase) puede heredar atributos y métodos de otra clase (llamada clase base o superclase). La clase derivada puede extender o modificar el comportamiento de la clase base.

- **Clase Base (Superclase):** La clase original que proporciona atributos y métodos a otras clases.
- **Clase Derivada (Subclase):** La nueva clase que hereda atributos y métodos de la clase base.

#### Ventajas de la Herencia

1. **Reutilización de Código:** La herencia permite reutilizar el código existente, lo que reduce la duplicación de código y facilita el mantenimiento.
2. **Extensibilidad:** Las clases derivadas pueden añadir nuevas funcionalidades o modificar las existentes sin cambiar el código de la clase base.
3. **Jerarquía y Organización:** La herencia permite organizar el código en jerarquías lógicas, facilitando la comprensión y gestión del mismo.
4. **Polimorfismo:** La herencia facilita el uso del polimorfismo, permitiendo que una misma interfaz se utilice para diferentes tipos de objetos.

#### Sintaxis Básica de la Herencia

La sintaxis básica para definir una clase derivada en C++ es la siguiente:

```cpp
class ClaseBase {
public:
    // Atributos y métodos de la clase base
};

class ClaseDerivada : public ClaseBase {
public:
    // Atributos y métodos adicionales de la clase derivada
};
```

- **`public`** indica que todos los miembros públicos de la clase base son accesibles como públicos en la clase derivada. Existen otros modos de herencia (`protected` y `private`), pero `public` es el más común.

##### Ejemplo Básico de Herencia

```cpp
#include <iostream>
using namespace std;

class Animal {
public:
    void comer() {
        cout << "El animal está comiendo." << endl;
    }
};

class Perro : public Animal {
public:
    void ladrar() {
        cout << "El perro está ladrando." << endl;
    }
};

int main() {
    Perro miPerro;
    miPerro.comer(); // Método heredado de la clase base
    miPerro.ladrar(); // Método de la clase derivada

    return 0;
}
```

En este ejemplo:
- `Animal` es la clase base que define un método `comer`.
- `Perro` es la clase derivada que hereda de `Animal` y añade un método `ladrar`.

#### Tipos de Herencia

1. **Herencia Pública (`public`):** Los miembros públicos y protegidos de la clase base se convierten en públicos y protegidos en la clase derivada, respectivamente.
2. **Herencia Protegida (`protected`):** Los miembros públicos y protegidos de la clase base se convierten en protegidos en la clase derivada.
3. **Herencia Privada (`private`):** Los miembros públicos y protegidos de la clase base se convierten en privados en la clase derivada.

##### Ejemplo de Diferentes Modos de Herencia

```cpp
#include <iostream>
using namespace std;

class Base {
public:
    int publicVar;
protected:
    int protectedVar;
private:
    int privateVar;
};

class DerivadaPublic : public Base {
    // publicVar es public
    // protectedVar es protected
    // privateVar no es accesible
};

class DerivadaProtected : protected Base {
    // publicVar es protected
    // protectedVar es protected
    // privateVar no es accesible
};

class DerivadaPrivate : private Base {
    // publicVar es private
    // protectedVar es private
    // privateVar no es accesible
};

int main() {
    DerivadaPublic objPublic;
    objPublic.publicVar = 10; // Accesible
    // objPublic.protectedVar = 20; // No accesible
    // objPublic.privateVar = 30; // No accesible

    DerivadaProtected objProtected;
    // objProtected.publicVar = 10; // No accesible
    // objProtected.protectedVar = 20; // No accesible

    DerivadaPrivate objPrivate;
    // objPrivate.publicVar = 10; // No accesible
    // objPrivate.protectedVar = 20; // No accesible

    return 0;
}
```

En este ejemplo, se muestra cómo los diferentes modos de herencia afectan la accesibilidad de los miembros de la clase base en la clase derivada.

### Conclusión

La herencia es una característica poderosa de la programación orientada a objetos que permite crear nuevas clases basadas en clases existentes. Ofrece numerosas ventajas, como la reutilización de código, la extensibilidad y el uso de polimorfismo. La sintaxis de herencia en C++ es sencilla y permite definir jerarquías claras y organizadas, facilitando el desarrollo y mantenimiento del software. Entender los diferentes modos de herencia y cómo afectan la accesibilidad de los miembros es crucial para aprovechar al máximo esta característica.
<---FILES--->
Ejemplo Básico de Herencia
Ejemplo Básico de Herencia Result
Ejemplo de Diferentes Modos de Herencia
Ejemplo de Diferentes Modos de Herencia Result
<---Ejemplo Básico de Herencia--->
```cpp
#include <iostream>
using namespace std;

class Animal {
public:
    void comer() {
        cout << "El animal está comiendo." << endl;
    }
};

class Perro : public Animal {
public:
    void ladrar() {
        cout << "El perro está ladrando." << endl;
    }
};

int main() {
    Perro miPerro;
    miPerro.comer(); // Método heredado de la clase base
    miPerro.ladrar(); // Método de la clase derivada

    return 0;
}
<---Ejemplo Básico de Herencia Result--->
<---Ejemplo de Diferentes Modos de Herencia--->
```cpp
#include <iostream>
using namespace std;

class Base {
public:
    int publicVar;
protected:
    int protectedVar;
private:
    int privateVar;
};

class DerivadaPublic : public Base {
    // publicVar es public
    // protectedVar es protected
    // privateVar no es accesible
};

class DerivadaProtected : protected Base {
    // publicVar es protected
    // protectedVar es protected
    // privateVar no es accesible
};

class DerivadaPrivate : private Base {
    // publicVar es private
    // protectedVar es private
    // privateVar no es accesible
};

int main() {
    DerivadaPublic objPublic;
    objPublic.publicVar = 10; // Accesible
    // objPublic.protectedVar = 20; // No accesible
    // objPublic.privateVar = 30; // No accesible

    DerivadaProtected objProtected;
    // objProtected.publicVar = 10; // No accesible
    // objProtected.protectedVar = 20; // No accesible

    DerivadaPrivate objPrivate;
    // objPrivate.publicVar = 10; // No accesible
    // objPrivate.protectedVar = 20; // No accesible

    return 0;
}
<---Ejemplo de Diferentes Modos de Herencia Result--->
