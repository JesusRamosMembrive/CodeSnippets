---FILES---
main.cpp
result

---main.cpp---
#include <iostream>


int main(){
   
    int number1 {20};
    int number2 {20};
	
    std::cout << "number1 : " << number1 << std::endl;
    std::cout << "number2 : " << number2 << std::endl;
	
	std::cout << std::endl;
	std::cout << "Comparing variables" << std::endl;
	
    std::cout << std::boolalpha ; // Make bool show up as true/false instead of 1/0
	//Stress the need for parentheses here
    std::cout << "number1 < number2 : " << (number1 < number2) << std::endl;
	std::cout << "number1 <= number2 : " << (number1 <= number2) << std::endl;
    std::cout << "number1 > number2 : " << (number1 > number2) << std::endl;
    std::cout << "number1 >= number2 : " << (number1 >= number2) << std::endl;
    std::cout << "number1 == number2 : " << (number1 == number2) << std::endl;
    std::cout << "number1 != number2 : " << (number1 != number2) << std::endl;

	std::cout << std::endl;
	std::cout << "store comparison result and use it later" << std::endl;
	
	bool result = (number1 == number2);
    
    std::cout <<  number1 << " == " << number2 << " : " << result <<  std::endl;

    return 0;
}

---result---
number1 : 20
number2 : 20

Comparing variables
number1 < number2 : false
number1 <= number2 : true
number1 > number2 : false
number1 >= number2 : true
number1 == number2 : true
number1 != number2 : false

store comparison result and use it later
20 == 20 : true

---EXPLANATION---
### Operadores de Comparación en C++

En C++, los operadores de comparación se utilizan para comparar dos valores y devolver un valor booleano (`true` o `false`). Estos operadores son fundamentales para la toma de decisiones y el control del flujo en los programas. A continuación se explica cómo funcionan estos operadores con ejemplos.

#### Ejemplo Básico

Supongamos que tenemos dos variables `number1` y `number2` inicializadas con el valor `20`.

```cpp
int number1 {20};
int number2 {20};
```

#### Operadores de Comparación

1. **Menor que (`<`)**
   - **Expresión:** `number1 < number2`
   - **Resultado:** `false` (ya que 20 no es menor que 20)

2. **Menor o igual que (`<=`)**
   - **Expresión:** `number1 <= number2`
   - **Resultado:** `true` (ya que 20 es igual a 20)

3. **Mayor que (`>`)**
   - **Expresión:** `number1 > number2`
   - **Resultado:** `false` (ya que 20 no es mayor que 20)

4. **Mayor o igual que (`>=`)**
   - **Expresión:** `number1 >= number2`
   - **Resultado:** `true` (ya que 20 es igual a 20)

5. **Igual a (`==`)**
   - **Expresión:** `number1 == number2`
   - **Resultado:** `true` (ya que 20 es igual a 20)

6. **Distinto de (`!=`)**
   - **Expresión:** `number1 != number2`
   - **Resultado:** `false` (ya que 20 no es distinto de 20)

#### Uso de `std::boolalpha`

El manipulador `std::boolalpha` se utiliza para imprimir valores booleanos como `true` o `false` en lugar de `1` o `0`.

```cpp
std::cout << std::boolalpha;
```

#### Comparación y Almacenamiento del Resultado

El resultado de una comparación puede almacenarse en una variable booleana para su uso posterior.

```cpp
bool result = (number1 == number2);
std::cout << number1 << " == " << number2 << " : " << result << std::endl;
```

### Conclusión

Los operadores de comparación (`<`, `<=`, `>`, `>=`, `==`, `!=`) en C++ son esenciales para comparar valores y tomar decisiones basadas en esas comparaciones. Utilizar `std::boolalpha` puede mejorar la legibilidad de la salida al mostrar valores booleanos como `true` o `false`. Comprender cómo y cuándo utilizar estos operadores es fundamental para escribir programas eficientes y correctos.
