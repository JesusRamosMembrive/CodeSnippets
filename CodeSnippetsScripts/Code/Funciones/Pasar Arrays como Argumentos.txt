<---EXPLANATION--->
### Funciones y Procedimientos en C++: Definición y Declaración de Funciones

Las funciones en C++ son bloques de código que realizan una tarea específica y pueden ser llamadas desde diferentes partes de un programa. Definir y declarar funciones es fundamental para estructurar y modularizar el código, facilitando la reutilización y el mantenimiento.

#### Declaración de Funciones

La declaración de una función (también conocida como prototipo de función) informa al compilador sobre la existencia de una función antes de su definición real. La declaración incluye el tipo de retorno, el nombre de la función y los tipos de parámetros.

##### Sintaxis de la Declaración de Funciones

```cpp
tipo_retorno nombre_funcion(lista_de_parametros);
```

- **tipo_retorno**: El tipo de dato que devuelve la función.
- **nombre_funcion**: El identificador de la función.
- **lista_de_parametros**: Los tipos y nombres de los parámetros que acepta la función.

##### Ejemplo de Declaración de Función

```cpp
int sumar(int a, int b);
void mostrarMensaje(string mensaje);
```

En este ejemplo:
- `int sumar(int a, int b);` declara una función que toma dos enteros y devuelve un entero.
- `void mostrarMensaje(string mensaje);` declara una función que toma una cadena y no devuelve nada.

#### Definición de Funciones

La definición de una función proporciona el cuerpo de la función, es decir, el bloque de código que se ejecuta cuando se llama a la función. La definición incluye la declaración de la función y el bloque de código asociado.

##### Sintaxis de la Definición de Funciones

```cpp
tipo_retorno nombre_funcion(lista_de_parametros) {
    // Cuerpo de la función
}
```

##### Ejemplo de Definición de Función

```cpp
int sumar(int a, int b) {
    return a + b;
}

void mostrarMensaje(string mensaje) {
    cout << mensaje << endl;
}
```

En este ejemplo:
- `int sumar(int a, int b) { return a + b; }` define una función que suma dos enteros y devuelve el resultado.
- `void mostrarMensaje(string mensaje) { cout << mensaje << endl; }` define una función que muestra un mensaje en la consola.

#### Ejemplo Completo: Declaración y Definición de Funciones

```cpp
#include <iostream>
using namespace std;

// Declaraciones de funciones
int sumar(int a, int b);
void mostrarMensaje(string mensaje);

int main() {
    int resultado = sumar(5, 3);
    cout << "La suma es: " << resultado << endl;

    mostrarMensaje("Hola, mundo!");

    return 0;
}

// Definiciones de funciones
int sumar(int a, int b) {
    return a + b;
}

void mostrarMensaje(string mensaje) {
    cout << mensaje << endl;
}
```

En este ejemplo completo:
- Las funciones `sumar` y `mostrarMensaje` se declaran antes del `main`.
- Las definiciones de las funciones `sumar` y `mostrarMensaje` proporcionan los cuerpos de las funciones después del `main`.

#### Funciones con Parámetros por Valor y por Referencia

En C++, los parámetros de las funciones pueden pasarse por valor o por referencia.

##### Parámetros por Valor

Los parámetros por valor se copian en los parámetros de la función. Los cambios en los parámetros dentro de la función no afectan a los argumentos originales.

```cpp
void incrementarPorValor(int x) {
    x++;
}

int main() {
    int numero = 5;
    incrementarPorValor(numero);
    cout << "Número después de incrementar por valor: " << numero << endl; // Salida: 5
    return 0;
}
```

##### Parámetros por Referencia

Los parámetros por referencia permiten que la función modifique los argumentos originales. Se utilizan referencias (`&`) en la lista de parámetros.

```cpp
void incrementarPorReferencia(int& x) {
    x++;
}

int main() {
    int numero = 5;
    incrementarPorReferencia(numero);
    cout << "Número después de incrementar por referencia: " << numero << endl; // Salida: 6
    return 0;
}
```

#### Sobrecarga de Funciones

C++ permite la sobrecarga de funciones, es decir, varias funciones pueden tener el mismo nombre pero diferentes listas de parámetros.

##### Ejemplo de Sobrecarga de Funciones

```cpp
#include <iostream>
using namespace std;

int sumar(int a, int b) {
    return a + b;
}

double sumar(double a, double b) {
    return a + b;
}

int main() {
    cout << "Suma de enteros: " << sumar(3, 4) << endl;       // Llama a sumar(int, int)
    cout << "Suma de dobles: " << sumar(3.5, 2.5) << endl;    // Llama a sumar(double, double)
    return 0;
}
```

### Conclusión

Las funciones son una parte esencial de la programación en C++. Comprender cómo declarar y definir funciones, así como las diferencias entre pasar parámetros por valor y por referencia, permite escribir código modular, reutilizable y fácil de mantener. La sobrecarga de funciones añade flexibilidad, permitiendo definir múltiples versiones de una función para manejar diferentes tipos de datos o cantidades de parámetros. Con estas habilidades, los desarrolladores pueden estructurar mejor sus programas y resolver problemas de manera eficiente.
### Parámetros y Argumentos en C++

Los parámetros y argumentos son conceptos fundamentales en la programación de funciones. Los parámetros son variables en la definición de la función que actúan como marcadores de posición para los valores que se pasarán a la función cuando se llame. Los argumentos son los valores reales que se pasan a la función cuando se invoca.

#### Parámetros

Los parámetros se declaran en la definición de la función. Actúan como variables locales dentro del cuerpo de la función, permitiendo que la función opere con los valores proporcionados en la llamada.

##### Tipos de Parámetros

1. **Parámetros por Valor**
2. **Parámetros por Referencia**
3. **Parámetros por Puntero**
4. **Parámetros Predeterminados**

##### Parámetros por Valor

Cuando se pasan parámetros por valor, se copia el valor del argumento en el parámetro de la función. Los cambios hechos a los parámetros dentro de la función no afectan a los argumentos originales.

```cpp
void incrementarPorValor(int x) {
    x++;
    cout << "Dentro de la función: " << x << endl;
}

int main() {
    int numero = 5;
    incrementarPorValor(numero);
    cout << "Fuera de la función: " << numero << endl; // Salida: 5
    return 0;
}
```

##### Parámetros por Referencia

Cuando se pasan parámetros por referencia, se pasa la referencia del argumento a la función, permitiendo que la función modifique el valor original.

```cpp
void incrementarPorReferencia(int& x) {
    x++;
    cout << "Dentro de la función: " << x << endl;
}

int main() {
    int numero = 5;
    incrementarPorReferencia(numero);
    cout << "Fuera de la función: " << numero << endl; // Salida: 6
    return 0;
}
```

##### Parámetros por Puntero

Los punteros pueden utilizarse para pasar la dirección de una variable a una función, permitiendo que la función modifique la variable original.

```cpp
void incrementarPorPuntero(int* x) {
    (*x)++;
    cout << "Dentro de la función: " << *x << endl;
}

int main() {
    int numero = 5;
    incrementarPorPuntero(&numero);
    cout << "Fuera de la función: " << numero << endl; // Salida: 6
    return 0;
}
```

##### Parámetros Predeterminados

C++ permite especificar valores predeterminados para los parámetros. Si no se proporcionan argumentos para estos parámetros en la llamada a la función, se utilizan los valores predeterminados.

```cpp
void saludar(string nombre = "Mundo") {
    cout << "Hola, " << nombre << "!" << endl;
}

int main() {
    saludar(); // Usa el valor predeterminado: Mundo
    saludar("Juan"); // Usa el argumento proporcionado: Juan
    return 0;
}
```

#### Argumentos

Los argumentos son los valores que se pasan a la función cuando se invoca. Pueden ser constantes, variables, expresiones, o incluso llamadas a otras funciones.

##### Ejemplo de Argumentos

```cpp
int sumar(int a, int b) {
    return a + b;
}

int main() {
    int x = 5;
    int y = 3;
    int resultado = sumar(x, y); // x y y son los argumentos
    cout << "Resultado: " << resultado << endl;
    return 0;
}
```

En este ejemplo, `x` y `y` son argumentos cuando se llama a la función `sumar`.

### Funciones con Múltiples Parámetros

Las funciones pueden aceptar múltiples parámetros, lo que permite realizar operaciones más complejas.

##### Ejemplo con Múltiples Parámetros

```cpp
#include <iostream>
using namespace std;

void imprimirDatos(string nombre, int edad, double altura) {
    cout << "Nombre: " << nombre << endl;
    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << " metros" << endl;
}

int main() {
    imprimirDatos("Juan", 30, 1.75);
    return 0;
}
```

### Paso de Parámetros por Constante

Es una buena práctica pasar parámetros por referencia constante cuando no se requiere modificar el argumento, especialmente para objetos grandes, para evitar copias innecesarias.

##### Ejemplo con Referencia Constante

```cpp
void mostrarMensaje(const string& mensaje) {
    cout << mensaje << endl;
}

int main() {
    string saludo = "Hola, Mundo!";
    mostrarMensaje(saludo);
    return 0;
}
```

### Conclusión

Entender la diferencia entre parámetros y argumentos, y cómo se pueden pasar a las funciones, es esencial para escribir funciones flexibles y eficientes en C++. El uso adecuado de parámetros por valor, referencia, puntero, y valores predeterminados permite a los desarrolladores manipular datos de diversas maneras, mejorar el rendimiento y mantener el código limpio y fácil de entender. Con estas habilidades, se puede maximizar la reutilización y modularidad del código en C++.
### Pasar Arrays como Argumentos en C++

Pasar arrays como argumentos a las funciones es una técnica común en C++ que permite a las funciones operar sobre colecciones de datos. A diferencia de otros lenguajes de programación, en C++ hay varias maneras de pasar arrays a las funciones, cada una con sus propias características y ventajas.

#### Pasar Arrays por Puntero

Cuando se pasa un array a una función, lo que realmente se pasa es un puntero al primer elemento del array. Esto significa que los cambios realizados en el array dentro de la función afectan al array original.

##### Ejemplo de Pasar Arrays por Puntero

```cpp
#include <iostream>
using namespace std;

void imprimirArray(int* arr, int tam) {
    for (int i = 0; i < tam; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int numeros[] = {1, 2, 3, 4, 5};
    int tam = sizeof(numeros) / sizeof(numeros[0]);

    imprimirArray(numeros, tam); // Pasar array a la función

    return 0;
}
```

En este ejemplo, el array `numeros` se pasa a la función `imprimirArray` como un puntero al primer elemento del array.

#### Pasar Arrays por Referencia

C++ permite pasar arrays por referencia, lo que asegura que la función recibe una referencia al array original. Esto evita la ambigüedad que puede surgir al pasar arrays por puntero y facilita la lectura del código.

##### Ejemplo de Pasar Arrays por Referencia

```cpp
#include <iostream>
using namespace std;

template<size_t N>
void imprimirArrayPorReferencia(int (&arr)[N]) {
    for (int i = 0; i < N; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int numeros[] = {1, 2, 3, 4, 5};

    imprimirArrayPorReferencia(numeros); // Pasar array a la función por referencia

    return 0;
}
```

En este ejemplo, la función `imprimirArrayPorReferencia` recibe una referencia al array, asegurando que se trata del array completo y no solo de un puntero al primer elemento.

#### Pasar Arrays de Cadenas

Los arrays de cadenas (C-strings) se pueden pasar de la misma manera que los arrays de enteros. Dado que los C-strings son arrays de caracteres terminados en nulo, se puede usar la misma técnica para pasarlos como argumentos.

##### Ejemplo de Pasar Arrays de Cadenas

```cpp
#include <iostream>
using namespace std;

void imprimirCadenas(const char* cadenas[], int tam) {
    for (int i = 0; i < tam; ++i) {
        cout << cadenas[i] << endl;
    }
}

int main() {
    const char* frutas[] = {"Manzana", "Banana", "Cereza", "Dátil"};

    int tam = sizeof(frutas) / sizeof(frutas[0]);
    imprimirCadenas(frutas, tam); // Pasar array de cadenas a la función

    return 0;
}
```

En este ejemplo, el array de C-strings `frutas` se pasa a la función `imprimirCadenas` como un puntero a un array de punteros a caracteres.

### Pasar Arrays Multidimensionales

Los arrays multidimensionales también pueden pasarse a las funciones. Es importante especificar todas las dimensiones excepto la primera al pasar el array a la función.

##### Ejemplo de Pasar Arrays Bidimensionales

```cpp
#include <iostream>
using namespace std;

void imprimirMatriz(int matriz[][3], int filas) {
    for (int i = 0; i < filas; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << matriz[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int matriz[2][3] = {
        {1, 2, 3},
        {4, 5, 6}
    };

    imprimirMatriz(matriz, 2); // Pasar array bidimensional a la función

    return 0;
}
```

En este ejemplo, el array bidimensional `matriz` se pasa a la función `imprimirMatriz`, donde se especifica la segunda dimensión en la declaración de la función.

### Consideraciones y Buenas Prácticas

1. **Uso de `const`**: Siempre que sea posible, usa `const` para proteger los arrays de modificaciones no deseadas dentro de la función.

   ```cpp
   void imprimirArray(const int* arr, int tam) {
       // Código para imprimir el array
   }
   ```

2. **Tamaño del Array**: Asegúrate de pasar también el tamaño del array a la función para evitar accesos fuera de los límites.

   ```cpp
   void imprimirArray(const int* arr, int tam) {
       for (int i = 0; i < tam; ++i) {
           cout << arr[i] << " ";
       }
       cout << endl;
   }
   ```

3. **Referencias y Plantillas**: Para arrays de tamaño fijo, las referencias y las plantillas pueden hacer el código más seguro y claro.

   ```cpp
   template<size_t N>
   void imprimirArrayPorReferencia(int (&arr)[N]) {
       for (int i = 0; i < N; ++i) {
           cout << arr[i] << " ";
       }
       cout << endl;
   }
   ```

4. **Arrays Multidimensionales**: Especifica todas las dimensiones excepto la primera al pasar arrays multidimensionales.

   ```cpp
   void imprimirMatriz(int matriz[][3], int filas) {
       // Código para imprimir la matriz
   }
   ```

### Ejemplo Completo

A continuación, un ejemplo completo que ilustra diversas formas de pasar arrays a las funciones:

```cpp
#include <iostream>
using namespace std;

// Pasar array por puntero
void imprimirArray(const int* arr, int tam) {
    for (int i = 0; i < tam; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Pasar array por referencia
template<size_t N>
void imprimirArrayPorReferencia(const int (&arr)[N]) {
    for (int i = 0; i < N; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Pasar array de cadenas
void imprimirCadenas(const char* cadenas[], int tam) {
    for (int i = 0; i < tam; ++i) {
        cout << cadenas[i] << endl;
    }
}

// Pasar array bidimensional
void imprimirMatriz(int matriz[][3], int filas) {
    for (int i = 0; i < filas; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << matriz[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    // Array unidimensional
    int numeros[] = {1, 2, 3, 4, 5};
    int tam = sizeof(numeros) / sizeof(numeros[0]);

    imprimirArray(numeros, tam);
    imprimirArrayPorReferencia(numeros);

    // Array de cadenas
    const char* frutas[] = {"Manzana", "Banana", "Cereza", "Dátil"};
    int tamFrutas = sizeof(frutas) / sizeof(frutas[0]);

    imprimirCadenas(frutas, tamFrutas);

    // Array bidimensional
    int matriz[2][3] = {
        {1, 2, 3},
        {4, 5, 6}
    };

    imprimirMatriz(matriz, 2);

    return 0;
}
```

### Conclusión

Pasar arrays como argumentos a funciones en C++ es una técnica fundamental que permite manejar colecciones de datos de manera eficiente. Entender las diferentes formas de pasar arrays, ya sea por puntero, referencia, o utilizando plantillas, es esencial para escribir funciones versátiles y seguras. Con estas habilidades, los desarrolladores pueden crear programas más robustos y modulares.
<---FILES--->
Sintaxis de la Declaración de Funciones
Sintaxis de la Declaración de Funciones Result
Ejemplo de Declaración de Función
Ejemplo de Declaración de Función Result
Sintaxis de la Definición de Funciones
Sintaxis de la Definición de Funciones Result
Ejemplo de Definición de Función
Ejemplo de Definición de Función Result
Parámetros por Valor
Parámetros por Valor Result
Parámetros por Referencia
Parámetros por Referencia Result
Ejemplo de Sobrecarga de Funciones
Ejemplo de Sobrecarga de Funciones Result
Sintaxis de la Declaración de Funciones
Sintaxis de la Declaración de Funciones Result
Ejemplo de Declaración de Función
Ejemplo de Declaración de Función Result
Sintaxis de la Definición de Funciones
Sintaxis de la Definición de Funciones Result
Ejemplo de Definición de Función
Ejemplo de Definición de Función Result
Parámetros por Valor
Parámetros por Valor Result
Parámetros por Referencia
Parámetros por Referencia Result
Ejemplo de Sobrecarga de Funciones
Ejemplo de Sobrecarga de Funciones Result
Tipos de Parámetros
Tipos de Parámetros Result
Parámetros por Puntero
Parámetros por Puntero Result
Parámetros Predeterminados
Parámetros Predeterminados Result
Ejemplo de Argumentos
Ejemplo de Argumentos Result
Ejemplo con Múltiples Parámetros
Ejemplo con Múltiples Parámetros Result
Ejemplo con Referencia Constante
Ejemplo con Referencia Constante Result
Sintaxis de la Declaración de Funciones
Sintaxis de la Declaración de Funciones Result
Ejemplo de Declaración de Función
Ejemplo de Declaración de Función Result
Sintaxis de la Definición de Funciones
Sintaxis de la Definición de Funciones Result
Ejemplo de Definición de Función
Ejemplo de Definición de Función Result
Parámetros por Valor
Parámetros por Valor Result
Parámetros por Referencia
Parámetros por Referencia Result
Ejemplo de Sobrecarga de Funciones
Ejemplo de Sobrecarga de Funciones Result
Tipos de Parámetros
Tipos de Parámetros Result
Parámetros por Puntero
Parámetros por Puntero Result
Parámetros Predeterminados
Parámetros Predeterminados Result
Ejemplo de Argumentos
Ejemplo de Argumentos Result
Ejemplo con Múltiples Parámetros
Ejemplo con Múltiples Parámetros Result
Ejemplo con Referencia Constante
Ejemplo con Referencia Constante Result
Ejemplo de Pasar Arrays por Puntero
Ejemplo de Pasar Arrays por Puntero Result
Ejemplo de Pasar Arrays por Referencia
Ejemplo de Pasar Arrays por Referencia Result
Ejemplo de Pasar Arrays de Cadenas
Ejemplo de Pasar Arrays de Cadenas Result
Ejemplo de Pasar Arrays Bidimensionales
Ejemplo de Pasar Arrays Bidimensionales Result
<---Sintaxis de la Declaración de Funciones--->
```cpp
tipo_retorno nombre_funcion(lista_de_parametros);
<---Sintaxis de la Declaración de Funciones Result--->
<---Ejemplo de Declaración de Función--->
```cpp
int sumar(int a, int b);
void mostrarMensaje(string mensaje);
<---Ejemplo de Declaración de Función Result--->
<---Sintaxis de la Definición de Funciones--->
```cpp
tipo_retorno nombre_funcion(lista_de_parametros) {
    // Cuerpo de la función
}
<---Sintaxis de la Definición de Funciones Result--->
<---Ejemplo de Definición de Función--->
```cpp
int sumar(int a, int b) {
    return a + b;
}

void mostrarMensaje(string mensaje) {
    cout << mensaje << endl;
}
```cpp
#include <iostream>
using namespace std;

// Declaraciones de funciones
int sumar(int a, int b);
void mostrarMensaje(string mensaje);

int main() {
    int resultado = sumar(5, 3);
    cout << "La suma es: " << resultado << endl;

    mostrarMensaje("Hola, mundo!");

    return 0;
}

// Definiciones de funciones
int sumar(int a, int b) {
    return a + b;
}

void mostrarMensaje(string mensaje) {
    cout << mensaje << endl;
}
<---Ejemplo de Definición de Función Result--->
<---Parámetros por Valor--->
```cpp
void incrementarPorValor(int x) {
    x++;
}

int main() {
    int numero = 5;
    incrementarPorValor(numero);
    cout << "Número después de incrementar por valor: " << numero << endl; // Salida: 5
    return 0;
}
<---Parámetros por Valor Result--->
<---Parámetros por Referencia--->
```cpp
void incrementarPorReferencia(int& x) {
    x++;
}

int main() {
    int numero = 5;
    incrementarPorReferencia(numero);
    cout << "Número después de incrementar por referencia: " << numero << endl; // Salida: 6
    return 0;
}
<---Parámetros por Referencia Result--->
<---Ejemplo de Sobrecarga de Funciones--->
```cpp
#include <iostream>
using namespace std;

int sumar(int a, int b) {
    return a + b;
}

double sumar(double a, double b) {
    return a + b;
}

int main() {
    cout << "Suma de enteros: " << sumar(3, 4) << endl;       // Llama a sumar(int, int)
    cout << "Suma de dobles: " << sumar(3.5, 2.5) << endl;    // Llama a sumar(double, double)
    return 0;
}
<---Ejemplo de Sobrecarga de Funciones Result--->
<---Sintaxis de la Declaración de Funciones--->
```cpp
tipo_retorno nombre_funcion(lista_de_parametros);
<---Sintaxis de la Declaración de Funciones Result--->
<---Ejemplo de Declaración de Función--->
```cpp
int sumar(int a, int b);
void mostrarMensaje(string mensaje);
<---Ejemplo de Declaración de Función Result--->
<---Sintaxis de la Definición de Funciones--->
```cpp
tipo_retorno nombre_funcion(lista_de_parametros) {
    // Cuerpo de la función
}
<---Sintaxis de la Definición de Funciones Result--->
<---Ejemplo de Definición de Función--->
```cpp
int sumar(int a, int b) {
    return a + b;
}

void mostrarMensaje(string mensaje) {
    cout << mensaje << endl;
}
```cpp
#include <iostream>
using namespace std;

// Declaraciones de funciones
int sumar(int a, int b);
void mostrarMensaje(string mensaje);

int main() {
    int resultado = sumar(5, 3);
    cout << "La suma es: " << resultado << endl;

    mostrarMensaje("Hola, mundo!");

    return 0;
}

// Definiciones de funciones
int sumar(int a, int b) {
    return a + b;
}

void mostrarMensaje(string mensaje) {
    cout << mensaje << endl;
}
<---Ejemplo de Definición de Función Result--->
<---Parámetros por Valor--->
```cpp
void incrementarPorValor(int x) {
    x++;
    cout << "Dentro de la función: " << x << endl;
}

int main() {
    int numero = 5;
    incrementarPorValor(numero);
    cout << "Fuera de la función: " << numero << endl; // Salida: 5
    return 0;
}
<---Parámetros por Valor Result--->
<---Parámetros por Referencia--->
```cpp
void incrementarPorReferencia(int& x) {
    x++;
    cout << "Dentro de la función: " << x << endl;
}

int main() {
    int numero = 5;
    incrementarPorReferencia(numero);
    cout << "Fuera de la función: " << numero << endl; // Salida: 6
    return 0;
}
<---Parámetros por Referencia Result--->
<---Ejemplo de Sobrecarga de Funciones--->
```cpp
#include <iostream>
using namespace std;

int sumar(int a, int b) {
    return a + b;
}

double sumar(double a, double b) {
    return a + b;
}

int main() {
    cout << "Suma de enteros: " << sumar(3, 4) << endl;       // Llama a sumar(int, int)
    cout << "Suma de dobles: " << sumar(3.5, 2.5) << endl;    // Llama a sumar(double, double)
    return 0;
}
<---Ejemplo de Sobrecarga de Funciones Result--->
<---Tipos de Parámetros--->
<---Tipos de Parámetros Result--->
<---Parámetros por Puntero--->
```cpp
void incrementarPorPuntero(int* x) {
    (*x)++;
    cout << "Dentro de la función: " << *x << endl;
}

int main() {
    int numero = 5;
    incrementarPorPuntero(&numero);
    cout << "Fuera de la función: " << numero << endl; // Salida: 6
    return 0;
}
<---Parámetros por Puntero Result--->
<---Parámetros Predeterminados--->
```cpp
void saludar(string nombre = "Mundo") {
    cout << "Hola, " << nombre << "!" << endl;
}

int main() {
    saludar(); // Usa el valor predeterminado: Mundo
    saludar("Juan"); // Usa el argumento proporcionado: Juan
    return 0;
}
<---Parámetros Predeterminados Result--->
<---Ejemplo de Argumentos--->
```cpp
int sumar(int a, int b) {
    return a + b;
}

int main() {
    int x = 5;
    int y = 3;
    int resultado = sumar(x, y); // x y y son los argumentos
    cout << "Resultado: " << resultado << endl;
    return 0;
}
<---Ejemplo de Argumentos Result--->
<---Ejemplo con Múltiples Parámetros--->
```cpp
#include <iostream>
using namespace std;

void imprimirDatos(string nombre, int edad, double altura) {
    cout << "Nombre: " << nombre << endl;
    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << " metros" << endl;
}

int main() {
    imprimirDatos("Juan", 30, 1.75);
    return 0;
}
<---Ejemplo con Múltiples Parámetros Result--->
<---Ejemplo con Referencia Constante--->
```cpp
void mostrarMensaje(const string& mensaje) {
    cout << mensaje << endl;
}

int main() {
    string saludo = "Hola, Mundo!";
    mostrarMensaje(saludo);
    return 0;
}
<---Ejemplo con Referencia Constante Result--->
<---Sintaxis de la Declaración de Funciones--->
```cpp
tipo_retorno nombre_funcion(lista_de_parametros);
<---Sintaxis de la Declaración de Funciones Result--->
<---Ejemplo de Declaración de Función--->
```cpp
int sumar(int a, int b);
void mostrarMensaje(string mensaje);
<---Ejemplo de Declaración de Función Result--->
<---Sintaxis de la Definición de Funciones--->
```cpp
tipo_retorno nombre_funcion(lista_de_parametros) {
    // Cuerpo de la función
}
<---Sintaxis de la Definición de Funciones Result--->
<---Ejemplo de Definición de Función--->
```cpp
int sumar(int a, int b) {
    return a + b;
}

void mostrarMensaje(string mensaje) {
    cout << mensaje << endl;
}
```cpp
#include <iostream>
using namespace std;

// Declaraciones de funciones
int sumar(int a, int b);
void mostrarMensaje(string mensaje);

int main() {
    int resultado = sumar(5, 3);
    cout << "La suma es: " << resultado << endl;

    mostrarMensaje("Hola, mundo!");

    return 0;
}

// Definiciones de funciones
int sumar(int a, int b) {
    return a + b;
}

void mostrarMensaje(string mensaje) {
    cout << mensaje << endl;
}
<---Ejemplo de Definición de Función Result--->
<---Parámetros por Valor--->
```cpp
void incrementarPorValor(int x) {
    x++;
    cout << "Dentro de la función: " << x << endl;
}

int main() {
    int numero = 5;
    incrementarPorValor(numero);
    cout << "Fuera de la función: " << numero << endl; // Salida: 5
    return 0;
}
<---Parámetros por Valor Result--->
<---Parámetros por Referencia--->
```cpp
void incrementarPorReferencia(int& x) {
    x++;
    cout << "Dentro de la función: " << x << endl;
}

int main() {
    int numero = 5;
    incrementarPorReferencia(numero);
    cout << "Fuera de la función: " << numero << endl; // Salida: 6
    return 0;
}
<---Parámetros por Referencia Result--->
<---Ejemplo de Sobrecarga de Funciones--->
```cpp
#include <iostream>
using namespace std;

int sumar(int a, int b) {
    return a + b;
}

double sumar(double a, double b) {
    return a + b;
}

int main() {
    cout << "Suma de enteros: " << sumar(3, 4) << endl;       // Llama a sumar(int, int)
    cout << "Suma de dobles: " << sumar(3.5, 2.5) << endl;    // Llama a sumar(double, double)
    return 0;
}
<---Ejemplo de Sobrecarga de Funciones Result--->
<---Tipos de Parámetros--->
<---Tipos de Parámetros Result--->
<---Parámetros por Puntero--->
```cpp
void incrementarPorPuntero(int* x) {
    (*x)++;
    cout << "Dentro de la función: " << *x << endl;
}

int main() {
    int numero = 5;
    incrementarPorPuntero(&numero);
    cout << "Fuera de la función: " << numero << endl; // Salida: 6
    return 0;
}
<---Parámetros por Puntero Result--->
<---Parámetros Predeterminados--->
```cpp
void saludar(string nombre = "Mundo") {
    cout << "Hola, " << nombre << "!" << endl;
}

int main() {
    saludar(); // Usa el valor predeterminado: Mundo
    saludar("Juan"); // Usa el argumento proporcionado: Juan
    return 0;
}
<---Parámetros Predeterminados Result--->
<---Ejemplo de Argumentos--->
```cpp
int sumar(int a, int b) {
    return a + b;
}

int main() {
    int x = 5;
    int y = 3;
    int resultado = sumar(x, y); // x y y son los argumentos
    cout << "Resultado: " << resultado << endl;
    return 0;
}
<---Ejemplo de Argumentos Result--->
<---Ejemplo con Múltiples Parámetros--->
```cpp
#include <iostream>
using namespace std;

void imprimirDatos(string nombre, int edad, double altura) {
    cout << "Nombre: " << nombre << endl;
    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << " metros" << endl;
}

int main() {
    imprimirDatos("Juan", 30, 1.75);
    return 0;
}
<---Ejemplo con Múltiples Parámetros Result--->
<---Ejemplo con Referencia Constante--->
```cpp
void mostrarMensaje(const string& mensaje) {
    cout << mensaje << endl;
}

int main() {
    string saludo = "Hola, Mundo!";
    mostrarMensaje(saludo);
    return 0;
}
<---Ejemplo con Referencia Constante Result--->
<---Ejemplo de Pasar Arrays por Puntero--->
```cpp
#include <iostream>
using namespace std;

void imprimirArray(int* arr, int tam) {
    for (int i = 0; i < tam; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int numeros[] = {1, 2, 3, 4, 5};
    int tam = sizeof(numeros) / sizeof(numeros[0]);

    imprimirArray(numeros, tam); // Pasar array a la función

    return 0;
}
<---Ejemplo de Pasar Arrays por Puntero Result--->
<---Ejemplo de Pasar Arrays por Referencia--->
```cpp
#include <iostream>
using namespace std;

template<size_t N>
void imprimirArrayPorReferencia(int (&arr)[N]) {
    for (int i = 0; i < N; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int numeros[] = {1, 2, 3, 4, 5};

    imprimirArrayPorReferencia(numeros); // Pasar array a la función por referencia

    return 0;
}
<---Ejemplo de Pasar Arrays por Referencia Result--->
<---Ejemplo de Pasar Arrays de Cadenas--->
```cpp
#include <iostream>
using namespace std;

void imprimirCadenas(const char* cadenas[], int tam) {
    for (int i = 0; i < tam; ++i) {
        cout << cadenas[i] << endl;
    }
}

int main() {
    const char* frutas[] = {"Manzana", "Banana", "Cereza", "Dátil"};

    int tam = sizeof(frutas) / sizeof(frutas[0]);
    imprimirCadenas(frutas, tam); // Pasar array de cadenas a la función

    return 0;
}
<---Ejemplo de Pasar Arrays de Cadenas Result--->
<---Ejemplo de Pasar Arrays Bidimensionales--->
```cpp
#include <iostream>
using namespace std;

void imprimirMatriz(int matriz[][3], int filas) {
    for (int i = 0; i < filas; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << matriz[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int matriz[2][3] = {
        {1, 2, 3},
        {4, 5, 6}
    };

    imprimirMatriz(matriz, 2); // Pasar array bidimensional a la función

    return 0;
}
```cpp
#include <iostream>
using namespace std;

// Pasar array por puntero
void imprimirArray(const int* arr, int tam) {
    for (int i = 0; i < tam; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Pasar array por referencia
template<size_t N>
void imprimirArrayPorReferencia(const int (&arr)[N]) {
    for (int i = 0; i < N; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Pasar array de cadenas
void imprimirCadenas(const char* cadenas[], int tam) {
    for (int i = 0; i < tam; ++i) {
        cout << cadenas[i] << endl;
    }
}

// Pasar array bidimensional
void imprimirMatriz(int matriz[][3], int filas) {
    for (int i = 0; i < filas; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << matriz[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    // Array unidimensional
    int numeros[] = {1, 2, 3, 4, 5};
    int tam = sizeof(numeros) / sizeof(numeros[0]);

    imprimirArray(numeros, tam);
    imprimirArrayPorReferencia(numeros);

    // Array de cadenas
    const char* frutas[] = {"Manzana", "Banana", "Cereza", "Dátil"};
    int tamFrutas = sizeof(frutas) / sizeof(frutas[0]);

    imprimirCadenas(frutas, tamFrutas);

    // Array bidimensional
    int matriz[2][3] = {
        {1, 2, 3},
        {4, 5, 6}
    };

    imprimirMatriz(matriz, 2);

    return 0;
}
<---Ejemplo de Pasar Arrays Bidimensionales Result--->
