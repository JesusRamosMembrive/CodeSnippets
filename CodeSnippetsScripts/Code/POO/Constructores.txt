<---EXPLANATION--->
### Programación Orientada a Objetos en C++: Clases y Objetos

La programación orientada a objetos (POO) es un paradigma de programación que utiliza "objetos" y sus interacciones para diseñar aplicaciones y programas. En C++, la POO es una característica central que permite organizar y estructurar el código de manera modular y reutilizable. Los dos conceptos fundamentales en la POO son las clases y los objetos.

#### Clases

Una clase en C++ es una plantilla o un molde que define los atributos y comportamientos de los objetos que se crean a partir de ella. Los atributos son variables que mantienen el estado del objeto, mientras que los comportamientos son funciones o métodos que definen lo que el objeto puede hacer.

##### Definición de una Clase

La sintaxis básica para definir una clase en C++ es la siguiente:

```cpp
class NombreClase {
public:
    // Atributos
    tipo_atributo nombre_atributo;

    // Métodos
    tipo_retorno nombre_metodo(parametros);

    // Otros componentes, como constructores, destructores, etc.
};
```

##### Ejemplo Básico de una Clase

```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    // Atributos
    string nombre;
    int edad;

    // Métodos
    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    // Crear un objeto de la clase Persona
    Persona juan;
    juan.nombre = "Juan";
    juan.edad = 30;

    // Llamar al método saludar
    juan.saludar();

    return 0;
}
```

En este ejemplo:
- `Persona` es una clase que tiene dos atributos (`nombre` y `edad`) y un método (`saludar`).
- `juan` es un objeto de la clase `Persona`.

#### Objetos

Un objeto es una instancia de una clase. Cada objeto tiene su propio estado (valores de los atributos) y puede usar los métodos definidos en la clase.

##### Creación de Objetos

Los objetos se crean declarando una variable del tipo de la clase:

```cpp
NombreClase nombre_objeto;
```

##### Ejemplo de Creación y Uso de Objetos

```cpp
#include <iostream>
using namespace std;

class Coche {
public:
    // Atributos
    string marca;
    string modelo;
    int anio;

    // Métodos
    void mostrarInformacion() {
        cout << "Marca: " << marca << ", Modelo: " << modelo << ", Año: " << anio << endl;
    }
};

int main() {
    // Crear objetos de la clase Coche
    Coche coche1;
    coche1.marca = "Toyota";
    coche1.modelo = "Corolla";
    coche1.anio = 2020;

    Coche coche2;
    coche2.marca = "Honda";
    coche2.modelo = "Civic";
    coche2.anio = 2019;

    // Llamar a los métodos de los objetos
    coche1.mostrarInformacion();
    coche2.mostrarInformacion();

    return 0;
}
```

En este ejemplo, `Coche` es una clase que define tres atributos y un método. Se crean dos objetos (`coche1` y `coche2`) y se llama al método `mostrarInformacion` para cada objeto.

#### Constructores y Destructores

Los constructores y destructores son funciones especiales que se utilizan para inicializar y limpiar objetos, respectivamente.

##### Constructores

Un constructor es una función que se llama automáticamente cuando se crea un objeto. Se utiliza para inicializar los atributos del objeto.

```cpp
class Persona {
public:
    string nombre;
    int edad;

    // Constructor
    Persona(string n, int e) {
        nombre = n;
        edad = e;
    }

    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    // Crear un objeto de la clase Persona utilizando el constructor
    Persona juan("Juan", 30);
    juan.saludar();

    return 0;
}
```

##### Destructores

Un destructor es una función que se llama automáticamente cuando un objeto es destruido. Se utiliza para liberar recursos que el objeto haya adquirido durante su vida.

```cpp
class Persona {
public:
    string nombre;
    int edad;

    // Constructor
    Persona(string n, int e) {
        nombre = n;
        edad = e;
    }

    // Destructor
    ~Persona() {
        cout << "Destructor llamado para " << nombre << endl;
    }

    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    // Crear un objeto de la clase Persona
    Persona juan("Juan", 30);
    juan.saludar();

    // El destructor se llamará automáticamente al final del alcance
    return 0;
}
```

#### Encapsulación

La encapsulación es un principio de la POO que restringe el acceso directo a los atributos de una clase. En lugar de eso, se proporcionan métodos públicos para acceder y modificar estos atributos.

##### Modificadores de Acceso

- **`public`:** Los miembros son accesibles desde cualquier parte del programa.
- **`private`:** Los miembros solo son accesibles desde dentro de la propia clase.
- **`protected`:** Los miembros son accesibles desde dentro de la clase y las clases derivadas.

```cpp
class Persona {
private:
    string nombre;
    int edad;

public:
    // Constructor
    Persona(string n, int e) : nombre(n), edad(e) {}

    // Métodos para acceder y modificar los atributos
    string getNombre() {
        return nombre;
    }

    void setNombre(string n) {
        nombre = n;
    }

    int getEdad() {
        return edad;
    }

    void setEdad(int e) {
        edad = e;
    }

    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    Persona juan("Juan", 30);
    juan.saludar();

    juan.setEdad(31);
    cout << "Nueva edad de " << juan.getNombre() << ": " << juan.getEdad() << endl;

    return 0;
}
```

En este ejemplo, los atributos `nombre` y `edad` son privados, y se proporcionan métodos públicos para acceder y modificarlos.

### Conclusión

Las clases y objetos son los pilares de la programación orientada a objetos en C++. Las clases permiten definir plantillas para crear objetos, encapsulando datos y comportamientos relacionados. Los objetos son instancias de estas clases, y mediante el uso de constructores, destructores y modificadores de acceso, podemos gestionar y proteger eficazmente los datos dentro de nuestros programas. Con un entendimiento sólido de estos conceptos, los desarrolladores pueden crear aplicaciones más organizadas, modulares y mantenibles.
### Constructores en C++

Los constructores son funciones especiales de las clases en C++ que se utilizan para inicializar objetos. Un constructor tiene el mismo nombre que la clase y no tiene tipo de retorno, ni siquiera `void`. Los constructores pueden sobrecargarse, lo que significa que una clase puede tener más de un constructor con diferentes listas de parámetros.

#### Tipos de Constructores

1. **Constructor por Defecto**
2. **Constructor Parametrizado**
3. **Constructor de Copia**
4. **Constructor de Movimiento** (Introducido en C++11)

#### Constructor por Defecto

El constructor por defecto es un constructor que se llama automáticamente cuando se crea un objeto sin pasar argumentos. Si no se define explícitamente un constructor por defecto, el compilador genera uno implícitamente.

##### Ejemplo de Constructor por Defecto

```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    string nombre;
    int edad;

    // Constructor por defecto
    Persona() {
        nombre = "Desconocido";
        edad = 0;
    }

    void mostrarInformacion() {
        cout << "Nombre: " << nombre << ", Edad: " << edad << endl;
    }
};

int main() {
    Persona p;  // Llama al constructor por defecto
    p.mostrarInformacion();

    return 0;
}
```

En este ejemplo, el constructor por defecto inicializa `nombre` a "Desconocido" y `edad` a 0.

#### Constructor Parametrizado

Un constructor parametrizado permite inicializar un objeto con valores específicos al momento de su creación.

##### Ejemplo de Constructor Parametrizado

```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    string nombre;
    int edad;

    // Constructor parametrizado
    Persona(string n, int e) {
        nombre = n;
        edad = e;
    }

    void mostrarInformacion() {
        cout << "Nombre: " << nombre << ", Edad: " << edad << endl;
    }
};

int main() {
    Persona p("Juan", 30);  // Llama al constructor parametrizado
    p.mostrarInformacion();

    return 0;
}
```

En este ejemplo, el constructor parametrizado inicializa `nombre` y `edad` con los valores proporcionados.

#### Constructor de Copia

El constructor de copia se utiliza para crear un nuevo objeto como copia de un objeto existente. Se define tomando una referencia constante al objeto de la misma clase.

##### Ejemplo de Constructor de Copia

```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    string nombre;
    int edad;

    // Constructor parametrizado
    Persona(string n, int e) {
        nombre = n;
        edad = e;
    }

    // Constructor de copia
    Persona(const Persona& p) {
        nombre = p.nombre;
        edad = p.edad;
    }

    void mostrarInformacion() {
        cout << "Nombre: " << nombre << ", Edad: " << edad << endl;
    }
};

int main() {
    Persona p1("Juan", 30);  // Llama al constructor parametrizado
    Persona p2 = p1;         // Llama al constructor de copia
    p2.mostrarInformacion();

    return 0;
}
```

En este ejemplo, el constructor de copia crea un nuevo objeto `p2` como una copia de `p1`.

#### Constructor de Movimiento (Introducido en C++11)

El constructor de movimiento se utiliza para transferir los recursos de un objeto a otro, evitando copias innecesarias. Se define tomando un rvalue reference al objeto de la misma clase.

##### Ejemplo de Constructor de Movimiento

```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    string nombre;
    int edad;

    // Constructor parametrizado
    Persona(string n, int e) : nombre(n), edad(e) {}

    // Constructor de movimiento
    Persona(Persona&& p) noexcept : nombre(move(p.nombre)), edad(p.edad) {
        p.edad = 0; // Opcional: Dejar el objeto fuente en un estado válido
    }

    void mostrarInformacion() {
        cout << "Nombre: " << nombre << ", Edad: " << edad << endl;
    }
};

int main() {
    Persona p1("Juan", 30);  // Llama al constructor parametrizado
    Persona p2 = move(p1);   // Llama al constructor de movimiento
    p2.mostrarInformacion();

    // p1 está en un estado indefinido, pero válido
    cout << "Después de mover, p1: ";
    p1.mostrarInformacion();

    return 0;
}
```

En este ejemplo, el constructor de movimiento transfiere los recursos de `p1` a `p2`, evitando una copia completa.

#### Inicialización de Miembros (Lista de Inicialización)

Es una buena práctica inicializar los miembros de la clase en la lista de inicialización del constructor, especialmente para miembros constantes y referencias.

##### Ejemplo con Lista de Inicialización

```cpp
#include <iostream>
using namespace std;

class Punto {
public:
    const int x;
    const int y;

    // Constructor con lista de inicialización
    Punto(int a, int b) : x(a), y(b) {}

    void mostrarInformacion() {
        cout << "Punto(" << x << ", " << y << ")" << endl;
    }
};

int main() {
    Punto p(10, 20);  // Llama al constructor con lista de inicialización
    p.mostrarInformacion();

    return 0;
}
```

En este ejemplo, los miembros `x` y `y` se inicializan en la lista de inicialización del constructor.

#### Constructores Predeterminados por el Compilador

Si no se definen constructores, el compilador proporciona un constructor por defecto, un constructor de copia y un operador de asignación de copia. Estos constructores realizan inicializaciones y copias miembro a miembro.

### Ejemplo Completo con Diferentes Constructores

```cpp
#include <iostream>
using namespace std;

class Persona {
private:
    string nombre;
    int edad;

public:
    // Constructor por defecto
    Persona() : nombre("Desconocido"), edad(0) {}

    // Constructor parametrizado
    Persona(string n, int e) : nombre(n), edad(e) {}

    // Constructor de copia
    Persona(const Persona& p) : nombre(p.nombre), edad(p.edad) {}

    // Constructor de movimiento
    Persona(Persona&& p) noexcept : nombre(move(p.nombre)), edad(p.edad) {
        p.edad = 0;
    }

    void mostrarInformacion() {
        cout << "Nombre: " << nombre << ", Edad: " << edad << endl;
    }
};

int main() {
    // Usando el constructor por defecto
    Persona p1;
    p1.mostrarInformacion();

    // Usando el constructor parametrizado
    Persona p2("Juan", 30);
    p2.mostrarInformacion();

    // Usando el constructor de copia
    Persona p3 = p2;
    p3.mostrarInformacion();

    // Usando el constructor de movimiento
    Persona p4 = move(p2);
    p4.mostrarInformacion();

    // Estado después del movimiento
    cout << "Después de mover, p2: ";
    p2.mostrarInformacion();

    return 0;
}
```

En este ejemplo, la clase `Persona` define todos los tipos principales de constructores, y el programa demuestra cómo usarlos.

### Conclusión

Los constructores son fundamentales para la inicialización de objetos en C++. La capacidad de definir diferentes tipos de constructores (por defecto, parametrizados, de copia y de movimiento) proporciona flexibilidad y control sobre cómo se crean e inicializan los objetos. Utilizar correctamente estos constructores puede mejorar la eficiencia y la robustez del código, asegurando que los objetos se encuentren en estados válidos desde su creación.
<---FILES--->
Definición de una Clase
Definición de una Clase Result
Ejemplo Básico de una Clase
Ejemplo Básico de una Clase Result
Creación de Objetos
Creación de Objetos Result
Ejemplo de Creación y Uso de Objetos
Ejemplo de Creación y Uso de Objetos Result
Constructores
Constructores Result
Destructores
Destructores Result
Modificadores de Acceso
Modificadores de Acceso Result
Definición de una Clase
Definición de una Clase Result
Ejemplo Básico de una Clase
Ejemplo Básico de una Clase Result
Creación de Objetos
Creación de Objetos Result
Ejemplo de Creación y Uso de Objetos
Ejemplo de Creación y Uso de Objetos Result
Constructores
Constructores Result
Destructores
Destructores Result
Modificadores de Acceso
Modificadores de Acceso Result
Ejemplo de Constructor por Defecto
Ejemplo de Constructor por Defecto Result
Ejemplo de Constructor Parametrizado
Ejemplo de Constructor Parametrizado Result
Ejemplo de Constructor de Copia
Ejemplo de Constructor de Copia Result
Ejemplo de Constructor de Movimiento
Ejemplo de Constructor de Movimiento Result
Ejemplo con Lista de Inicialización
Ejemplo con Lista de Inicialización Result
<---Definición de una Clase--->
```cpp
class NombreClase {
public:
    // Atributos
    tipo_atributo nombre_atributo;

    // Métodos
    tipo_retorno nombre_metodo(parametros);

    // Otros componentes, como constructores, destructores, etc.
};
<---Definición de una Clase Result--->
<---Ejemplo Básico de una Clase--->
```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    // Atributos
    string nombre;
    int edad;

    // Métodos
    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    // Crear un objeto de la clase Persona
    Persona juan;
    juan.nombre = "Juan";
    juan.edad = 30;

    // Llamar al método saludar
    juan.saludar();

    return 0;
}
<---Ejemplo Básico de una Clase Result--->
<---Creación de Objetos--->
```cpp
NombreClase nombre_objeto;
<---Creación de Objetos Result--->
<---Ejemplo de Creación y Uso de Objetos--->
```cpp
#include <iostream>
using namespace std;

class Coche {
public:
    // Atributos
    string marca;
    string modelo;
    int anio;

    // Métodos
    void mostrarInformacion() {
        cout << "Marca: " << marca << ", Modelo: " << modelo << ", Año: " << anio << endl;
    }
};

int main() {
    // Crear objetos de la clase Coche
    Coche coche1;
    coche1.marca = "Toyota";
    coche1.modelo = "Corolla";
    coche1.anio = 2020;

    Coche coche2;
    coche2.marca = "Honda";
    coche2.modelo = "Civic";
    coche2.anio = 2019;

    // Llamar a los métodos de los objetos
    coche1.mostrarInformacion();
    coche2.mostrarInformacion();

    return 0;
}
<---Ejemplo de Creación y Uso de Objetos Result--->
<---Constructores--->
```cpp
class Persona {
public:
    string nombre;
    int edad;

    // Constructor
    Persona(string n, int e) {
        nombre = n;
        edad = e;
    }

    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    // Crear un objeto de la clase Persona utilizando el constructor
    Persona juan("Juan", 30);
    juan.saludar();

    return 0;
}
<---Constructores Result--->
<---Destructores--->
```cpp
class Persona {
public:
    string nombre;
    int edad;

    // Constructor
    Persona(string n, int e) {
        nombre = n;
        edad = e;
    }

    // Destructor
    ~Persona() {
        cout << "Destructor llamado para " << nombre << endl;
    }

    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    // Crear un objeto de la clase Persona
    Persona juan("Juan", 30);
    juan.saludar();

    // El destructor se llamará automáticamente al final del alcance
    return 0;
}
<---Destructores Result--->
<---Modificadores de Acceso--->
```cpp
class Persona {
private:
    string nombre;
    int edad;

public:
    // Constructor
    Persona(string n, int e) : nombre(n), edad(e) {}

    // Métodos para acceder y modificar los atributos
    string getNombre() {
        return nombre;
    }

    void setNombre(string n) {
        nombre = n;
    }

    int getEdad() {
        return edad;
    }

    void setEdad(int e) {
        edad = e;
    }

    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    Persona juan("Juan", 30);
    juan.saludar();

    juan.setEdad(31);
    cout << "Nueva edad de " << juan.getNombre() << ": " << juan.getEdad() << endl;

    return 0;
}
<---Modificadores de Acceso Result--->
<---Definición de una Clase--->
```cpp
class NombreClase {
public:
    // Atributos
    tipo_atributo nombre_atributo;

    // Métodos
    tipo_retorno nombre_metodo(parametros);

    // Otros componentes, como constructores, destructores, etc.
};
<---Definición de una Clase Result--->
<---Ejemplo Básico de una Clase--->
```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    // Atributos
    string nombre;
    int edad;

    // Métodos
    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    // Crear un objeto de la clase Persona
    Persona juan;
    juan.nombre = "Juan";
    juan.edad = 30;

    // Llamar al método saludar
    juan.saludar();

    return 0;
}
<---Ejemplo Básico de una Clase Result--->
<---Creación de Objetos--->
```cpp
NombreClase nombre_objeto;
<---Creación de Objetos Result--->
<---Ejemplo de Creación y Uso de Objetos--->
```cpp
#include <iostream>
using namespace std;

class Coche {
public:
    // Atributos
    string marca;
    string modelo;
    int anio;

    // Métodos
    void mostrarInformacion() {
        cout << "Marca: " << marca << ", Modelo: " << modelo << ", Año: " << anio << endl;
    }
};

int main() {
    // Crear objetos de la clase Coche
    Coche coche1;
    coche1.marca = "Toyota";
    coche1.modelo = "Corolla";
    coche1.anio = 2020;

    Coche coche2;
    coche2.marca = "Honda";
    coche2.modelo = "Civic";
    coche2.anio = 2019;

    // Llamar a los métodos de los objetos
    coche1.mostrarInformacion();
    coche2.mostrarInformacion();

    return 0;
}
<---Ejemplo de Creación y Uso de Objetos Result--->
<---Constructores--->
```cpp
class Persona {
public:
    string nombre;
    int edad;

    // Constructor
    Persona(string n, int e) {
        nombre = n;
        edad = e;
    }

    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    // Crear un objeto de la clase Persona utilizando el constructor
    Persona juan("Juan", 30);
    juan.saludar();

    return 0;
}
<---Constructores Result--->
<---Destructores--->
```cpp
class Persona {
public:
    string nombre;
    int edad;

    // Constructor
    Persona(string n, int e) {
        nombre = n;
        edad = e;
    }

    // Destructor
    ~Persona() {
        cout << "Destructor llamado para " << nombre << endl;
    }

    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    // Crear un objeto de la clase Persona
    Persona juan("Juan", 30);
    juan.saludar();

    // El destructor se llamará automáticamente al final del alcance
    return 0;
}
<---Destructores Result--->
<---Modificadores de Acceso--->
```cpp
class Persona {
private:
    string nombre;
    int edad;

public:
    // Constructor
    Persona(string n, int e) : nombre(n), edad(e) {}

    // Métodos para acceder y modificar los atributos
    string getNombre() {
        return nombre;
    }

    void setNombre(string n) {
        nombre = n;
    }

    int getEdad() {
        return edad;
    }

    void setEdad(int e) {
        edad = e;
    }

    void saludar() {
        cout << "Hola, mi nombre es " << nombre << " y tengo " << edad << " años." << endl;
    }
};

int main() {
    Persona juan("Juan", 30);
    juan.saludar();

    juan.setEdad(31);
    cout << "Nueva edad de " << juan.getNombre() << ": " << juan.getEdad() << endl;

    return 0;
}
<---Modificadores de Acceso Result--->
<---Ejemplo de Constructor por Defecto--->
```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    string nombre;
    int edad;

    // Constructor por defecto
    Persona() {
        nombre = "Desconocido";
        edad = 0;
    }

    void mostrarInformacion() {
        cout << "Nombre: " << nombre << ", Edad: " << edad << endl;
    }
};

int main() {
    Persona p;  // Llama al constructor por defecto
    p.mostrarInformacion();

    return 0;
}
<---Ejemplo de Constructor por Defecto Result--->
<---Ejemplo de Constructor Parametrizado--->
```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    string nombre;
    int edad;

    // Constructor parametrizado
    Persona(string n, int e) {
        nombre = n;
        edad = e;
    }

    void mostrarInformacion() {
        cout << "Nombre: " << nombre << ", Edad: " << edad << endl;
    }
};

int main() {
    Persona p("Juan", 30);  // Llama al constructor parametrizado
    p.mostrarInformacion();

    return 0;
}
<---Ejemplo de Constructor Parametrizado Result--->
<---Ejemplo de Constructor de Copia--->
```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    string nombre;
    int edad;

    // Constructor parametrizado
    Persona(string n, int e) {
        nombre = n;
        edad = e;
    }

    // Constructor de copia
    Persona(const Persona& p) {
        nombre = p.nombre;
        edad = p.edad;
    }

    void mostrarInformacion() {
        cout << "Nombre: " << nombre << ", Edad: " << edad << endl;
    }
};

int main() {
    Persona p1("Juan", 30);  // Llama al constructor parametrizado
    Persona p2 = p1;         // Llama al constructor de copia
    p2.mostrarInformacion();

    return 0;
}
<---Ejemplo de Constructor de Copia Result--->
<---Ejemplo de Constructor de Movimiento--->
```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    string nombre;
    int edad;

    // Constructor parametrizado
    Persona(string n, int e) : nombre(n), edad(e) {}

    // Constructor de movimiento
    Persona(Persona&& p) noexcept : nombre(move(p.nombre)), edad(p.edad) {
        p.edad = 0; // Opcional: Dejar el objeto fuente en un estado válido
    }

    void mostrarInformacion() {
        cout << "Nombre: " << nombre << ", Edad: " << edad << endl;
    }
};

int main() {
    Persona p1("Juan", 30);  // Llama al constructor parametrizado
    Persona p2 = move(p1);   // Llama al constructor de movimiento
    p2.mostrarInformacion();

    // p1 está en un estado indefinido, pero válido
    cout << "Después de mover, p1: ";
    p1.mostrarInformacion();

    return 0;
}
<---Ejemplo de Constructor de Movimiento Result--->
<---Ejemplo con Lista de Inicialización--->
```cpp
#include <iostream>
using namespace std;

class Punto {
public:
    const int x;
    const int y;

    // Constructor con lista de inicialización
    Punto(int a, int b) : x(a), y(b) {}

    void mostrarInformacion() {
        cout << "Punto(" << x << ", " << y << ")" << endl;
    }
};

int main() {
    Punto p(10, 20);  // Llama al constructor con lista de inicialización
    p.mostrarInformacion();

    return 0;
}
```cpp
#include <iostream>
using namespace std;

class Persona {
private:
    string nombre;
    int edad;

public:
    // Constructor por defecto
    Persona() : nombre("Desconocido"), edad(0) {}

    // Constructor parametrizado
    Persona(string n, int e) : nombre(n), edad(e) {}

    // Constructor de copia
    Persona(const Persona& p) : nombre(p.nombre), edad(p.edad) {}

    // Constructor de movimiento
    Persona(Persona&& p) noexcept : nombre(move(p.nombre)), edad(p.edad) {
        p.edad = 0;
    }

    void mostrarInformacion() {
        cout << "Nombre: " << nombre << ", Edad: " << edad << endl;
    }
};

int main() {
    // Usando el constructor por defecto
    Persona p1;
    p1.mostrarInformacion();

    // Usando el constructor parametrizado
    Persona p2("Juan", 30);
    p2.mostrarInformacion();

    // Usando el constructor de copia
    Persona p3 = p2;
    p3.mostrarInformacion();

    // Usando el constructor de movimiento
    Persona p4 = move(p2);
    p4.mostrarInformacion();

    // Estado después del movimiento
    cout << "Después de mover, p2: ";
    p2.mostrarInformacion();

    return 0;
}
<---Ejemplo con Lista de Inicialización Result--->
