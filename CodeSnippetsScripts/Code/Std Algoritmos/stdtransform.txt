<---EXPLANATION--->
### Algoritmo de la Biblioteca Estándar: `std::transform`

La función `std::transform` es un algoritmo de la biblioteca estándar de C++ que se utiliza para aplicar una operación a un rango de elementos y almacenar los resultados en otro rango (o el mismo). Es parte del encabezado `<algorithm>` y es muy útil para transformar elementos de contenedores mediante la aplicación de una función.

#### Sintaxis de `std::transform`

Hay dos variantes de `std::transform`:

1. Aplicar una función unaria a cada elemento de un rango:

```cpp
#include <algorithm>

template <class InputIt, class OutputIt, class UnaryOperation>
OutputIt transform(InputIt first, InputIt last, OutputIt d_first, UnaryOperation unary_op);
```

- **`InputIt first`**: Iterador al primer elemento del rango de entrada.
- **`InputIt last`**: Iterador al elemento después del último en el rango de entrada.
- **`OutputIt d_first`**: Iterador al primer elemento del rango de destino.
- **`UnaryOperation unary_op`**: Función o función objeto que se aplicará a cada elemento del rango de entrada.

2. Aplicar una función binaria a cada par de elementos de dos rangos:

```cpp
#include <algorithm>

template <class InputIt1, class InputIt2, class OutputIt, class BinaryOperation>
OutputIt transform(InputIt1 first1, InputIt1 last1, InputIt2 first2, OutputIt d_first, BinaryOperation binary_op);
```

- **`InputIt1 first1`**: Iterador al primer elemento del primer rango de entrada.
- **`InputIt1 last1`**: Iterador al elemento después del último en el primer rango de entrada.
- **`InputIt2 first2`**: Iterador al primer elemento del segundo rango de entrada.
- **`OutputIt d_first`**: Iterador al primer elemento del rango de destino.
- **`BinaryOperation binary_op`**: Función o función objeto que se aplicará a cada par de elementos de los dos rangos de entrada.

#### Ejemplo de Uso de `std::transform`

##### Ejemplo Básico (Función Unaria)

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> origen = {1, 2, 3, 4, 5};
    std::vector<int> destino(origen.size());

    // Usar std::transform para duplicar cada elemento
    std::transform(origen.begin(), origen.end(), destino.begin(), [](int x) {
        return x * 2;
    });

    // Mostrar los elementos transformados
    std::cout << "Elementos transformados (duplicados): ";
    for (int elem : destino) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::transform(origen.begin(), origen.end(), destino.begin(), [](int x) { return x * 2; })` aplica una lambda que duplica cada elemento del vector `origen` y almacena los resultados en el vector `destino`.

##### Ejemplo con Función Binaria

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec1 = {1, 2, 3, 4, 5};
    std::vector<int> vec2 = {10, 20, 30, 40, 50};
    std::vector<int> resultado(vec1.size());

    // Usar std::transform para sumar elementos de dos vectores
    std::transform(vec1.begin(), vec1.end(), vec2.begin(), resultado.begin(), [](int x, int y) {
        return x + y;
    });

    // Mostrar los elementos transformados
    std::cout << "Elementos transformados (suma de vec1 y vec2): ";
    for (int elem : resultado) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::transform(vec1.begin(), vec1.end(), vec2.begin(), resultado.begin(), [](int x, int y) { return x + y; })` aplica una lambda que suma los elementos correspondientes de `vec1` y `vec2`, almacenando los resultados en `resultado`.

### Uso con Diferentes Tipos de Contenedores

`std::transform` se puede usar con cualquier contenedor que soporte iteradores, como `std::vector`, `std::list`, `std::array`, etc.

##### Transformar una Lista

```cpp
#include <iostream>
#include <list>
#include <algorithm>

int main() {
    std::list<int> origen = {1, 2, 3, 4, 5};
    std::list<int> destino(origen.size());

    // Usar std::transform para incrementar cada elemento
    std::transform(origen.begin(), origen.end(), destino.begin(), [](int x) {
        return x + 1;
    });

    // Mostrar los elementos transformados
    std::cout << "Elementos transformados (incrementados): ";
    for (int elem : destino) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::transform` se usa para incrementar cada elemento de una lista.

### Consideraciones

- **Rendimiento:** `std::transform` es muy eficiente y tiene un rendimiento lineal (`O(n)`) respecto al número de elementos.
- **Flexibilidad:** Puede usar funciones, funtores y lambdas para definir las transformaciones.
- **Requisito de Espacio:** El rango de destino debe ser lo suficientemente grande para contener todos los elementos transformados.

### Conclusión

`std::transform` es un algoritmo de la biblioteca estándar de C++ muy útil para aplicar operaciones a los elementos de un contenedor y almacenar los resultados en otro. Su uso con funciones, funtores y lambdas proporciona una gran flexibilidad y permite escribir código conciso y claro. Comprender y utilizar `std::transform` es esencial para realizar transformaciones eficientes en datos en C++.
<---FILES--->
Ejemplo Básico (Función Unaria)
Ejemplo Básico (Función Unaria) Result
Ejemplo con Función Binaria
Ejemplo con Función Binaria Result
Transformar una Lista
Transformar una Lista Result
<---Ejemplo Básico (Función Unaria)--->
```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> origen = {1, 2, 3, 4, 5};
    std::vector<int> destino(origen.size());

    // Usar std::transform para duplicar cada elemento
    std::transform(origen.begin(), origen.end(), destino.begin(), [](int x) {
        return x * 2;
    });

    // Mostrar los elementos transformados
    std::cout << "Elementos transformados (duplicados): ";
    for (int elem : destino) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo Básico (Función Unaria) Result--->
<---Ejemplo con Función Binaria--->
```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec1 = {1, 2, 3, 4, 5};
    std::vector<int> vec2 = {10, 20, 30, 40, 50};
    std::vector<int> resultado(vec1.size());

    // Usar std::transform para sumar elementos de dos vectores
    std::transform(vec1.begin(), vec1.end(), vec2.begin(), resultado.begin(), [](int x, int y) {
        return x + y;
    });

    // Mostrar los elementos transformados
    std::cout << "Elementos transformados (suma de vec1 y vec2): ";
    for (int elem : resultado) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo con Función Binaria Result--->
<---Transformar una Lista--->
```cpp
#include <iostream>
#include <list>
#include <algorithm>

int main() {
    std::list<int> origen = {1, 2, 3, 4, 5};
    std::list<int> destino(origen.size());

    // Usar std::transform para incrementar cada elemento
    std::transform(origen.begin(), origen.end(), destino.begin(), [](int x) {
        return x + 1;
    });

    // Mostrar los elementos transformados
    std::cout << "Elementos transformados (incrementados): ";
    for (int elem : destino) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Transformar una Lista Result--->
