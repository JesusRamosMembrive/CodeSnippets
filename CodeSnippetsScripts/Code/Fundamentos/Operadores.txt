<---EXPLANATION--->
### Tipos de Datos Básicos (Datos Primitivos) en C++

Los tipos de datos básicos, también conocidos como datos primitivos, son los bloques fundamentales que se utilizan para almacenar datos en un programa. C++ proporciona varios tipos de datos básicos para manejar diferentes tipos de información.

#### 1. **Enteros (`int`)**
El tipo de dato `int` se utiliza para almacenar números enteros. Su tamaño suele ser de 4 bytes, lo que permite almacenar valores en el rango de aproximadamente -2,147,483,648 a 2,147,483,647.

```cpp
int numero = 42;
```

#### 2. **Caracteres (`char`)**
El tipo `char` se utiliza para almacenar un solo carácter. Su tamaño es de 1 byte, permitiendo representar caracteres individuales como letras, números y símbolos.

```cpp
char letra = 'A';
```

#### 3. **Booleanos (`bool`)**
El tipo `bool` almacena valores booleanos, que pueden ser `true` o `false`. Se utiliza para representar condiciones y resultados lógicos.

```cpp
bool esVerdadero = true;
```

#### 4. **Flotantes (`float` y `double`)**
Los tipos `float` y `double` se utilizan para almacenar números en punto flotante (números con decimales). `float` ocupa 4 bytes y `double` ocupa 8 bytes, ofreciendo mayor precisión.

```cpp
float numeroDecimal = 3.14f;
double numeroGrande = 2.718281828459;
```

#### 5. **Enteros Modificados (`short`, `long`, `long long`)**
C++ permite modificar los enteros para manejar diferentes rangos y tamaños. `short` es un entero corto, `long` es un entero largo, y `long long` es un entero aún más largo.

```cpp
short corto = 32767;         // Generalmente 2 bytes
long largo = 2147483647;     // Generalmente 4 bytes
long long muyLargo = 9223372036854775807LL; // Generalmente 8 bytes
```

#### 6. **Tipos Sin Signo (`unsigned`)**
Los tipos sin signo (`unsigned`) se utilizan para almacenar solo números positivos, duplicando el rango positivo de los tipos de datos enteros.

```cpp
unsigned int positivo = 42;
unsigned char caracter = 255;
```

### Ejemplos y Uso de Tipos de Datos Básicos

A continuación se presenta un ejemplo completo que demuestra el uso de los tipos de datos básicos en un programa C++:

```cpp
#include <iostream>
using namespace std;

int main() {
    int entero = 100;                   // Entero
    char caracter = 'C';                // Carácter
    bool esCierto = true;               // Booleano
    float flotante = 3.14f;             // Flotante
    double doble = 2.718281828459;      // Doble precisión
    short corto = 32767;                // Entero corto
    long largo = 2147483647;            // Entero largo
    long long muyLargo = 9223372036854775807LL; // Entero muy largo
    unsigned int sinSigno = 4294967295; // Entero sin signo

    // Salida de los valores
    cout << "Entero: " << entero << endl;
    cout << "Carácter: " << caracter << endl;
    cout << "Booleano: " << esCierto << endl;
    cout << "Flotante: " << flotante << endl;
    cout << "Doble: " << doble << endl;
    cout << "Corto: " << corto << endl;
    cout << "Largo: " << largo << endl;
    cout << "Muy Largo: " << muyLargo << endl;
    cout << "Sin Signo: " << sinSigno << endl;

    return 0;
}
```

### Explicación del Ejemplo

1. **Entero (`int`):** Se declara y se inicializa con un valor entero.
2. **Carácter (`char`):** Se declara y se inicializa con un carácter.
3. **Booleano (`bool`):** Se declara y se inicializa con un valor booleano.
4. **Flotante (`float`):** Se declara y se inicializa con un número decimal.
5. **Doble (`double`):** Se declara y se inicializa con un número decimal de doble precisión.
6. **Corto (`short`):** Se declara y se inicializa con un valor entero corto.
7. **Largo (`long`):** Se declara y se inicializa con un valor entero largo.
8. **Muy Largo (`long long`):** Se declara y se inicializa con un valor entero muy largo.
9. **Sin Signo (`unsigned`):** Se declara y se inicializa con un valor entero sin signo.

Este ejemplo muestra cómo declarar, inicializar y utilizar diferentes tipos de datos básicos en C++. Cada tipo de dato se adapta a necesidades específicas dependiendo del rango y precisión que se requiera para las operaciones en un programa.
### Variables y Constantes en C++

#### 1. **Variables**

Las variables son contenedores que almacenan datos y cuyo valor puede cambiar durante la ejecución del programa. Para declarar una variable, se especifica su tipo seguido del nombre de la variable.

##### **Declaración y Asignación**

```cpp
int edad;            // Declaración de una variable entera
edad = 25;           // Asignación de un valor a la variable

float altura = 1.75; // Declaración y asignación en una sola línea
```

##### **Tipos Comunes de Variables**

- **Entero (`int`):** Almacena números enteros.
- **Flotante (`float`):** Almacena números con decimales.
- **Doble (`double`):** Almacena números con mayor precisión decimal.
- **Carácter (`char`):** Almacena un solo carácter.
- **Booleano (`bool`):** Almacena valores `true` o `false`.

##### **Ejemplo de Uso de Variables**

```cpp
#include <iostream>
using namespace std;

int main() {
    int edad = 25;
    float altura = 1.75;
    char inicial = 'J';
    bool esEstudiante = true;

    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << endl;
    cout << "Inicial: " << inicial << endl;
    cout << "Es estudiante: " << (esEstudiante ? "Sí" : "No") << endl;

    return 0;
}
```

#### 2. **Constantes**

Las constantes son similares a las variables, pero su valor no puede cambiar una vez asignado. Se utilizan para valores que deben permanecer constantes durante la ejecución del programa. En C++, se pueden definir constantes utilizando la palabra clave `const` o la directiva de preprocesador `#define`.

##### **Constantes con `const`**

```cpp
const int DIAS_EN_SEMANA = 7;
const float PI = 3.14159;
```

##### **Constantes con `#define`**

```cpp
#define MESES_EN_ANO 12
#define GRAVEDAD 9.81
```

##### **Ejemplo de Uso de Constantes**

```cpp
#include <iostream>
using namespace std;

#define MESES_EN_ANO 12

int main() {
    const int DIAS_EN_SEMANA = 7;
    const float PI = 3.14159;
    int dias = 365;

    cout << "Días en una semana: " << DIAS_EN_SEMANA << endl;
    cout << "Pi: " << PI << endl;
    cout << "Meses en un año: " << MESES_EN_ANO << endl;
    cout << "Días en un año: " << dias << endl;

    // Intentar modificar una constante resultará en un error
    // DIAS_EN_SEMANA = 8; // Error: no se puede asignar un nuevo valor a una constante

    return 0;
}
```

### Diferencias Clave entre Variables y Constantes

- **Mutabilidad:**
  - **Variables:** Su valor puede cambiar durante la ejecución del programa.
  - **Constantes:** Su valor no puede cambiar una vez asignado.

- **Sintaxis de Declaración:**
  - **Variables:** Tipo seguido del nombre de la variable.
  - **Constantes:** `const` seguido del tipo y el nombre de la constante, o `#define` seguido del nombre y el valor de la constante.

### Buenas Prácticas

- Utiliza constantes para valores que no deben cambiar para mejorar la legibilidad y el mantenimiento del código.
- Nombra las constantes utilizando letras mayúsculas y separadores de subrayado (`_`) para distinguirlas fácilmente de las variables.
- Declara variables lo más cerca posible de su primer uso para mejorar la claridad del código y evitar errores.

Estas prácticas te ayudarán a escribir código más claro y fácil de mantener, asegurando que los valores importantes no se modifiquen accidentalmente durante la ejecución del programa.
### Tipos de Inicialización en C++

En C++, existen varios tipos de inicialización de variables y constantes, cada uno con su propia sintaxis y propósito. Aquí describimos los distintos tipos de inicialización:

#### 1. **Inicialización Directa**

La inicialización directa se realiza asignando un valor a una variable en el momento de su declaración, utilizando el operador de asignación (`=`).

```cpp
int edad = 25;
float altura = 1.75;
char inicial = 'A';
bool esEstudiante = true;
```

#### 2. **Inicialización de Lista (Uniforme)**

La inicialización de lista, también conocida como inicialización uniforme, utiliza llaves (`{}`) y es preferida en C++11 y versiones posteriores por su consistencia y seguridad, ya que ayuda a evitar conversiones implícitas no deseadas.

```cpp
int edad {25};
float altura {1.75};
char inicial {'A'};
bool esEstudiante {true};
```

##### **Ventajas de la Inicialización de Lista**
- Evita conversiones implícitas peligrosas.
- Es consistente para inicializar cualquier tipo de variable, incluidas las de tipo `struct` y `class`.

#### 3. **Inicialización Copiada**

La inicialización copiada se parece a la inicialización directa pero en realidad llama al constructor de copia para inicializar la variable. Es menos común en la práctica cotidiana.

```cpp
int edad = int(25);
float altura = float(1.75);
char inicial = char('A');
bool esEstudiante = bool(true);
```

#### 4. **Inicialización en el Constructor**

Para las clases y estructuras, la inicialización se puede realizar en el constructor. Esto es especialmente útil para inicializar variables miembro.

```cpp
class Persona {
public:
    int edad;
    float altura;

    Persona(int e, float a) : edad(e), altura(a) {} // Lista de inicialización del constructor
};

Persona p(25, 1.75);
```

#### 5. **Inicialización Estática**

Las variables estáticas dentro de una clase o en un archivo pueden ser inicializadas de manera estática. Las variables estáticas dentro de una clase deben ser definidas fuera de la clase.

```cpp
class Contador {
public:
    static int cuenta;

    Contador() {
        cuenta++;
    }
};

int Contador::cuenta = 0; // Definición e inicialización de la variable estática
```

#### 6. **Inicialización en el Lugar de la Declaración**

Desde C++11, las variables miembro de una clase pueden ser inicializadas en el lugar de su declaración dentro de la clase.

```cpp
class Persona {
public:
    int edad = 25;
    float altura = 1.75;

    Persona() = default; // Constructor por defecto
};

Persona p;
```

### Ejemplo Completo con Distintos Tipos de Inicialización

```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    int edad = 25;           // Inicialización en el lugar de la declaración
    float altura {1.75};     // Inicialización de lista

    Persona(int e, float a) : edad(e), altura(a) {} // Lista de inicialización del constructor
};

int main() {
    // Inicialización directa
    int numeroDirecto = 42;
    // Inicialización de lista
    int numeroLista {42};
    // Inicialización copiada
    int numeroCopiado = int(42);

    // Inicialización de objetos
    Persona p1; // Usa la inicialización en el lugar de la declaración
    Persona p2(30, 1.80); // Usa la lista de inicialización del constructor

    // Salida de los valores
    cout << "Número (inicialización directa): " << numeroDirecto << endl;
    cout << "Número (inicialización de lista): " << numeroLista << endl;
    cout << "Número (inicialización copiada): " << numeroCopiado << endl;

    cout << "Persona 1: Edad = " << p1.edad << ", Altura = " << p1.altura << endl;
    cout << "Persona 2: Edad = " << p2.edad << ", Altura = " << p2.altura << endl;

    return 0;
}
```

### Explicación del Ejemplo

1. **Inicialización Directa:** `int numeroDirecto = 42;` - Se asigna un valor a una variable al declararla.
2. **Inicialización de Lista:** `int numeroLista {42};` - Se utiliza la sintaxis de llaves para inicializar la variable.
3. **Inicialización Copiada:** `int numeroCopiado = int(42);` - Se usa el constructor de copia para inicializar la variable.
4. **Inicialización en el Lugar de la Declaración:** `int edad = 25;` y `float altura {1.75};` dentro de la clase `Persona`.
5. **Lista de Inicialización del Constructor:** `Persona(int e, float a) : edad(e), altura(a) {}` - Inicializa los miembros de la clase en el constructor.

Estos métodos proporcionan flexibilidad y control sobre cómo se inicializan las variables y objetos en C++, permitiendo a los programadores elegir el método más adecuado para cada situación.
### Inicialización con `auto` en C++

En C++11 y versiones posteriores, la palabra clave `auto` permite al compilador deducir automáticamente el tipo de una variable a partir del valor con el que se inicializa. Esto puede simplificar el código y hacerlo más legible, especialmente cuando se trabaja con tipos complejos.

#### 1. **Uso Básico de `auto`**

Cuando se utiliza `auto` para declarar una variable, el compilador determina el tipo de la variable basándose en la expresión que se usa para inicializarla.

```cpp
auto numero = 10;         // int
auto decimal = 3.14;      // double
auto caracter = 'A';      // char
auto booleano = true;     // bool
```

#### 2. **Ventajas de Usar `auto`**

- **Simplicidad y Legibilidad:** Reduce la verbosidad del código, especialmente útil con tipos complejos.
- **Evita Errores de Tipo:** Minimiza los errores relacionados con la declaración de tipos incorrectos.
- **Flexibilidad:** Permite cambios en el tipo de datos subyacente sin necesidad de modificar la declaración de la variable.

#### 3. **Ejemplos de `auto` con Tipos Complejos**

`auto` es especialmente útil cuando se trabaja con iteradores, punteros inteligentes, o tipos definidos por el usuario.

##### **Con Iteradores**

```cpp
#include <vector>
#include <iostream>
using namespace std;

int main() {
    vector<int> numeros = {1, 2, 3, 4, 5};

    // Iterador explícito
    vector<int>::iterator it = numeros.begin();

    // Iterador con auto
    auto itAuto = numeros.begin();

    cout << "Primer elemento: " << *itAuto << endl;

    return 0;
}
```

##### **Con Punteros Inteligentes**

```cpp
#include <memory>
#include <iostream>
using namespace std;

int main() {
    // Declaración explícita
    unique_ptr<int> punteroInt(new int(10));

    // Declaración con auto
    auto punteroAuto = make_unique<int>(20);

    cout << "Valor apuntado por punteroInt: " << *punteroInt << endl;
    cout << "Valor apuntado por punteroAuto: " << *punteroAuto << endl;

    return 0;
}
```

#### 4. **Limitaciones y Consideraciones**

- **Tipo Constante:** `auto` no deduce el tipo como constante a menos que el valor inicial sea constante.

  ```cpp
  const int valorConstante = 10;
  auto miVariable = valorConstante; // miVariable es int, no const int
  ```

- **Tipos Deducidos:** `auto` no deduce referencias o punteros a menos que se especifique explícitamente.

  ```cpp
  int x = 5;
  int& refX = x;
  auto copiaRefX = refX; // copiaRefX es int, no int&

  auto& referenciaRefX = refX; // referenciaRefX es int&
  ```

- **Uso con Inicialización de Lista:** `auto` y la inicialización de lista pueden dar resultados inesperados debido a las reglas de deducción de tipos.

  ```cpp
  auto valor1 = {10}; // std::initializer_list<int>
  auto valor2{10};    // int
  ```

### Ejemplo Completo de Uso de `auto`

```cpp
#include <vector>
#include <iostream>
#include <memory>
using namespace std;

int main() {
    // Inicialización básica
    auto numero = 10;         // int
    auto decimal = 3.14;      // double
    auto caracter = 'A';      // char
    auto booleano = true;     // bool

    // Uso con contenedores
    vector<int> numeros = {1, 2, 3, 4, 5};
    auto it = numeros.begin(); // vector<int>::iterator

    // Uso con punteros inteligentes
    auto puntero = make_unique<int>(100);

    // Salida de los valores
    cout << "Número: " << numero << endl;
    cout << "Decimal: " << decimal << endl;
    cout << "Carácter: " << caracter << endl;
    cout << "Booleano: " << booleano << endl;
    cout << "Primer elemento del vector: " << *it << endl;
    cout << "Valor del puntero: " << *puntero << endl;

    return 0;
}
```

### Explicación del Ejemplo

1. **Inicialización Básica:** Se utilizan diferentes tipos de datos para demostrar cómo `auto` deduce el tipo correcto.
2. **Uso con Contenedores:** Se declara un iterador para un `vector` utilizando `auto`, lo que simplifica la sintaxis.
3. **Punteros Inteligentes:** `auto` se utiliza para deducir el tipo de un puntero inteligente, haciendo el código más claro y menos propenso a errores.

El uso de `auto` en C++ proporciona una forma más limpia y concisa de declarar variables, especialmente cuando los tipos son largos o complejos. Sin embargo, es importante entender cómo `auto` deduce los tipos para evitar errores sutiles en el código.
### Rango y Tamaño en Memoria de los Tipos de Datos Básicos en C++

Cada tipo de dato básico en C++ tiene un rango específico de valores que puede almacenar y un tamaño en memoria. A continuación, se presenta un resumen de los tipos de datos básicos, sus rangos y tamaños típicos en memoria. Estos tamaños pueden variar dependiendo de la arquitectura y el compilador, pero los valores proporcionados son comunes en sistemas de 32 y 64 bits.

#### 1. **Enteros (`int`)**

- **Tamaño:** 4 bytes
- **Rango:** -2,147,483,648 a 2,147,483,647

```cpp
int miEntero = 42;
```

#### 2. **Caracteres (`char`)**

- **Tamaño:** 1 byte
- **Rango:**
  - Con signo: -128 a 127
  - Sin signo (`unsigned char`): 0 a 255

```cpp
char miCaracter = 'A';
unsigned char miCaracterSinSigno = 200;
```

#### 3. **Booleanos (`bool`)**

- **Tamaño:** 1 byte
- **Rango:** `true` o `false` (representados internamente como 1 o 0)

```cpp
bool esVerdadero = true;
```

#### 4. **Flotantes (`float`)**

- **Tamaño:** 4 bytes
- **Rango:** Aproximadamente 1.2E-38 a 3.4E+38 con 6-7 dígitos de precisión decimal

```cpp
float miFlotante = 3.14f;
```

#### 5. **Doble precisión (`double`)**

- **Tamaño:** 8 bytes
- **Rango:** Aproximadamente 2.3E-308 a 1.7E+308 con 15-16 dígitos de precisión decimal

```cpp
double miDoble = 2.718281828459;
```

#### 6. **Enteros Cortos (`short`)**

- **Tamaño:** 2 bytes
- **Rango:** -32,768 a 32,767

```cpp
short miCorto = 100;
```

#### 7. **Enteros Largos (`long`)**

- **Tamaño:** 4 bytes (en sistemas de 32 bits) o 8 bytes (en sistemas de 64 bits)
- **Rango (4 bytes):** -2,147,483,648 a 2,147,483,647
- **Rango (8 bytes):** -9,223,372,036,854,775,808 a 9,223,372,036,854,775,807

```cpp
long miLargo = 100000L;
```

#### 8. **Enteros Muy Largos (`long long`)**

- **Tamaño:** 8 bytes
- **Rango:** -9,223,372,036,854,775,808 a 9,223,372,036,854,775,807

```cpp
long long miMuyLargo = 9223372036854775807LL;
```

#### 9. **Tipos Sin Signo (`unsigned`)**

- **`unsigned int`:**
  - **Tamaño:** 4 bytes
  - **Rango:** 0 a 4,294,967,295

- **`unsigned short`:**
  - **Tamaño:** 2 bytes
  - **Rango:** 0 a 65,535

- **`unsigned long`:**
  - **Tamaño:** 4 bytes (32 bits) o 8 bytes (64 bits)
  - **Rango (4 bytes):** 0 a 4,294,967,295
  - **Rango (8 bytes):** 0 a 18,446,744,073,709,551,615

- **`unsigned long long`:**
  - **Tamaño:** 8 bytes
  - **Rango:** 0 a 18,446,744,073,709,551,615

```cpp
unsigned int miEnteroSinSigno = 3000000000U;
unsigned long long miMuyLargoSinSigno = 18446744073709551615ULL;
```

### Resumen en Tabla

| Tipo de Dato           | Tamaño   | Rango (Con Signo)                             | Rango (Sin Signo)                          |
|------------------------|----------|-----------------------------------------------|--------------------------------------------|
| `char`                 | 1 byte   | -128 a 127                                    | 0 a 255                                    |
| `bool`                 | 1 byte   | `true` (1) o `false` (0)                      | `true` (1) o `false` (0)                   |
| `short`                | 2 bytes  | -32,768 a 32,767                              | 0 a 65,535                                 |
| `int`                  | 4 bytes  | -2,147,483,648 a 2,147,483,647                | 0 a 4,294,967,295                          |
| `long`                 | 4 bytes* | -2,147,483,648 a 2,147,483,647                | 0 a 4,294,967,295                          |
| `long`                 | 8 bytes* | -9,223,372,036,854,775,808 a 9,223,372,036,854,775,807 | 0 a 18,446,744,073,709,551,615 |
| `long long`            | 8 bytes  | -9,223,372,036,854,775,808 a 9,223,372,036,854,775,807 | 0 a 18,446,744,073,709,551,615 |
| `float`                | 4 bytes  | Aproximadamente 1.2E-38 a 3.4E+38              | N/A                                        |
| `double`               | 8 bytes  | Aproximadamente 2.3E-308 a 1.7E+308            | N/A                                        |

\*El tamaño de `long` puede variar entre 4 bytes y 8 bytes dependiendo de la arquitectura (32 bits vs 64 bits).

### Conclusión

El conocimiento del rango y tamaño en memoria de los distintos tipos de datos básicos es crucial para la programación eficiente y segura en C++. Elegir el tipo de dato adecuado puede ayudar a optimizar el uso de memoria y asegurar que los valores se manejen correctamente dentro del rango permitido por cada tipo.
### Operadores en C++

En C++, los operadores son símbolos especiales que se utilizan para realizar operaciones en operandos. Hay varios tipos de operadores, incluyendo aritméticos, lógicos y relacionales, que permiten realizar cálculos, comparaciones y evaluaciones lógicas.

#### 1. **Operadores Aritméticos**

Los operadores aritméticos se utilizan para realizar operaciones matemáticas básicas.

| Operador | Nombre         | Ejemplo      | Descripción                          |
|----------|----------------|--------------|--------------------------------------|
| `+`      | Suma           | `a + b`      | Suma de `a` y `b`                    |
| `-`      | Resta          | `a - b`      | Resta de `b` de `a`                  |
| `*`      | Multiplicación | `a * b`      | Producto de `a` y `b`                |
| `/`      | División       | `a / b`      | Cociente de `a` y `b`                |
| `%`      | Módulo         | `a % b`      | Resto de la división de `a` entre `b`|

##### Ejemplo de Operadores Aritméticos

```cpp
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int b = 3;

    cout << "Suma: " << a + b << endl;           // 13
    cout << "Resta: " << a - b << endl;          // 7
    cout << "Multiplicación: " << a * b << endl; // 30
    cout << "División: " << a / b << endl;       // 3
    cout << "Módulo: " << a % b << endl;         // 1

    return 0;
}
```

#### 2. **Operadores Lógicos**

Los operadores lógicos se utilizan para realizar operaciones lógicas, generalmente en expresiones booleanas.

| Operador | Nombre   | Ejemplo       | Descripción                            |
|----------|----------|---------------|----------------------------------------|
| `&&`     | AND      | `a && b`      | Verdadero si tanto `a` como `b` son verdaderos |
| `||`     | OR       | `a || b`      | Verdadero si al menos uno de `a` o `b` es verdadero |
| `!`      | NOT      | `!a`          | Verdadero si `a` es falso               |

##### Ejemplo de Operadores Lógicos

```cpp
#include <iostream>
using namespace std;

int main() {
    bool a = true;
    bool b = false;

    cout << "AND: " << (a && b) << endl; // 0 (false)
    cout << "OR: " << (a || b) << endl;  // 1 (true)
    cout << "NOT: " << (!a) << endl;     // 0 (false)

    return 0;
}
```

#### 3. **Operadores Relacionales**

Los operadores relacionales se utilizan para comparar dos valores. El resultado de una operación relacional es un valor booleano (`true` o `false`).

| Operador | Nombre           | Ejemplo   | Descripción                          |
|----------|------------------|-----------|--------------------------------------|
| `==`     | Igual a          | `a == b`  | Verdadero si `a` es igual a `b`      |
| `!=`     | No igual a       | `a != b`  | Verdadero si `a` no es igual a `b`   |
| `>`      | Mayor que        | `a > b`   | Verdadero si `a` es mayor que `b`    |
| `<`      | Menor que        | `a < b`   | Verdadero si `a` es menor que `b`    |
| `>=`     | Mayor o igual que| `a >= b`  | Verdadero si `a` es mayor o igual que `b` |
| `<=`     | Menor o igual que| `a <= b`  | Verdadero si `a` es menor o igual que `b` |

##### Ejemplo de Operadores Relacionales

```cpp
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int b = 20;

    cout << "Igual a: " << (a == b) << endl;         // 0 (false)
    cout << "No igual a: " << (a != b) << endl;      // 1 (true)
    cout << "Mayor que: " << (a > b) << endl;        // 0 (false)
    cout << "Menor que: " << (a < b) << endl;        // 1 (true)
    cout << "Mayor o igual que: " << (a >= b) << endl; // 0 (false)
    cout << "Menor o igual que: " << (a <= b) << endl; // 1 (true)

    return 0;
}
```

### Uso Combinado de Operadores

En muchos casos, los operadores aritméticos, lógicos y relacionales se combinan para construir expresiones más complejas.

##### Ejemplo de Uso Combinado

```cpp
#include <iostream>
using namespace std;

int main() {
    int x = 5;
    int y = 10;
    int z = 15;

    // Combinación de operadores aritméticos y relacionales
    bool resultado1 = (x + y) > z; // true

    // Combinación de operadores lógicos y relacionales
    bool resultado2 = (x < y) && (y < z); // true

    cout << "Resultado 1: " << resultado1 << endl; // 1 (true)
    cout << "Resultado 2: " << resultado2 << endl; // 1 (true)

    return 0;
}
```

### Conclusión

Conocer y entender cómo utilizar los operadores aritméticos, lógicos y relacionales en C++ es fundamental para realizar operaciones básicas y tomar decisiones en el código. Estos operadores permiten construir expresiones y condiciones que son esenciales para controlar el flujo de ejecución de los programas y manipular datos de manera efectiva.
<---FILES--->
**Declaración y Asignación**
**Declaración y Asignación** Result
**Tipos Comunes de Variables**
**Tipos Comunes de Variables** Result
**Ejemplo de Uso de Variables**
**Ejemplo de Uso de Variables** Result
**Constantes con `const`**
**Constantes con `const`** Result
**Constantes con `#define`**
**Constantes con `#define`** Result
**Ejemplo de Uso de Constantes**
**Ejemplo de Uso de Constantes** Result
**Declaración y Asignación**
**Declaración y Asignación** Result
**Tipos Comunes de Variables**
**Tipos Comunes de Variables** Result
**Ejemplo de Uso de Variables**
**Ejemplo de Uso de Variables** Result
**Constantes con `const`**
**Constantes con `const`** Result
**Constantes con `#define`**
**Constantes con `#define`** Result
**Ejemplo de Uso de Constantes**
**Ejemplo de Uso de Constantes** Result
**Ventajas de la Inicialización de Lista**
**Ventajas de la Inicialización de Lista** Result
**Declaración y Asignación**
**Declaración y Asignación** Result
**Tipos Comunes de Variables**
**Tipos Comunes de Variables** Result
**Ejemplo de Uso de Variables**
**Ejemplo de Uso de Variables** Result
**Constantes con `const`**
**Constantes con `const`** Result
**Constantes con `#define`**
**Constantes con `#define`** Result
**Ejemplo de Uso de Constantes**
**Ejemplo de Uso de Constantes** Result
**Ventajas de la Inicialización de Lista**
**Ventajas de la Inicialización de Lista** Result
**Con Iteradores**
**Con Iteradores** Result
**Con Punteros Inteligentes**
**Con Punteros Inteligentes** Result
**Declaración y Asignación**
**Declaración y Asignación** Result
**Tipos Comunes de Variables**
**Tipos Comunes de Variables** Result
**Ejemplo de Uso de Variables**
**Ejemplo de Uso de Variables** Result
**Constantes con `const`**
**Constantes con `const`** Result
**Constantes con `#define`**
**Constantes con `#define`** Result
**Ejemplo de Uso de Constantes**
**Ejemplo de Uso de Constantes** Result
**Ventajas de la Inicialización de Lista**
**Ventajas de la Inicialización de Lista** Result
**Con Iteradores**
**Con Iteradores** Result
**Con Punteros Inteligentes**
**Con Punteros Inteligentes** Result
**Declaración y Asignación**
**Declaración y Asignación** Result
**Tipos Comunes de Variables**
**Tipos Comunes de Variables** Result
**Ejemplo de Uso de Variables**
**Ejemplo de Uso de Variables** Result
**Constantes con `const`**
**Constantes con `const`** Result
**Constantes con `#define`**
**Constantes con `#define`** Result
**Ejemplo de Uso de Constantes**
**Ejemplo de Uso de Constantes** Result
**Ventajas de la Inicialización de Lista**
**Ventajas de la Inicialización de Lista** Result
**Con Iteradores**
**Con Iteradores** Result
**Con Punteros Inteligentes**
**Con Punteros Inteligentes** Result
Ejemplo de Operadores Aritméticos
Ejemplo de Operadores Aritméticos Result
Ejemplo de Operadores Lógicos
Ejemplo de Operadores Lógicos Result
Ejemplo de Operadores Relacionales
Ejemplo de Operadores Relacionales Result
Ejemplo de Uso Combinado
Ejemplo de Uso Combinado Result
<---**Declaración y Asignación**--->
```cpp
int edad;            // Declaración de una variable entera
edad = 25;           // Asignación de un valor a la variable

float altura = 1.75; // Declaración y asignación en una sola línea
<---**Declaración y Asignación** Result--->
<---**Tipos Comunes de Variables**--->
<---**Tipos Comunes de Variables** Result--->
<---**Ejemplo de Uso de Variables**--->
```cpp
#include <iostream>
using namespace std;

int main() {
    int edad = 25;
    float altura = 1.75;
    char inicial = 'J';
    bool esEstudiante = true;

    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << endl;
    cout << "Inicial: " << inicial << endl;
    cout << "Es estudiante: " << (esEstudiante ? "Sí" : "No") << endl;

    return 0;
}
<---**Ejemplo de Uso de Variables** Result--->
<---**Constantes con `const`**--->
```cpp
const int DIAS_EN_SEMANA = 7;
const float PI = 3.14159;
<---**Constantes con `const`** Result--->
<---**Constantes con `#define`**--->
```cpp
#define MESES_EN_ANO 12
#define GRAVEDAD 9.81
<---**Constantes con `#define`** Result--->
<---**Ejemplo de Uso de Constantes**--->
```cpp
#include <iostream>
using namespace std;

#define MESES_EN_ANO 12

int main() {
    const int DIAS_EN_SEMANA = 7;
    const float PI = 3.14159;
    int dias = 365;

    cout << "Días en una semana: " << DIAS_EN_SEMANA << endl;
    cout << "Pi: " << PI << endl;
    cout << "Meses en un año: " << MESES_EN_ANO << endl;
    cout << "Días en un año: " << dias << endl;

    // Intentar modificar una constante resultará en un error
    // DIAS_EN_SEMANA = 8; // Error: no se puede asignar un nuevo valor a una constante

    return 0;
}
<---**Ejemplo de Uso de Constantes** Result--->
<---**Declaración y Asignación**--->
```cpp
int edad;            // Declaración de una variable entera
edad = 25;           // Asignación de un valor a la variable

float altura = 1.75; // Declaración y asignación en una sola línea
<---**Declaración y Asignación** Result--->
<---**Tipos Comunes de Variables**--->
<---**Tipos Comunes de Variables** Result--->
<---**Ejemplo de Uso de Variables**--->
```cpp
#include <iostream>
using namespace std;

int main() {
    int edad = 25;
    float altura = 1.75;
    char inicial = 'J';
    bool esEstudiante = true;

    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << endl;
    cout << "Inicial: " << inicial << endl;
    cout << "Es estudiante: " << (esEstudiante ? "Sí" : "No") << endl;

    return 0;
}
<---**Ejemplo de Uso de Variables** Result--->
<---**Constantes con `const`**--->
```cpp
const int DIAS_EN_SEMANA = 7;
const float PI = 3.14159;
<---**Constantes con `const`** Result--->
<---**Constantes con `#define`**--->
```cpp
#define MESES_EN_ANO 12
#define GRAVEDAD 9.81
<---**Constantes con `#define`** Result--->
<---**Ejemplo de Uso de Constantes**--->
```cpp
#include <iostream>
using namespace std;

#define MESES_EN_ANO 12

int main() {
    const int DIAS_EN_SEMANA = 7;
    const float PI = 3.14159;
    int dias = 365;

    cout << "Días en una semana: " << DIAS_EN_SEMANA << endl;
    cout << "Pi: " << PI << endl;
    cout << "Meses en un año: " << MESES_EN_ANO << endl;
    cout << "Días en un año: " << dias << endl;

    // Intentar modificar una constante resultará en un error
    // DIAS_EN_SEMANA = 8; // Error: no se puede asignar un nuevo valor a una constante

    return 0;
}
<---**Ejemplo de Uso de Constantes** Result--->
<---**Ventajas de la Inicialización de Lista**--->
```cpp
int edad = int(25);
float altura = float(1.75);
char inicial = char('A');
bool esEstudiante = bool(true);
```cpp
class Persona {
public:
    int edad;
    float altura;

    Persona(int e, float a) : edad(e), altura(a) {} // Lista de inicialización del constructor
};

Persona p(25, 1.75);
```cpp
class Contador {
public:
    static int cuenta;

    Contador() {
        cuenta++;
    }
};

int Contador::cuenta = 0; // Definición e inicialización de la variable estática
```cpp
class Persona {
public:
    int edad = 25;
    float altura = 1.75;

    Persona() = default; // Constructor por defecto
};

Persona p;
```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    int edad = 25;           // Inicialización en el lugar de la declaración
    float altura {1.75};     // Inicialización de lista

    Persona(int e, float a) : edad(e), altura(a) {} // Lista de inicialización del constructor
};

int main() {
    // Inicialización directa
    int numeroDirecto = 42;
    // Inicialización de lista
    int numeroLista {42};
    // Inicialización copiada
    int numeroCopiado = int(42);

    // Inicialización de objetos
    Persona p1; // Usa la inicialización en el lugar de la declaración
    Persona p2(30, 1.80); // Usa la lista de inicialización del constructor

    // Salida de los valores
    cout << "Número (inicialización directa): " << numeroDirecto << endl;
    cout << "Número (inicialización de lista): " << numeroLista << endl;
    cout << "Número (inicialización copiada): " << numeroCopiado << endl;

    cout << "Persona 1: Edad = " << p1.edad << ", Altura = " << p1.altura << endl;
    cout << "Persona 2: Edad = " << p2.edad << ", Altura = " << p2.altura << endl;

    return 0;
}
<---**Ventajas de la Inicialización de Lista** Result--->
<---**Declaración y Asignación**--->
```cpp
int edad;            // Declaración de una variable entera
edad = 25;           // Asignación de un valor a la variable

float altura = 1.75; // Declaración y asignación en una sola línea
<---**Declaración y Asignación** Result--->
<---**Tipos Comunes de Variables**--->
<---**Tipos Comunes de Variables** Result--->
<---**Ejemplo de Uso de Variables**--->
```cpp
#include <iostream>
using namespace std;

int main() {
    int edad = 25;
    float altura = 1.75;
    char inicial = 'J';
    bool esEstudiante = true;

    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << endl;
    cout << "Inicial: " << inicial << endl;
    cout << "Es estudiante: " << (esEstudiante ? "Sí" : "No") << endl;

    return 0;
}
<---**Ejemplo de Uso de Variables** Result--->
<---**Constantes con `const`**--->
```cpp
const int DIAS_EN_SEMANA = 7;
const float PI = 3.14159;
<---**Constantes con `const`** Result--->
<---**Constantes con `#define`**--->
```cpp
#define MESES_EN_ANO 12
#define GRAVEDAD 9.81
<---**Constantes con `#define`** Result--->
<---**Ejemplo de Uso de Constantes**--->
```cpp
#include <iostream>
using namespace std;

#define MESES_EN_ANO 12

int main() {
    const int DIAS_EN_SEMANA = 7;
    const float PI = 3.14159;
    int dias = 365;

    cout << "Días en una semana: " << DIAS_EN_SEMANA << endl;
    cout << "Pi: " << PI << endl;
    cout << "Meses en un año: " << MESES_EN_ANO << endl;
    cout << "Días en un año: " << dias << endl;

    // Intentar modificar una constante resultará en un error
    // DIAS_EN_SEMANA = 8; // Error: no se puede asignar un nuevo valor a una constante

    return 0;
}
<---**Ejemplo de Uso de Constantes** Result--->
<---**Ventajas de la Inicialización de Lista**--->
```cpp
int edad = int(25);
float altura = float(1.75);
char inicial = char('A');
bool esEstudiante = bool(true);
```cpp
class Persona {
public:
    int edad;
    float altura;

    Persona(int e, float a) : edad(e), altura(a) {} // Lista de inicialización del constructor
};

Persona p(25, 1.75);
```cpp
class Contador {
public:
    static int cuenta;

    Contador() {
        cuenta++;
    }
};

int Contador::cuenta = 0; // Definición e inicialización de la variable estática
```cpp
class Persona {
public:
    int edad = 25;
    float altura = 1.75;

    Persona() = default; // Constructor por defecto
};

Persona p;
```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    int edad = 25;           // Inicialización en el lugar de la declaración
    float altura {1.75};     // Inicialización de lista

    Persona(int e, float a) : edad(e), altura(a) {} // Lista de inicialización del constructor
};

int main() {
    // Inicialización directa
    int numeroDirecto = 42;
    // Inicialización de lista
    int numeroLista {42};
    // Inicialización copiada
    int numeroCopiado = int(42);

    // Inicialización de objetos
    Persona p1; // Usa la inicialización en el lugar de la declaración
    Persona p2(30, 1.80); // Usa la lista de inicialización del constructor

    // Salida de los valores
    cout << "Número (inicialización directa): " << numeroDirecto << endl;
    cout << "Número (inicialización de lista): " << numeroLista << endl;
    cout << "Número (inicialización copiada): " << numeroCopiado << endl;

    cout << "Persona 1: Edad = " << p1.edad << ", Altura = " << p1.altura << endl;
    cout << "Persona 2: Edad = " << p2.edad << ", Altura = " << p2.altura << endl;

    return 0;
}
<---**Ventajas de la Inicialización de Lista** Result--->
<---**Con Iteradores**--->
```cpp
#include <vector>
#include <iostream>
using namespace std;

int main() {
    vector<int> numeros = {1, 2, 3, 4, 5};

    // Iterador explícito
    vector<int>::iterator it = numeros.begin();

    // Iterador con auto
    auto itAuto = numeros.begin();

    cout << "Primer elemento: " << *itAuto << endl;

    return 0;
}
<---**Con Iteradores** Result--->
<---**Con Punteros Inteligentes**--->
```cpp
#include <memory>
#include <iostream>
using namespace std;

int main() {
    // Declaración explícita
    unique_ptr<int> punteroInt(new int(10));

    // Declaración con auto
    auto punteroAuto = make_unique<int>(20);

    cout << "Valor apuntado por punteroInt: " << *punteroInt << endl;
    cout << "Valor apuntado por punteroAuto: " << *punteroAuto << endl;

    return 0;
}
```cpp
#include <vector>
#include <iostream>
#include <memory>
using namespace std;

int main() {
    // Inicialización básica
    auto numero = 10;         // int
    auto decimal = 3.14;      // double
    auto caracter = 'A';      // char
    auto booleano = true;     // bool

    // Uso con contenedores
    vector<int> numeros = {1, 2, 3, 4, 5};
    auto it = numeros.begin(); // vector<int>::iterator

    // Uso con punteros inteligentes
    auto puntero = make_unique<int>(100);

    // Salida de los valores
    cout << "Número: " << numero << endl;
    cout << "Decimal: " << decimal << endl;
    cout << "Carácter: " << caracter << endl;
    cout << "Booleano: " << booleano << endl;
    cout << "Primer elemento del vector: " << *it << endl;
    cout << "Valor del puntero: " << *puntero << endl;

    return 0;
}
<---**Con Punteros Inteligentes** Result--->
<---**Declaración y Asignación**--->
```cpp
int edad;            // Declaración de una variable entera
edad = 25;           // Asignación de un valor a la variable

float altura = 1.75; // Declaración y asignación en una sola línea
<---**Declaración y Asignación** Result--->
<---**Tipos Comunes de Variables**--->
<---**Tipos Comunes de Variables** Result--->
<---**Ejemplo de Uso de Variables**--->
```cpp
#include <iostream>
using namespace std;

int main() {
    int edad = 25;
    float altura = 1.75;
    char inicial = 'J';
    bool esEstudiante = true;

    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << endl;
    cout << "Inicial: " << inicial << endl;
    cout << "Es estudiante: " << (esEstudiante ? "Sí" : "No") << endl;

    return 0;
}
<---**Ejemplo de Uso de Variables** Result--->
<---**Constantes con `const`**--->
```cpp
const int DIAS_EN_SEMANA = 7;
const float PI = 3.14159;
<---**Constantes con `const`** Result--->
<---**Constantes con `#define`**--->
```cpp
#define MESES_EN_ANO 12
#define GRAVEDAD 9.81
<---**Constantes con `#define`** Result--->
<---**Ejemplo de Uso de Constantes**--->
```cpp
#include <iostream>
using namespace std;

#define MESES_EN_ANO 12

int main() {
    const int DIAS_EN_SEMANA = 7;
    const float PI = 3.14159;
    int dias = 365;

    cout << "Días en una semana: " << DIAS_EN_SEMANA << endl;
    cout << "Pi: " << PI << endl;
    cout << "Meses en un año: " << MESES_EN_ANO << endl;
    cout << "Días en un año: " << dias << endl;

    // Intentar modificar una constante resultará en un error
    // DIAS_EN_SEMANA = 8; // Error: no se puede asignar un nuevo valor a una constante

    return 0;
}
<---**Ejemplo de Uso de Constantes** Result--->
<---**Ventajas de la Inicialización de Lista**--->
```cpp
int edad = int(25);
float altura = float(1.75);
char inicial = char('A');
bool esEstudiante = bool(true);
```cpp
class Persona {
public:
    int edad;
    float altura;

    Persona(int e, float a) : edad(e), altura(a) {} // Lista de inicialización del constructor
};

Persona p(25, 1.75);
```cpp
class Contador {
public:
    static int cuenta;

    Contador() {
        cuenta++;
    }
};

int Contador::cuenta = 0; // Definición e inicialización de la variable estática
```cpp
class Persona {
public:
    int edad = 25;
    float altura = 1.75;

    Persona() = default; // Constructor por defecto
};

Persona p;
```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    int edad = 25;           // Inicialización en el lugar de la declaración
    float altura {1.75};     // Inicialización de lista

    Persona(int e, float a) : edad(e), altura(a) {} // Lista de inicialización del constructor
};

int main() {
    // Inicialización directa
    int numeroDirecto = 42;
    // Inicialización de lista
    int numeroLista {42};
    // Inicialización copiada
    int numeroCopiado = int(42);

    // Inicialización de objetos
    Persona p1; // Usa la inicialización en el lugar de la declaración
    Persona p2(30, 1.80); // Usa la lista de inicialización del constructor

    // Salida de los valores
    cout << "Número (inicialización directa): " << numeroDirecto << endl;
    cout << "Número (inicialización de lista): " << numeroLista << endl;
    cout << "Número (inicialización copiada): " << numeroCopiado << endl;

    cout << "Persona 1: Edad = " << p1.edad << ", Altura = " << p1.altura << endl;
    cout << "Persona 2: Edad = " << p2.edad << ", Altura = " << p2.altura << endl;

    return 0;
}
<---**Ventajas de la Inicialización de Lista** Result--->
<---**Con Iteradores**--->
```cpp
#include <vector>
#include <iostream>
using namespace std;

int main() {
    vector<int> numeros = {1, 2, 3, 4, 5};

    // Iterador explícito
    vector<int>::iterator it = numeros.begin();

    // Iterador con auto
    auto itAuto = numeros.begin();

    cout << "Primer elemento: " << *itAuto << endl;

    return 0;
}
<---**Con Iteradores** Result--->
<---**Con Punteros Inteligentes**--->
```cpp
#include <memory>
#include <iostream>
using namespace std;

int main() {
    // Declaración explícita
    unique_ptr<int> punteroInt(new int(10));

    // Declaración con auto
    auto punteroAuto = make_unique<int>(20);

    cout << "Valor apuntado por punteroInt: " << *punteroInt << endl;
    cout << "Valor apuntado por punteroAuto: " << *punteroAuto << endl;

    return 0;
}
```cpp
#include <vector>
#include <iostream>
#include <memory>
using namespace std;

int main() {
    // Inicialización básica
    auto numero = 10;         // int
    auto decimal = 3.14;      // double
    auto caracter = 'A';      // char
    auto booleano = true;     // bool

    // Uso con contenedores
    vector<int> numeros = {1, 2, 3, 4, 5};
    auto it = numeros.begin(); // vector<int>::iterator

    // Uso con punteros inteligentes
    auto puntero = make_unique<int>(100);

    // Salida de los valores
    cout << "Número: " << numero << endl;
    cout << "Decimal: " << decimal << endl;
    cout << "Carácter: " << caracter << endl;
    cout << "Booleano: " << booleano << endl;
    cout << "Primer elemento del vector: " << *it << endl;
    cout << "Valor del puntero: " << *puntero << endl;

    return 0;
}
<---**Con Punteros Inteligentes** Result--->
<---**Declaración y Asignación**--->
```cpp
int edad;            // Declaración de una variable entera
edad = 25;           // Asignación de un valor a la variable

float altura = 1.75; // Declaración y asignación en una sola línea
<---**Declaración y Asignación** Result--->
<---**Tipos Comunes de Variables**--->
<---**Tipos Comunes de Variables** Result--->
<---**Ejemplo de Uso de Variables**--->
```cpp
#include <iostream>
using namespace std;

int main() {
    int edad = 25;
    float altura = 1.75;
    char inicial = 'J';
    bool esEstudiante = true;

    cout << "Edad: " << edad << endl;
    cout << "Altura: " << altura << endl;
    cout << "Inicial: " << inicial << endl;
    cout << "Es estudiante: " << (esEstudiante ? "Sí" : "No") << endl;

    return 0;
}
<---**Ejemplo de Uso de Variables** Result--->
<---**Constantes con `const`**--->
```cpp
const int DIAS_EN_SEMANA = 7;
const float PI = 3.14159;
<---**Constantes con `const`** Result--->
<---**Constantes con `#define`**--->
```cpp
#define MESES_EN_ANO 12
#define GRAVEDAD 9.81
<---**Constantes con `#define`** Result--->
<---**Ejemplo de Uso de Constantes**--->
```cpp
#include <iostream>
using namespace std;

#define MESES_EN_ANO 12

int main() {
    const int DIAS_EN_SEMANA = 7;
    const float PI = 3.14159;
    int dias = 365;

    cout << "Días en una semana: " << DIAS_EN_SEMANA << endl;
    cout << "Pi: " << PI << endl;
    cout << "Meses en un año: " << MESES_EN_ANO << endl;
    cout << "Días en un año: " << dias << endl;

    // Intentar modificar una constante resultará en un error
    // DIAS_EN_SEMANA = 8; // Error: no se puede asignar un nuevo valor a una constante

    return 0;
}
<---**Ejemplo de Uso de Constantes** Result--->
<---**Ventajas de la Inicialización de Lista**--->
```cpp
int edad = int(25);
float altura = float(1.75);
char inicial = char('A');
bool esEstudiante = bool(true);
```cpp
class Persona {
public:
    int edad;
    float altura;

    Persona(int e, float a) : edad(e), altura(a) {} // Lista de inicialización del constructor
};

Persona p(25, 1.75);
```cpp
class Contador {
public:
    static int cuenta;

    Contador() {
        cuenta++;
    }
};

int Contador::cuenta = 0; // Definición e inicialización de la variable estática
```cpp
class Persona {
public:
    int edad = 25;
    float altura = 1.75;

    Persona() = default; // Constructor por defecto
};

Persona p;
```cpp
#include <iostream>
using namespace std;

class Persona {
public:
    int edad = 25;           // Inicialización en el lugar de la declaración
    float altura {1.75};     // Inicialización de lista

    Persona(int e, float a) : edad(e), altura(a) {} // Lista de inicialización del constructor
};

int main() {
    // Inicialización directa
    int numeroDirecto = 42;
    // Inicialización de lista
    int numeroLista {42};
    // Inicialización copiada
    int numeroCopiado = int(42);

    // Inicialización de objetos
    Persona p1; // Usa la inicialización en el lugar de la declaración
    Persona p2(30, 1.80); // Usa la lista de inicialización del constructor

    // Salida de los valores
    cout << "Número (inicialización directa): " << numeroDirecto << endl;
    cout << "Número (inicialización de lista): " << numeroLista << endl;
    cout << "Número (inicialización copiada): " << numeroCopiado << endl;

    cout << "Persona 1: Edad = " << p1.edad << ", Altura = " << p1.altura << endl;
    cout << "Persona 2: Edad = " << p2.edad << ", Altura = " << p2.altura << endl;

    return 0;
}
<---**Ventajas de la Inicialización de Lista** Result--->
<---**Con Iteradores**--->
```cpp
#include <vector>
#include <iostream>
using namespace std;

int main() {
    vector<int> numeros = {1, 2, 3, 4, 5};

    // Iterador explícito
    vector<int>::iterator it = numeros.begin();

    // Iterador con auto
    auto itAuto = numeros.begin();

    cout << "Primer elemento: " << *itAuto << endl;

    return 0;
}
<---**Con Iteradores** Result--->
<---**Con Punteros Inteligentes**--->
```cpp
#include <memory>
#include <iostream>
using namespace std;

int main() {
    // Declaración explícita
    unique_ptr<int> punteroInt(new int(10));

    // Declaración con auto
    auto punteroAuto = make_unique<int>(20);

    cout << "Valor apuntado por punteroInt: " << *punteroInt << endl;
    cout << "Valor apuntado por punteroAuto: " << *punteroAuto << endl;

    return 0;
}
```cpp
#include <vector>
#include <iostream>
#include <memory>
using namespace std;

int main() {
    // Inicialización básica
    auto numero = 10;         // int
    auto decimal = 3.14;      // double
    auto caracter = 'A';      // char
    auto booleano = true;     // bool

    // Uso con contenedores
    vector<int> numeros = {1, 2, 3, 4, 5};
    auto it = numeros.begin(); // vector<int>::iterator

    // Uso con punteros inteligentes
    auto puntero = make_unique<int>(100);

    // Salida de los valores
    cout << "Número: " << numero << endl;
    cout << "Decimal: " << decimal << endl;
    cout << "Carácter: " << caracter << endl;
    cout << "Booleano: " << booleano << endl;
    cout << "Primer elemento del vector: " << *it << endl;
    cout << "Valor del puntero: " << *puntero << endl;

    return 0;
}
<---**Con Punteros Inteligentes** Result--->
<---Ejemplo de Operadores Aritméticos--->
```cpp
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int b = 3;

    cout << "Suma: " << a + b << endl;           // 13
    cout << "Resta: " << a - b << endl;          // 7
    cout << "Multiplicación: " << a * b << endl; // 30
    cout << "División: " << a / b << endl;       // 3
    cout << "Módulo: " << a % b << endl;         // 1

    return 0;
}
<---Ejemplo de Operadores Aritméticos Result--->
<---Ejemplo de Operadores Lógicos--->
```cpp
#include <iostream>
using namespace std;

int main() {
    bool a = true;
    bool b = false;

    cout << "AND: " << (a && b) << endl; // 0 (false)
    cout << "OR: " << (a || b) << endl;  // 1 (true)
    cout << "NOT: " << (!a) << endl;     // 0 (false)

    return 0;
}
<---Ejemplo de Operadores Lógicos Result--->
<---Ejemplo de Operadores Relacionales--->
```cpp
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int b = 20;

    cout << "Igual a: " << (a == b) << endl;         // 0 (false)
    cout << "No igual a: " << (a != b) << endl;      // 1 (true)
    cout << "Mayor que: " << (a > b) << endl;        // 0 (false)
    cout << "Menor que: " << (a < b) << endl;        // 1 (true)
    cout << "Mayor o igual que: " << (a >= b) << endl; // 0 (false)
    cout << "Menor o igual que: " << (a <= b) << endl; // 1 (true)

    return 0;
}
<---Ejemplo de Operadores Relacionales Result--->
<---Ejemplo de Uso Combinado--->
```cpp
#include <iostream>
using namespace std;

int main() {
    int x = 5;
    int y = 10;
    int z = 15;

    // Combinación de operadores aritméticos y relacionales
    bool resultado1 = (x + y) > z; // true

    // Combinación de operadores lógicos y relacionales
    bool resultado2 = (x < y) && (y < z); // true

    cout << "Resultado 1: " << resultado1 << endl; // 1 (true)
    cout << "Resultado 2: " << resultado2 << endl; // 1 (true)

    return 0;
}
<---Ejemplo de Uso Combinado Result--->
