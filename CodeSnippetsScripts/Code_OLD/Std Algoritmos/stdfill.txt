<---EXPLANATION--->
### Algoritmo de la Biblioteca Estándar: `std::fill`

La función `std::fill` es un algoritmo de la biblioteca estándar de C++ que se utiliza para asignar un valor a todos los elementos en un rango. Es parte del encabezado `<algorithm>` y se utiliza comúnmente para inicializar o restablecer los elementos de un contenedor.

#### Sintaxis de `std::fill`

```cpp
#include <algorithm>

template <class ForwardIt, class T>
void fill(ForwardIt first, ForwardIt last, const T& value);
```

- **`ForwardIt first`**: Iterador al primer elemento del rango.
- **`ForwardIt last`**: Iterador al elemento después del último en el rango.
- **`const T& value`**: Valor a asignar a los elementos del rango.

#### Descripción

`std::fill` asigna el valor `value` a cada elemento en el rango `[first, last)`. El rango debe ser accesible mediante iteradores de avance (forward iterators).

#### Ejemplo de Uso de `std::fill`

##### Ejemplo Básico

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec(10);

    // Usar std::fill para asignar el valor 5 a todos los elementos del vector
    std::fill(vec.begin(), vec.end(), 5);

    // Mostrar los elementos del vector
    std::cout << "Elementos del vector después de std::fill: ";
    for (int elem : vec) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::fill(vec.begin(), vec.end(), 5)` asigna el valor `5` a todos los elementos del vector `vec`.

### Uso con Diferentes Tipos de Contenedores

`std::fill` se puede usar con cualquier contenedor que soporte iteradores de avance, como `std::vector`, `std::list`, `std::array`, etc.

##### Ejemplo con `std::array`

```cpp
#include <iostream>
#include <array>
#include <algorithm>

int main() {
    std::array<int, 5> arr;

    // Usar std::fill para asignar el valor 10 a todos los elementos del array
    std::fill(arr.begin(), arr.end(), 10);

    // Mostrar los elementos del array
    std::cout << "Elementos del array después de std::fill: ";
    for (int elem : arr) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::fill(arr.begin(), arr.end(), 10)` asigna el valor `10` a todos los elementos del array `arr`.

### Ejemplos Adicionales

#### Inicializar una Matriz

`std::fill` también puede ser utilizado para inicializar matrices u otras estructuras de datos.

##### Ejemplo con una Matriz

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::vector<int>> matrix(3, std::vector<int>(4));

    // Usar std::fill para asignar el valor 0 a todos los elementos de la matriz
    for (auto& row : matrix) {
        std::fill(row.begin(), row.end(), 0);
    }

    // Mostrar los elementos de la matriz
    std::cout << "Elementos de la matriz después de std::fill: " << std::endl;
    for (const auto& row : matrix) {
        for (int elem : row) {
            std::cout << elem << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
```

En este ejemplo:
- `std::fill` se utiliza en cada fila de la matriz para asignar el valor `0` a todos los elementos.

### Uso con Rangos Parciales

##### Ejemplo de Rango Parcial

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec(10);

    // Asignar el valor 1 a la primera mitad del vector
    std::fill(vec.begin(), vec.begin() + vec.size() / 2, 1);

    // Asignar el valor 2 a la segunda mitad del vector
    std::fill(vec.begin() + vec.size() / 2, vec.end(), 2);

    // Mostrar los elementos del vector
    std::cout << "Elementos del vector después de std::fill en rangos parciales: ";
    for (int elem : vec) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::fill` se utiliza para asignar diferentes valores a distintas partes del vector.

### Consideraciones

- **Rendimiento:** `std::fill` es muy eficiente y generalmente se compila a un bucle simple que asigna el valor a cada elemento del rango.
- **Flexibilidad:** Puede usarse con cualquier tipo de contenedor que soporte iteradores de avance.
- **Seguridad:** Asegúrese de que el rango especificado esté dentro de los límites del contenedor para evitar accesos fuera de los límites.

### Conclusión

`std::fill` es un algoritmo simple pero poderoso de la biblioteca estándar de C++ que proporciona una forma eficiente y flexible de asignar valores a los elementos de un contenedor. Su uso es fundamental para inicializar o restablecer contenedores y es una herramienta esencial en el arsenal de cualquier programador de C++.
<---FILES--->
Ejemplo Básico
Ejemplo Básico Result
Ejemplo con `std::array`
Ejemplo con `std::array` Result
Ejemplo con una Matriz
Ejemplo con una Matriz Result
Ejemplo de Rango Parcial
Ejemplo de Rango Parcial Result
<---Ejemplo Básico--->
```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec(10);

    // Usar std::fill para asignar el valor 5 a todos los elementos del vector
    std::fill(vec.begin(), vec.end(), 5);

    // Mostrar los elementos del vector
    std::cout << "Elementos del vector después de std::fill: ";
    for (int elem : vec) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo Básico Result--->
<---Ejemplo con `std::array`--->
```cpp
#include <iostream>
#include <array>
#include <algorithm>

int main() {
    std::array<int, 5> arr;

    // Usar std::fill para asignar el valor 10 a todos los elementos del array
    std::fill(arr.begin(), arr.end(), 10);

    // Mostrar los elementos del array
    std::cout << "Elementos del array después de std::fill: ";
    for (int elem : arr) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo con `std::array` Result--->
<---Ejemplo con una Matriz--->
```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::vector<int>> matrix(3, std::vector<int>(4));

    // Usar std::fill para asignar el valor 0 a todos los elementos de la matriz
    for (auto& row : matrix) {
        std::fill(row.begin(), row.end(), 0);
    }

    // Mostrar los elementos de la matriz
    std::cout << "Elementos de la matriz después de std::fill: " << std::endl;
    for (const auto& row : matrix) {
        for (int elem : row) {
            std::cout << elem << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
<---Ejemplo con una Matriz Result--->
<---Ejemplo de Rango Parcial--->
```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec(10);

    // Asignar el valor 1 a la primera mitad del vector
    std::fill(vec.begin(), vec.begin() + vec.size() / 2, 1);

    // Asignar el valor 2 a la segunda mitad del vector
    std::fill(vec.begin() + vec.size() / 2, vec.end(), 2);

    // Mostrar los elementos del vector
    std::cout << "Elementos del vector después de std::fill en rangos parciales: ";
    for (int elem : vec) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo de Rango Parcial Result--->
