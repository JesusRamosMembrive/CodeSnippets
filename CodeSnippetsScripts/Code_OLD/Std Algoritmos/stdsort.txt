<---EXPLANATION--->
### Algoritmo de la Biblioteca Estándar: `std::sort`

La función `std::sort` es un algoritmo de la biblioteca estándar de C++ que se utiliza para ordenar los elementos de un rango. Es parte del encabezado `<algorithm>` y es ampliamente utilizada debido a su eficiencia y flexibilidad.

#### Sintaxis de `std::sort`

```cpp
#include <algorithm>

template <class RandomIt>
void sort(RandomIt first, RandomIt last);

template <class RandomIt, class Compare>
void sort(RandomIt first, RandomIt last, Compare comp);
```

- **`RandomIt first`**: Iterador al primer elemento del rango.
- **`RandomIt last`**: Iterador al elemento después del último en el rango.
- **`Compare comp`**: (Opcional) Función o función objeto que define el criterio de comparación.

#### Descripción

`std::sort` ordena los elementos en el rango `[first, last)` en orden ascendente por defecto. Si se proporciona una función de comparación, se utiliza esa función para determinar el orden.

#### Ejemplo de Uso de `std::sort`

##### Ejemplo Básico (Orden Ascendente)

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {5, 2, 9, 1, 5, 6};

    // Usar std::sort para ordenar los elementos en orden ascendente
    std::sort(vec.begin(), vec.end());

    // Mostrar los elementos ordenados
    std::cout << "Elementos ordenados: ";
    for (int elem : vec) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::sort(vec.begin(), vec.end())` ordena todos los elementos del vector `vec` en orden ascendente.

##### Ejemplo con Comparación Personalizada (Orden Descendente)

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {5, 2, 9, 1, 5, 6};

    // Usar std::sort con una función de comparación para ordenar en orden descendente
    std::sort(vec.begin(), vec.end(), std::greater<int>());

    // Mostrar los elementos ordenados
    std::cout << "Elementos ordenados en orden descendente: ";
    for (int elem : vec) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::sort(vec.begin(), vec.end(), std::greater<int>())` ordena los elementos del vector `vec` en orden descendente usando `std::greater`.

### Uso con Diferentes Tipos de Contenedores

`std::sort` se puede usar con cualquier contenedor que soporte iteradores de acceso aleatorio, como `std::vector`, `std::array`, y `std::deque`.

##### Ordenar un `std::array`

```cpp
#include <iostream>
#include <array>
#include <algorithm>

int main() {
    std::array<int, 6> arr = {5, 2, 9, 1, 5, 6};

    // Usar std::sort para ordenar los elementos del array
    std::sort(arr.begin(), arr.end());

    // Mostrar los elementos ordenados
    std::cout << "Elementos del array ordenados: ";
    for (int elem : arr) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::sort` se usa para ordenar los elementos de
<---FILES--->
Ejemplo Básico (Orden Ascendente)
Ejemplo Básico (Orden Ascendente) Result
Ejemplo con Comparación Personalizada (Orden Descendente)
Ejemplo con Comparación Personalizada (Orden Descendente) Result
Ordenar un `std::array`
Ordenar un `std::array` Result
<---Ejemplo Básico (Orden Ascendente)--->
```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {5, 2, 9, 1, 5, 6};

    // Usar std::sort para ordenar los elementos en orden ascendente
    std::sort(vec.begin(), vec.end());

    // Mostrar los elementos ordenados
    std::cout << "Elementos ordenados: ";
    for (int elem : vec) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo Básico (Orden Ascendente) Result--->
<---Ejemplo con Comparación Personalizada (Orden Descendente)--->
```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {5, 2, 9, 1, 5, 6};

    // Usar std::sort con una función de comparación para ordenar en orden descendente
    std::sort(vec.begin(), vec.end(), std::greater<int>());

    // Mostrar los elementos ordenados
    std::cout << "Elementos ordenados en orden descendente: ";
    for (int elem : vec) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo con Comparación Personalizada (Orden Descendente) Result--->
<---Ordenar un `std::array`--->
```cpp
#include <iostream>
#include <array>
#include <algorithm>

int main() {
    std::array<int, 6> arr = {5, 2, 9, 1, 5, 6};

    // Usar std::sort para ordenar los elementos del array
    std::sort(arr.begin(), arr.end());

    // Mostrar los elementos ordenados
    std::cout << "Elementos del array ordenados: ";
    for (int elem : arr) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Ordenar un `std::array` Result--->
