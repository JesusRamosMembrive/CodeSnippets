<---EXPLANATION--->
### Composición de Vista y Operador `|` (Pipe)

C++20 introdujo la capacidad de componer vistas utilizando el operador `|` (pipe), que permite encadenar múltiples adaptadores de vistas de manera legible y concisa. Esta característica facilita la construcción de operaciones complejas sobre secuencias de datos sin necesidad de crear variables intermedias.

#### Conceptos Clave

- **Composición de Vistas:** Proceso de aplicar múltiples adaptadores de vistas de manera secuencial a una secuencia de datos.
- **Operador `|` (Pipe):** Operador que permite encadenar adaptadores de vistas.

### Ejemplos de Composición de Vistas

#### Filtrado y Transformación

Vamos a combinar `std::views::filter` y `std::views::transform` para filtrar y luego transformar los elementos de una secuencia.

```cpp
#include <iostream>
#include <vector>
#include <ranges>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Filtrar números pares y luego cuadrarlos
    auto even_squares = vec
                        | std::views::filter([](int n) { return n % 2 == 0; })
                        | std::views::transform([](int n) { return n * n; });

    // Mostrar los resultados
    std::cout << "Cuadrados de números pares: ";
    for (int n : even_squares) {
        std::cout << n << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::views::filter` se utiliza para filtrar los números pares.
- `std::views::transform` se utiliza para cuadrar los números pares filtrados.
- El operador `|` (pipe) encadena las operaciones de manera legible.

#### Composición de Múltiples Adaptadores

Vamos a combinar `std::views::filter`, `std::views::transform`, y `std::views::take` para una operación más compleja.

```cpp
#include <iostream>
#include <vector>
#include <ranges>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Filtrar números impares, multiplicar por 2, y tomar los primeros 3 resultados
    auto result = vec
                  | std::views::filter([](int n) { return n % 2 != 0; })
                  | std::views::transform([](int n) { return n * 2; })
                  | std::views::take(3);

    // Mostrar los resultados
    std::cout << "Resultado de la composición de vistas: ";
    for (int n : result) {
        std::cout << n << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::views::filter` filtra los números impares.
- `std::views::transform` multiplica los números impares por 2.
- `std::views::take` toma los primeros 3 resultados de la transformación.

### Adaptadores de Vista Comunes

#### `std::views::filter`

Filtra los elementos de un rango basándose en un predicado.

```cpp
auto even_numbers = vec | std::views::filter([](int n) { return n % 2 == 0; });
```

#### `std::views::transform`

Transforma los elementos de un rango aplicando una función.

```cpp
auto squares = vec | std::views::transform([](int n) { return n * n; });
```

#### `std::views::take`

Toma los primeros `n` elementos de un rango.

```cpp
auto first_three = vec | std::views::take(3);
```

#### `std::views::drop`

Omite los primeros `n` elementos de un rango.

```cpp
auto without_first_three = vec | std::views::drop(3);
```

#### `std::views::reverse`

Invierte el orden de los elementos de un rango.

```cpp
auto reversed = vec | std::views::reverse;
```

#### `std::views::iota`

Genera un rango de valores incrementales.

```cpp
auto values = std::views::iota(1, 10); // 1 to 9
```

### Ejemplos Avanzados

#### Uso de `std::views::join` para Unir Rangos

```cpp
#include <iostream>
#include <vector>
#include <ranges>

int main() {
    std::vector<std::vector<int>> vec_of_vecs = {{1, 2, 3}, {4, 5}, {6, 7, 8, 9}};

    // Unir todos los subrangos en un solo rango
    auto joined = vec_of_vecs | std::views::join;

    // Mostrar los elementos unidos
    std::cout << "Elementos unidos: ";
    for (int n : joined) {
        std::cout << n << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo, `std::views::join` une todos los subrangos de `vec_of_vecs` en un solo rango.

#### Uso de `std::views::split` para Dividir un Rango

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <ranges>

int main() {
    std::string text = "C++20 is awesome";

    // Dividir el texto en palabras
    auto words = text | std::views::split(' ');

    // Mostrar las palabras
    std::cout << "Palabras en el texto: ";
    for (const auto& word : words) {
        for (char c : word) {
            std::cout << c;
        }
        std::cout << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo, `std::views::split` divide el texto en palabras utilizando el espacio como delimitador.

### Conclusión

El operador `|` (pipe) y los adaptadores de vista de `std::ranges` en C++20 proporcionan una forma poderosa y expresiva de componer operaciones sobre secuencias de datos. Los adaptadores de vista permiten transformar y filtrar datos de manera eficiente sin crear variables intermedias, lo que hace que el código sea más legible y conciso. Utilizar estas características puede simplificar significativamente la manipulación de secuencias en C++.
<---FILES--->
