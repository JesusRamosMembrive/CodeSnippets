<---EXPLANATION--->
### Iteradores de Entrada en C++

Los **iteradores de entrada** (input iterators) son uno de los tipos de iteradores en C++ que se utilizan para leer datos secuencialmente de una secuencia. Estos iteradores permiten recorrer una secuencia de datos y leer cada elemento una vez, y son especialmente útiles cuando se trabaja con flujos de entrada como archivos o entradas estándar.

#### Características de los Iteradores de Entrada

1. **Lectura Secuencial:** Permiten leer los elementos de una secuencia en orden.
2. **No Modificables:** No se pueden usar para modificar los elementos de la secuencia.
3. **Un Solo Paso:** Cada elemento puede ser leído una vez; no se garantiza que puedan retroceder.
4. **Igualdad y Desigualdad:** Pueden compararse con otros iteradores de entrada usando `==` y `!=`.

#### Ejemplo con Flujos de Entrada

Los iteradores de entrada son comúnmente utilizados con flujos de entrada como `std::istream`.

##### Ejemplo Básico con `std::istream_iterator`

```cpp
#include <iostream>
#include <iterator>
#include <vector>
#include <algorithm>

int main() {
    std::cout << "Ingrese números separados por espacios (Ctrl+D para terminar): ";

    // Crear un istream_iterator para leer desde std::cin
    std::istream_iterator<int> inicio(std::cin);
    std::istream_iterator<int> fin;  // Iterador de fin predeterminado

    // Leer todos los números ingresados en un vector
    std::vector<int> numeros(inicio, fin);

    // Mostrar los números leídos
    std::cout << "Números ingresados: ";
    for (int numero : numeros) {
        std::cout << numero << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::istream_iterator<int>` se utiliza para crear un iterador de entrada que lee `int` desde `std::cin`.
- Los números ingresados se almacenan en un `std::vector<int>` utilizando el rango `[inicio, fin]`.

#### Uso en Algoritmos de la STL

Los iteradores de entrada pueden ser utilizados en algoritmos de la STL que requieren la lectura de datos de una secuencia.

##### Ejemplo con `std::copy`

```cpp
#include <iostream>
#include <iterator>
#include <vector>
#include <algorithm>

int main() {
    std::cout << "Ingrese números separados por espacios (Ctrl+D para terminar): ";

    // Crear un istream_iterator para leer desde std::cin
    std::istream_iterator<int> inicio(std::cin);
    std::istream_iterator<int> fin;  // Iterador de fin predeterminado

    // Crear un vector para almacenar los números leídos
    std::vector<int> numeros;

    // Usar std::copy para leer los números en el vector
    std::copy(inicio, fin, std::back_inserter(numeros));

    // Mostrar los números leídos
    std::cout << "Números ingresados: ";
    for (int numero : numeros) {
        std::cout << numero << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `std::copy` se utiliza para copiar los números leídos desde el flujo de entrada a un vector utilizando un iterador de entrada.

#### Implementación Personalizada de un Iterador de Entrada

Aunque `std::istream_iterator` es una implementación estándar, es posible definir iteradores de entrada personalizados.

##### Ejemplo de Implementación Personalizada

```cpp
#include <iostream>
#include <iterator>

class InputIterator : public std::iterator<std::input_iterator_tag, int> {
    std::istream* in;
    int value;

public:
    InputIterator(std::istream& s) : in(&s) {
        ++(*this);  // Leer el primer valor
    }

    InputIterator() : in(nullptr) {}

    bool operator==(const InputIterator& other) const {
        return in == other.in;
    }

    bool operator!=(const InputIterator& other) const {
        return !(*this == other);
    }

    int operator*() const {
        return value;
    }

    InputIterator& operator++() {
        if (in && !(*in >> value)) {
            in = nullptr;  // Alcanzó el final de la secuencia
        }
        return *this;
    }
};

int main() {
    std::cout << "Ingrese números separados por espacios (Ctrl+D para terminar): ";

    // Usar el iterador de entrada personalizado para leer desde std::cin
    InputIterator inicio(std::cin);
    InputIterator fin;

    // Leer todos los números ingresados en un vector
    std::vector<int> numeros(inicio, fin);

    // Mostrar los números leídos
    std::cout << "Números ingresados: ";
    for (int numero : numeros) {
        std::cout << numero << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

En este ejemplo:
- `InputIterator` es un iterador de entrada personalizado que lee `int` desde un flujo de entrada.
- Se define sobrecargando los operadores necesarios para cumplir con los requisitos de un iterador de entrada.

### Conclusión

Los iteradores de entrada son una herramienta poderosa en C++ para leer datos secuencialmente de una fuente de entrada. Permiten una lectura eficiente y son esenciales para trabajar con flujos de entrada en algoritmos de la STL. Entender cómo utilizar y, si es necesario, implementar iteradores de entrada personalizados, es fundamental para escribir código C++ robusto y eficiente.
<---FILES--->
Ejemplo Básico con `std::istream_iterator`
Ejemplo Básico con `std::istream_iterator` Result
Ejemplo con `std::copy`
Ejemplo con `std::copy` Result
Ejemplo de Implementación Personalizada
Ejemplo de Implementación Personalizada Result
<---Ejemplo Básico con `std::istream_iterator`--->
```cpp
#include <iostream>
#include <iterator>
#include <vector>
#include <algorithm>

int main() {
    std::cout << "Ingrese números separados por espacios (Ctrl+D para terminar): ";

    // Crear un istream_iterator para leer desde std::cin
    std::istream_iterator<int> inicio(std::cin);
    std::istream_iterator<int> fin;  // Iterador de fin predeterminado

    // Leer todos los números ingresados en un vector
    std::vector<int> numeros(inicio, fin);

    // Mostrar los números leídos
    std::cout << "Números ingresados: ";
    for (int numero : numeros) {
        std::cout << numero << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo Básico con `std::istream_iterator` Result--->
<---Ejemplo con `std::copy`--->
```cpp
#include <iostream>
#include <iterator>
#include <vector>
#include <algorithm>

int main() {
    std::cout << "Ingrese números separados por espacios (Ctrl+D para terminar): ";

    // Crear un istream_iterator para leer desde std::cin
    std::istream_iterator<int> inicio(std::cin);
    std::istream_iterator<int> fin;  // Iterador de fin predeterminado

    // Crear un vector para almacenar los números leídos
    std::vector<int> numeros;

    // Usar std::copy para leer los números en el vector
    std::copy(inicio, fin, std::back_inserter(numeros));

    // Mostrar los números leídos
    std::cout << "Números ingresados: ";
    for (int numero : numeros) {
        std::cout << numero << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo con `std::copy` Result--->
<---Ejemplo de Implementación Personalizada--->
```cpp
#include <iostream>
#include <iterator>

class InputIterator : public std::iterator<std::input_iterator_tag, int> {
    std::istream* in;
    int value;

public:
    InputIterator(std::istream& s) : in(&s) {
        ++(*this);  // Leer el primer valor
    }

    InputIterator() : in(nullptr) {}

    bool operator==(const InputIterator& other) const {
        return in == other.in;
    }

    bool operator!=(const InputIterator& other) const {
        return !(*this == other);
    }

    int operator*() const {
        return value;
    }

    InputIterator& operator++() {
        if (in && !(*in >> value)) {
            in = nullptr;  // Alcanzó el final de la secuencia
        }
        return *this;
    }
};

int main() {
    std::cout << "Ingrese números separados por espacios (Ctrl+D para terminar): ";

    // Usar el iterador de entrada personalizado para leer desde std::cin
    InputIterator inicio(std::cin);
    InputIterator fin;

    // Leer todos los números ingresados en un vector
    std::vector<int> numeros(inicio, fin);

    // Mostrar los números leídos
    std::cout << "Números ingresados: ";
    for (int numero : numeros) {
        std::cout << numero << " ";
    }
    std::cout << std::endl;

    return 0;
}
<---Ejemplo de Implementación Personalizada Result--->
