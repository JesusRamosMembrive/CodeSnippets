<---EXPLANATION--->
### Estructuras de Datos: Arrays y Vectores en C++

En C++, los arrays y los vectores son dos tipos de estructuras de datos fundamentales que permiten almacenar colecciones de elementos del mismo tipo. A continuación, se detallan sus características, cómo utilizarlos y sus diferencias.

#### Arrays

Un array es una estructura de datos de tamaño fijo que almacena elementos de un mismo tipo en ubicaciones de memoria contiguas. El tamaño de un array debe ser conocido y constante en el momento de su declaración.

##### Declaración y Uso de Arrays

```cpp
#include <iostream>
using namespace std;

int main() {
    // Declaración y inicialización de un array de enteros
    int numeros[5] = {1, 2, 3, 4, 5};

    // Acceso a los elementos del array
    for (int i = 0; i < 5; ++i) {
        cout << "Elemento " << i << ": " << numeros[i] << endl;
    }

    // Modificación de un elemento del array
    numeros[2] = 10;
    cout << "Elemento modificado: " << numeros[2] << endl;

    return 0;
}
```

##### Características de los Arrays

- **Tamaño Fijo:** El tamaño de un array se debe definir en el momento de la declaración y no puede cambiar durante la ejecución del programa.
- **Acceso Directo:** Los elementos del array se pueden acceder directamente usando índices.
- **Sin Verificación de Límites:** No hay verificación automática de límites, lo que puede conducir a errores si se accede a índices fuera del rango válido.

##### Arrays Multidimensionales

C++ permite la creación de arrays multidimensionales (matrices).

```cpp
#include <iostream>
using namespace std;

int main() {
    // Declaración de una matriz 2x3
    int matriz[2][3] = {
        {1, 2, 3},
        {4, 5, 6}
    };

    // Acceso a los elementos de la matriz
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << "Elemento [" << i << "][" << j << "]: " << matriz[i][j] << endl;
        }
    }

    return 0;
}
```

#### Vectores

Los vectores son una estructura de datos de la biblioteca estándar de C++ (STL) que proporcionan una forma más flexible y segura de manejar colecciones de elementos. A diferencia de los arrays, los vectores pueden cambiar de tamaño dinámicamente.

##### Declaración y Uso de Vectores

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    // Declaración y inicialización de un vector de enteros
    vector<int> numeros = {1, 2, 3, 4, 5};

    // Acceso a los elementos del vector
    for (int i = 0; i < numeros.size(); ++i) {
        cout << "Elemento " << i << ": " << numeros[i] << endl;
    }

    // Modificación de un elemento del vector
    numeros[2] = 10;
    cout << "Elemento modificado: " << numeros[2] << endl;

    // Añadir nuevos elementos al vector
    numeros.push_back(6);
    numeros.push_back(7);

    // Tamaño del vector después de agregar elementos
    cout << "Tamaño del vector: " << numeros.size() << endl;

    return 0;
}
```

##### Características de los Vectores

- **Tamaño Dinámico:** Los vectores pueden redimensionarse automáticamente para acomodar nuevos elementos.
- **Seguridad de Acceso:** Los vectores proporcionan métodos como `at()` que incluyen verificación de límites.
- **Capacidad y Reserva:** Los vectores tienen una capacidad que puede ser mayor que su tamaño, y se puede usar `reserve()` para preasignar memoria.

##### Métodos Comunes de los Vectores

- **`push_back(elemento)`:** Añade un elemento al final del vector.
- **`pop_back()`:** Elimina el último elemento del vector.
- **`size()`:** Devuelve el número de elementos en el vector.
- **`capacity()`:** Devuelve la cantidad de espacio asignado al vector.
- **`resize(nuevo_tamaño)`:** Cambia el tamaño del vector.
- **`at(indice)`:** Devuelve una referencia al elemento en la posición especificada con verificación de límites.

#### Comparación Entre Arrays y Vectores

| Característica        | Array                       | Vector                  |
|-----------------------|-----------------------------|-------------------------|
| Tamaño                | Fijo                        | Dinámico                |
| Verificación de Límites | No                         | Sí (`at()`)              |
| Flexibilidad          | Menor                       | Mayor                   |
| Eficiencia            | Más eficiente en acceso     | Ligeramente menos eficiente debido a la administración de memoria |
| Biblioteca            | Parte del lenguaje          | Parte de la STL         |

#### Ejemplo Completo

A continuación, un ejemplo que utiliza tanto arrays como vectores para ilustrar sus diferencias y usos comunes:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    // Uso de un array
    int numerosArray[5] = {1, 2, 3, 4, 5};
    cout << "Array:" << endl;
    for (int i = 0; i < 5; ++i) {
        cout << "Elemento " << i << ": " << numerosArray[i] << endl;
    }
    numerosArray[2] = 10;
    cout << "Elemento modificado en array: " << numerosArray[2] << endl;

    // Uso de un vector
    vector<int> numerosVector = {1, 2, 3, 4, 5};
    cout << "\nVector:" << endl;
    for (int i = 0; i < numerosVector.size(); ++i) {
        cout << "Elemento " << i << ": " << numerosVector[i] << endl;
    }
    numerosVector[2] = 10;
    cout << "Elemento modificado en vector: " << numerosVector[2] << endl;
    numerosVector.push_back(6);
    numerosVector.push_back(7);
    cout << "Tamaño del vector después de añadir elementos: " << numerosVector.size() << endl;

    return 0;
}
```

### Conclusión

Los arrays y los vectores son herramientas fundamentales en C++ para manejar colecciones de datos. Los arrays son útiles cuando se necesita una estructura de datos de tamaño fijo y eficiente, mientras que los vectores ofrecen flexibilidad y seguridad adicional, siendo capaces de redimensionarse dinámicamente. Conocer cuándo y cómo usar cada uno es esencial para escribir código eficiente y claro en C++.
<---FILES--->
Declaración y Uso de Arrays
Declaración y Uso de Arrays Result
Características de los Arrays
Características de los Arrays Result
Arrays Multidimensionales
Arrays Multidimensionales Result
Declaración y Uso de Vectores
Declaración y Uso de Vectores Result
Características de los Vectores
Características de los Vectores Result
Métodos Comunes de los Vectores
Métodos Comunes de los Vectores Result
<---Declaración y Uso de Arrays--->
```cpp
#include <iostream>
using namespace std;

int main() {
    // Declaración y inicialización de un array de enteros
    int numeros[5] = {1, 2, 3, 4, 5};

    // Acceso a los elementos del array
    for (int i = 0; i < 5; ++i) {
        cout << "Elemento " << i << ": " << numeros[i] << endl;
    }

    // Modificación de un elemento del array
    numeros[2] = 10;
    cout << "Elemento modificado: " << numeros[2] << endl;

    return 0;
}
<---Declaración y Uso de Arrays Result--->
<---Características de los Arrays--->
<---Características de los Arrays Result--->
<---Arrays Multidimensionales--->
```cpp
#include <iostream>
using namespace std;

int main() {
    // Declaración de una matriz 2x3
    int matriz[2][3] = {
        {1, 2, 3},
        {4, 5, 6}
    };

    // Acceso a los elementos de la matriz
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << "Elemento [" << i << "][" << j << "]: " << matriz[i][j] << endl;
        }
    }

    return 0;
}
<---Arrays Multidimensionales Result--->
<---Declaración y Uso de Vectores--->
```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    // Declaración y inicialización de un vector de enteros
    vector<int> numeros = {1, 2, 3, 4, 5};

    // Acceso a los elementos del vector
    for (int i = 0; i < numeros.size(); ++i) {
        cout << "Elemento " << i << ": " << numeros[i] << endl;
    }

    // Modificación de un elemento del vector
    numeros[2] = 10;
    cout << "Elemento modificado: " << numeros[2] << endl;

    // Añadir nuevos elementos al vector
    numeros.push_back(6);
    numeros.push_back(7);

    // Tamaño del vector después de agregar elementos
    cout << "Tamaño del vector: " << numeros.size() << endl;

    return 0;
}
<---Declaración y Uso de Vectores Result--->
<---Características de los Vectores--->
<---Características de los Vectores Result--->
<---Métodos Comunes de los Vectores--->
```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    // Uso de un array
    int numerosArray[5] = {1, 2, 3, 4, 5};
    cout << "Array:" << endl;
    for (int i = 0; i < 5; ++i) {
        cout << "Elemento " << i << ": " << numerosArray[i] << endl;
    }
    numerosArray[2] = 10;
    cout << "Elemento modificado en array: " << numerosArray[2] << endl;

    // Uso de un vector
    vector<int> numerosVector = {1, 2, 3, 4, 5};
    cout << "\nVector:" << endl;
    for (int i = 0; i < numerosVector.size(); ++i) {
        cout << "Elemento " << i << ": " << numerosVector[i] << endl;
    }
    numerosVector[2] = 10;
    cout << "Elemento modificado en vector: " << numerosVector[2] << endl;
    numerosVector.push_back(6);
    numerosVector.push_back(7);
    cout << "Tamaño del vector después de añadir elementos: " << numerosVector.size() << endl;

    return 0;
}
<---Métodos Comunes de los Vectores Result--->
