<---EXPLANATION--->
### Operador Ternario en C++

El operador ternario es un operador condicional compacto que permite evaluar una expresión y seleccionar entre dos valores basados en una condición. Es útil para simplificar código que de otra manera requeriría una estructura `if-else` más larga.

#### Sintaxis del Operador Ternario

El operador ternario utiliza el símbolo `?` para separar la condición de los dos resultados posibles, y el símbolo `:` para separar los dos resultados.

```cpp
condicion ? expresion_si_verdadero : expresion_si_falso;
```

- **`condicion`:** Una expresión booleana que se evalúa.
- **`expresion_si_verdadero`:** La expresión que se evalúa y retorna si la condición es verdadera.
- **`expresion_si_falso`:** La expresión que se evalúa y retorna si la condición es falsa.

#### Ejemplo Básico

```cpp
#include <iostream>
using namespace std;

int main() {
    int a = 5, b = 10;

    // Uso del operador ternario
    int mayor = (a > b) ? a : b;

    cout << "El mayor valor es: " << mayor << endl;

    return 0;
}
```

En este ejemplo, la condición `(a > b)` se evalúa. Si es verdadera, `mayor` toma el valor de `a`; de lo contrario, toma el valor de `b`.

#### Uso Común del Operador Ternario

El operador ternario se utiliza comúnmente para:

- Asignar valores a variables basándose en una condición.
- Realizar selecciones rápidas entre dos valores sin usar estructuras `if-else`.

##### Asignación Condicional

```cpp
#include <iostream>
using namespace std;

int main() {
    int numero = 8;
    string resultado;

    // Asignación condicional con el operador ternario
    resultado = (numero % 2 == 0) ? "Par" : "Impar";

    cout << "El número " << numero << " es " << resultado << endl;

    return 0;
}
```

En este ejemplo, `resultado` se asigna a "Par" si `numero` es divisible por 2, y a "Impar" en caso contrario.

##### Embedding en Expresiones

El operador ternario también se puede utilizar dentro de expresiones más grandes.

```cpp
#include <iostream>
using namespace std;

int main() {
    int edad = 20;
    string mensaje = "Eres " + ((edad >= 18) ? "mayor" : "menor") + " de edad.";

    cout << mensaje << endl;

    return 0;
}
```

Aquí, el operador ternario se utiliza para construir dinámicamente la cadena `mensaje`.

#### Consideraciones y Buenas Prácticas

- **Legibilidad:** Aunque el operador ternario puede hacer el código más conciso, un uso excesivo o anidado puede dificultar la lectura del código. Úsalo con moderación.
- **Simplicidad:** Es mejor utilizar el operador ternario para expresiones simples. Para condiciones complejas, una estructura `if-else` puede ser más clara.
- **Tipos de Retorno:** Asegúrate de que las expresiones `expresion_si_verdadero` y `expresion_si_falso` retornen el mismo tipo de dato o tipos compatibles para evitar errores de compilación.

#### Ejemplo Completo

```cpp
#include <iostream>
using namespace std;

int main() {
    int x = 15;
    int y = 30;

    // Determinar el mayor número usando el operador ternario
    int mayor = (x > y) ? x : y;
    cout << "El mayor valor es: " << mayor << endl;

    // Determinar si un número es par o impar usando el operador ternario
    int numero = 25;
    string paridad = (numero % 2 == 0) ? "par" : "impar";
    cout << "El número " << numero << " es " << paridad << endl;

    // Asignar un mensaje basado en la edad
    int edad = 17;
    string mensaje = "Eres " + ((edad >= 18) ? "mayor" : "menor") + " de edad.";
    cout << mensaje << endl;

    return 0;
}
```

### Conclusión

El operador ternario es una herramienta útil en C++ para simplificar expresiones condicionales y hacer el código más compacto. Sin embargo, es importante usarlo con cuidado para mantener la legibilidad y claridad del código. Para condiciones simples, el operador ternario puede ser muy eficaz, mientras que para condiciones más complejas, una estructura `if-else` puede ser más adecuada.
<---FILES--->
Asignación Condicional
Asignación Condicional Result
Embedding en Expresiones
Embedding en Expresiones Result
<---Asignación Condicional--->
```cpp
#include <iostream>
using namespace std;

int main() {
    int numero = 8;
    string resultado;

    // Asignación condicional con el operador ternario
    resultado = (numero % 2 == 0) ? "Par" : "Impar";

    cout << "El número " << numero << " es " << resultado << endl;

    return 0;
}
<---Asignación Condicional Result--->
<---Embedding en Expresiones--->
```cpp
#include <iostream>
using namespace std;

int main() {
    int edad = 20;
    string mensaje = "Eres " + ((edad >= 18) ? "mayor" : "menor") + " de edad.";

    cout << mensaje << endl;

    return 0;
}
```cpp
#include <iostream>
using namespace std;

int main() {
    int x = 15;
    int y = 30;

    // Determinar el mayor número usando el operador ternario
    int mayor = (x > y) ? x : y;
    cout << "El mayor valor es: " << mayor << endl;

    // Determinar si un número es par o impar usando el operador ternario
    int numero = 25;
    string paridad = (numero % 2 == 0) ? "par" : "impar";
    cout << "El número " << numero << " es " << paridad << endl;

    // Asignar un mensaje basado en la edad
    int edad = 17;
    string mensaje = "Eres " + ((edad >= 18) ? "mayor" : "menor") + " de edad.";
    cout << mensaje << endl;

    return 0;
}
<---Embedding en Expresiones Result--->
