// /CodeSnippetApp/Modules/ListsOfModels/MapOfAssociations.qml
#include <QtQml/qqmlprivate.h>
#include <QtCore/qdatetime.h>
#include <QtCore/qobject.h>
#include <QtCore/qstring.h>
#include <QtCore/qstringlist.h>
#include <QtCore/qtimezone.h>
#include <QtCore/qurl.h>
#include <QtCore/qvariant.h>
#include <QtQml/qjsengine.h>
#include <QtQml/qjsprimitivevalue.h>
#include <QtQml/qjsvalue.h>
#include <QtQml/qqmlcomponent.h>
#include <QtQml/qqmlcontext.h>
#include <QtQml/qqmlengine.h>
#include <QtQml/qqmllist.h>
#include <type_traits>
namespace QmlCacheGeneratedCode {
namespace _0x5f_CodeSnippetApp_Modules_ListsOfModels_MapOfAssociations_qml {
extern const unsigned char qmlData alignas(16) [];
extern const unsigned char qmlData alignas(16) [] = {

0x71,0x76,0x34,0x63,0x64,0x61,0x74,0x61,
0x3f,0x0,0x0,0x0,0x0,0x7,0x6,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0xc0,0x4,0x0,0x0,0x30,0x64,0x64,0x65,
0x39,0x34,0x61,0x35,0x34,0x31,0x38,0x36,
0x61,0x31,0x34,0x30,0x31,0x66,0x66,0x32,
0x31,0x39,0x65,0x36,0x34,0x32,0x32,0x37,
0x34,0x37,0x39,0x32,0x35,0x61,0x31,0x39,
0x66,0x63,0x30,0x61,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x7e,0x25,0xa1,0xa9,
0x95,0x6,0x36,0xa8,0x6d,0x70,0x35,0x54,
0xe6,0xf5,0x4c,0x65,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x23,0x0,0x0,0x0,
0x11,0x0,0x0,0x0,0x98,0x1,0x0,0x0,
0x1,0x0,0x0,0x0,0xf8,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0xfc,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0xfc,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0xfc,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0xfc,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0xfc,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,
0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x28,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x28,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x28,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x28,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x28,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x28,0x1,0x0,0x0,
0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x20,0x4,0x0,0x0,
0x28,0x1,0x0,0x0,0x0,0x0,0x0,0x0,
0x4,0x1,0x0,0x0,0x6,0x0,0x0,0x0,
0xb,0x0,0x0,0x0,0xc,0x0,0x0,0x0,
0xd,0x0,0x0,0x0,0xe,0x0,0x0,0x0,
0xf,0x0,0x0,0x0,0x10,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x50,0x0,0x0,0x0,0x1f,0x0,0x0,0x0,
0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x38,0x0,0x0,0x0,0x0,0x0,0x2,0x0,
0xff,0xff,0xff,0xff,0xd,0x0,0x0,0x0,
0x5,0x0,0x50,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,
0x1,0x0,0x0,0x0,0x1e,0x0,0x0,0x0,
0xc,0x0,0x0,0x0,0x1,0x0,0x0,0x0,
0x12,0x5,0x18,0x7,0x12,0x6,0x18,0x8,
0x12,0x7,0x18,0x9,0x12,0x8,0x18,0xa,
0x12,0x9,0x18,0xb,0x12,0xa,0x18,0xc,
0xea,0x0,0x6,0x7,0x18,0x6,0x2,0x0,
0xe0,0x1,0x0,0x0,0xe8,0x1,0x0,0x0,
0x0,0x2,0x0,0x0,0x10,0x2,0x0,0x0,
0x28,0x2,0x0,0x0,0x60,0x2,0x0,0x0,
0x98,0x2,0x0,0x0,0xc8,0x2,0x0,0x0,
0x0,0x3,0x0,0x0,0x38,0x3,0x0,0x0,
0x68,0x3,0x0,0x0,0xa0,0x3,0x0,0x0,
0xb8,0x3,0x0,0x0,0xc8,0x3,0x0,0x0,
0xe0,0x3,0x0,0x0,0xf8,0x3,0x0,0x0,
0x8,0x4,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x7,0x0,0x0,0x0,0x51,0x0,0x74,0x0,
0x51,0x0,0x75,0x0,0x69,0x0,0x63,0x0,
0x6b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x4,0x0,0x0,0x0,0x49,0x0,0x74,0x0,
0x65,0x0,0x6d,0x0,0x0,0x0,0x0,0x0,
0x8,0x0,0x0,0x0,0x66,0x0,0x69,0x0,
0x6c,0x0,0x65,0x0,0x73,0x0,0x4d,0x0,
0x61,0x0,0x70,0x0,0x0,0x0,0x0,0x0,
0x17,0x0,0x0,0x0,0x65,0x0,0x78,0x0,
0x70,0x0,0x72,0x0,0x65,0x0,0x73,0x0,
0x73,0x0,0x69,0x0,0x6f,0x0,0x6e,0x0,
0x20,0x0,0x66,0x0,0x6f,0x0,0x72,0x0,
0x20,0x0,0x66,0x0,0x69,0x0,0x6c,0x0,
0x65,0x0,0x73,0x0,0x4d,0x0,0x61,0x0,
0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x16,0x0,0x0,0x0,0x71,0x0,0x72,0x0,
0x63,0x0,0x3a,0x0,0x2f,0x0,0x74,0x0,
0x65,0x0,0x78,0x0,0x74,0x0,0x73,0x0,
0x2f,0x0,0x42,0x0,0x6f,0x0,0x6f,0x0,
0x6c,0x0,0x65,0x0,0x61,0x0,0x6e,0x0,
0x2e,0x0,0x74,0x0,0x78,0x0,0x74,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x13,0x0,0x0,0x0,0x71,0x0,0x72,0x0,
0x63,0x0,0x3a,0x0,0x2f,0x0,0x74,0x0,
0x65,0x0,0x78,0x0,0x74,0x0,0x73,0x0,
0x2f,0x0,0x43,0x0,0x68,0x0,0x61,0x0,
0x72,0x0,0x2e,0x0,0x74,0x0,0x78,0x0,
0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x17,0x0,0x0,0x0,0x71,0x0,0x72,0x0,
0x63,0x0,0x3a,0x0,0x2f,0x0,0x74,0x0,
0x65,0x0,0x78,0x0,0x74,0x0,0x73,0x0,
0x2f,0x0,0x49,0x0,0x6e,0x0,0x74,0x0,
0x65,0x0,0x67,0x0,0x65,0x0,0x72,0x0,
0x73,0x0,0x2e,0x0,0x74,0x0,0x78,0x0,
0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x17,0x0,0x0,0x0,0x71,0x0,0x72,0x0,
0x63,0x0,0x3a,0x0,0x2f,0x0,0x74,0x0,
0x65,0x0,0x78,0x0,0x74,0x0,0x73,0x0,
0x2f,0x0,0x46,0x0,0x6f,0x0,0x72,0x0,
0x4c,0x0,0x6f,0x0,0x6f,0x0,0x70,0x0,
0x73,0x0,0x2e,0x0,0x74,0x0,0x78,0x0,
0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x14,0x0,0x0,0x0,0x71,0x0,0x72,0x0,
0x63,0x0,0x3a,0x0,0x2f,0x0,0x74,0x0,
0x65,0x0,0x78,0x0,0x74,0x0,0x73,0x0,
0x2f,0x0,0x57,0x0,0x68,0x0,0x69,0x0,
0x6c,0x0,0x65,0x0,0x2e,0x0,0x74,0x0,
0x78,0x0,0x74,0x0,0x0,0x0,0x0,0x0,
0x16,0x0,0x0,0x0,0x71,0x0,0x72,0x0,
0x63,0x0,0x3a,0x0,0x2f,0x0,0x74,0x0,
0x65,0x0,0x78,0x0,0x74,0x0,0x73,0x0,
0x2f,0x0,0x44,0x0,0x6f,0x0,0x57,0x0,
0x68,0x0,0x69,0x0,0x6c,0x0,0x65,0x0,
0x2e,0x0,0x74,0x0,0x78,0x0,0x74,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x7,0x0,0x0,0x0,0x42,0x0,0x6f,0x0,
0x6f,0x0,0x6c,0x0,0x65,0x0,0x61,0x0,
0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x4,0x0,0x0,0x0,0x43,0x0,0x68,0x0,
0x61,0x0,0x72,0x0,0x0,0x0,0x0,0x0,
0x8,0x0,0x0,0x0,0x49,0x0,0x6e,0x0,
0x74,0x0,0x65,0x0,0x67,0x0,0x65,0x0,
0x72,0x0,0x73,0x0,0x0,0x0,0x0,0x0,
0x9,0x0,0x0,0x0,0x46,0x0,0x6f,0x0,
0x72,0x0,0x20,0x0,0x4c,0x0,0x6f,0x0,
0x6f,0x0,0x70,0x0,0x73,0x0,0x0,0x0,
0x5,0x0,0x0,0x0,0x57,0x0,0x68,0x0,
0x69,0x0,0x6c,0x0,0x65,0x0,0x0,0x0,
0x8,0x0,0x0,0x0,0x44,0x0,0x6f,0x0,
0x20,0x0,0x57,0x0,0x68,0x0,0x69,0x0,
0x6c,0x0,0x65,0x0,0x0,0x0,0x0,0x0,
0x1,0x0,0x0,0x0,0x10,0x0,0x0,0x0,
0x1,0x0,0x0,0x0,0x24,0x0,0x0,0x0,
0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x1,0x0,0x10,0x0,
0xff,0xff,0x0,0x0,0x28,0x0,0x0,0x0,
0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0xff,0xff,0xff,0xff,0xff,0xff,
0x0,0x0,0x1,0x0,0x54,0x0,0x0,0x0,
0x54,0x0,0x0,0x0,0x60,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,
0x60,0x0,0x0,0x0,0x0,0x0,0x1,0x0,
0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x78,0x0,0x0,0x0,0x3,0x0,0x10,0x0,
0x0,0x0,0x0,0x0,0x78,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x78,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,
0x1,0x0,0x0,0x20,0x5,0x0,0x50,0x0,
0x3,0x0,0x0,0x0,0x0,0x0,0x7,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x5,0x0,0x20,0x1,0x5,0x0,0xc0,0x1
};
QT_WARNING_PUSH
QT_WARNING_DISABLE_MSVC(4573)

template <typename Binding>
void wrapCall(const QQmlPrivate::AOTCompiledContext *aotContext, void *dataPtr, void **argumentsPtr, Binding &&binding)
{
    using return_type = std::invoke_result_t<Binding, const QQmlPrivate::AOTCompiledContext *, void **>;
    if constexpr (std::is_same_v<return_type, void>) {
       Q_UNUSED(dataPtr)
       binding(aotContext, argumentsPtr);
    } else {
        if (dataPtr) {
           *static_cast<return_type *>(dataPtr) = binding(aotContext, argumentsPtr);
        } else {
           binding(aotContext, argumentsPtr);
        }
    }
}
extern const QQmlPrivate::AOTCompiledFunction aotBuiltFunctions[];
extern const QQmlPrivate::AOTCompiledFunction aotBuiltFunctions[] = {
{ 0, QMetaType::fromType<QVariant>(), {  }, 
    [](const QQmlPrivate::AOTCompiledContext *context, void *data, void **argv) {
        wrapCall(context, data, argv, [](const QQmlPrivate::AOTCompiledContext *aotContext, void **argumentsPtr) {
Q_UNUSED(aotContext)
Q_UNUSED(argumentsPtr)
// expression for filesMap at line 5, column 5
QVariant r10_0;
QVariant r2_0;
QVariant r7_0;
QVariant r9_0;
QVariant r12_0;
QVariant r8_0;
QVariant r11_0;
// generate_LoadRuntimeString
r2_0 = QVariant::fromValue(QStringLiteral("qrc:/texts/Boolean.txt"));
{
}
// generate_StoreReg
r7_0 = std::move(r2_0);
{
}
// generate_LoadRuntimeString
r2_0 = QVariant::fromValue(QStringLiteral("qrc:/texts/Char.txt"));
{
}
// generate_StoreReg
r8_0 = std::move(r2_0);
{
}
// generate_LoadRuntimeString
r2_0 = QVariant::fromValue(QStringLiteral("qrc:/texts/Integers.txt"));
{
}
// generate_StoreReg
r9_0 = std::move(r2_0);
{
}
// generate_LoadRuntimeString
r2_0 = QVariant::fromValue(QStringLiteral("qrc:/texts/ForLoops.txt"));
{
}
// generate_StoreReg
r10_0 = std::move(r2_0);
{
}
// generate_LoadRuntimeString
r2_0 = QVariant::fromValue(QStringLiteral("qrc:/texts/While.txt"));
{
}
// generate_StoreReg
r11_0 = std::move(r2_0);
{
}
// generate_LoadRuntimeString
r2_0 = QVariant::fromValue(QStringLiteral("qrc:/texts/DoWhile.txt"));
{
}
// generate_StoreReg
r12_0 = std::move(r2_0);
{
}
// generate_DefineObjectLiteral
r2_0 = QVariantMap {
{ QStringLiteral("Boolean"), std::move(r7_0) },
{ QStringLiteral("Char"), std::move(r8_0) },
{ QStringLiteral("Integers"), std::move(r9_0) },
{ QStringLiteral("For Loops"), std::move(r10_0) },
{ QStringLiteral("While"), std::move(r11_0) },
{ QStringLiteral("Do While"), std::move(r12_0) },
};
{
}
{
}
// generate_Ret
if (!r2_0.isValid())
    aotContext->setReturnValueUndefined();
return r2_0;
});}
 },{ 0, QMetaType::fromType<void>(), {}, nullptr }};
QT_WARNING_POP
}
}
